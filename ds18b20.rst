                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Thu Jul 20 09:11:00 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module ds18b20
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _segmentMap
                                     13 	.globl _main
                                     14 	.globl _DS18B20_ReadTemperature
                                     15 	.globl _DS18B20_ReadByte
                                     16 	.globl _DS18B20_WriteByte
                                     17 	.globl _DS18B20_Init
                                     18 	.globl __delay_ms
                                     19 	.globl __delay_us
                                     20 	.globl _tm1637DisplayDecimal
                                     21 	.globl _tm1637Init
                                     22 	.globl _InitializeUART
                                     23 	.globl _InitializeI2C
                                     24 	.globl _i2c_read_register
                                     25 	.globl _print_byte_hex
                                     26 	.globl _i2c_set_start_ack
                                     27 	.globl _i2c_send_address
                                     28 	.globl _UARTPrintF
                                     29 	.globl _i2c_send_reg
                                     30 	.globl _i2c_set_stop
                                     31 	.globl _i2c_set_nak
                                     32 	.globl _i2c_read
                                     33 	.globl _delay
                                     34 	.globl _InitializeSystemClock
                                     35 	.globl _delayTenMicro
                                     36 	.globl _tm1637SetBrightness
                                     37 	.globl __tm1637Start
                                     38 	.globl __tm1637Stop
                                     39 	.globl __tm1637ReadResult
                                     40 	.globl __tm1637WriteByte
                                     41 	.globl __tm1637ClkHigh
                                     42 	.globl __tm1637ClkLow
                                     43 	.globl __tm1637DioHigh
                                     44 	.globl __tm1637DioLow
                                     45 ;--------------------------------------------------------
                                     46 ; ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DATA
                                     49 ;--------------------------------------------------------
                                     50 ; ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area INITIALIZED
                                     53 ;--------------------------------------------------------
                                     54 ; Stack segment in internal ram 
                                     55 ;--------------------------------------------------------
                                     56 	.area	SSEG
      000001                         57 __start__stack:
      000001                         58 	.ds	1
                                     59 
                                     60 ;--------------------------------------------------------
                                     61 ; absolute external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area DABS (ABS)
                                     64 ;--------------------------------------------------------
                                     65 ; interrupt vector 
                                     66 ;--------------------------------------------------------
                                     67 	.area HOME
      008000                         68 __interrupt_vect:
      008000 82 00 80 83             69 	int s_GSINIT ;reset
      008004 82 00 00 00             70 	int 0x0000 ;trap
      008008 82 00 00 00             71 	int 0x0000 ;int0
      00800C 82 00 00 00             72 	int 0x0000 ;int1
      008010 82 00 00 00             73 	int 0x0000 ;int2
      008014 82 00 00 00             74 	int 0x0000 ;int3
      008018 82 00 00 00             75 	int 0x0000 ;int4
      00801C 82 00 00 00             76 	int 0x0000 ;int5
      008020 82 00 00 00             77 	int 0x0000 ;int6
      008024 82 00 00 00             78 	int 0x0000 ;int7
      008028 82 00 00 00             79 	int 0x0000 ;int8
      00802C 82 00 00 00             80 	int 0x0000 ;int9
      008030 82 00 00 00             81 	int 0x0000 ;int10
      008034 82 00 00 00             82 	int 0x0000 ;int11
      008038 82 00 00 00             83 	int 0x0000 ;int12
      00803C 82 00 00 00             84 	int 0x0000 ;int13
      008040 82 00 00 00             85 	int 0x0000 ;int14
      008044 82 00 00 00             86 	int 0x0000 ;int15
      008048 82 00 00 00             87 	int 0x0000 ;int16
      00804C 82 00 00 00             88 	int 0x0000 ;int17
      008050 82 00 00 00             89 	int 0x0000 ;int18
      008054 82 00 00 00             90 	int 0x0000 ;int19
      008058 82 00 00 00             91 	int 0x0000 ;int20
      00805C 82 00 00 00             92 	int 0x0000 ;int21
      008060 82 00 00 00             93 	int 0x0000 ;int22
      008064 82 00 00 00             94 	int 0x0000 ;int23
      008068 82 00 00 00             95 	int 0x0000 ;int24
      00806C 82 00 00 00             96 	int 0x0000 ;int25
      008070 82 00 00 00             97 	int 0x0000 ;int26
      008074 82 00 00 00             98 	int 0x0000 ;int27
      008078 82 00 00 00             99 	int 0x0000 ;int28
      00807C 82 00 00 00            100 	int 0x0000 ;int29
                                    101 ;--------------------------------------------------------
                                    102 ; global & static initialisations
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME
                                    105 	.area GSINIT
                                    106 	.area GSFINAL
                                    107 	.area GSINIT
      008083                        108 __sdcc_gs_init_startup:
      008083                        109 __sdcc_init_data:
                                    110 ; stm8_genXINIT() start
      008083 AE 00 00         [ 2]  111 	ldw x, #l_DATA
      008086 27 07            [ 1]  112 	jreq	00002$
      008088                        113 00001$:
      008088 72 4F 00 00      [ 1]  114 	clr (s_DATA - 1, x)
      00808C 5A               [ 2]  115 	decw x
      00808D 26 F9            [ 1]  116 	jrne	00001$
      00808F                        117 00002$:
      00808F AE 00 00         [ 2]  118 	ldw	x, #l_INITIALIZER
      008092 27 09            [ 1]  119 	jreq	00004$
      008094                        120 00003$:
      008094 D6 8F C5         [ 1]  121 	ld	a, (s_INITIALIZER - 1, x)
      008097 D7 00 00         [ 1]  122 	ld	(s_INITIALIZED - 1, x), a
      00809A 5A               [ 2]  123 	decw	x
      00809B 26 F7            [ 1]  124 	jrne	00003$
      00809D                        125 00004$:
                                    126 ; stm8_genXINIT() end
                                    127 	.area GSFINAL
      00809D CC 80 80         [ 2]  128 	jp	__sdcc_program_startup
                                    129 ;--------------------------------------------------------
                                    130 ; Home
                                    131 ;--------------------------------------------------------
                                    132 	.area HOME
                                    133 	.area HOME
      008080                        134 __sdcc_program_startup:
      008080 CC 85 F5         [ 2]  135 	jp	_main
                                    136 ;	return from main will return to caller
                                    137 ;--------------------------------------------------------
                                    138 ; code
                                    139 ;--------------------------------------------------------
                                    140 	.area CODE
                                    141 ;	ds18b20.c: 33: void delayTenMicro (void) {
                                    142 ;	-----------------------------------------
                                    143 ;	 function delayTenMicro
                                    144 ;	-----------------------------------------
      0080A0                        145 _delayTenMicro:
                                    146 ;	ds18b20.c: 35: for (a = 0; a < 50; ++a)
      0080A0 A6 32            [ 1]  147 	ld	a, #0x32
      0080A2 95               [ 1]  148 	ld	xh, a
      0080A3                        149 00104$:
                                    150 ;	ds18b20.c: 36: __asm__("nop");
      0080A3 9D               [ 1]  151 	nop
      0080A4 9E               [ 1]  152 	ld	a, xh
      0080A5 4A               [ 1]  153 	dec	a
      0080A6 95               [ 1]  154 	ld	xh, a
                                    155 ;	ds18b20.c: 35: for (a = 0; a < 50; ++a)
      0080A7 4D               [ 1]  156 	tnz	a
      0080A8 26 F9            [ 1]  157 	jrne	00104$
      0080AA 81               [ 4]  158 	ret
                                    159 ;	ds18b20.c: 39: void InitializeSystemClock() {
                                    160 ;	-----------------------------------------
                                    161 ;	 function InitializeSystemClock
                                    162 ;	-----------------------------------------
      0080AB                        163 _InitializeSystemClock:
                                    164 ;	ds18b20.c: 40: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      0080AB 35 00 50 C0      [ 1]  165 	mov	0x50c0+0, #0x00
                                    166 ;	ds18b20.c: 41: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      0080AF 35 01 50 C0      [ 1]  167 	mov	0x50c0+0, #0x01
                                    168 ;	ds18b20.c: 42: CLK_ECKR = 0;                       //  Disable the external clock.
      0080B3 35 00 50 C1      [ 1]  169 	mov	0x50c1+0, #0x00
                                    170 ;	ds18b20.c: 43: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      0080B7                        171 00101$:
      0080B7 AE 50 C0         [ 2]  172 	ldw	x, #0x50c0
      0080BA F6               [ 1]  173 	ld	a, (x)
      0080BB A5 02            [ 1]  174 	bcp	a, #0x02
      0080BD 27 F8            [ 1]  175 	jreq	00101$
                                    176 ;	ds18b20.c: 44: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      0080BF 35 00 50 C6      [ 1]  177 	mov	0x50c6+0, #0x00
                                    178 ;	ds18b20.c: 45: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      0080C3 35 FF 50 C7      [ 1]  179 	mov	0x50c7+0, #0xff
                                    180 ;	ds18b20.c: 46: CLK_PCKENR2 = 0xff;                 //  Ditto.
      0080C7 35 FF 50 CA      [ 1]  181 	mov	0x50ca+0, #0xff
                                    182 ;	ds18b20.c: 47: CLK_CCOR = 0;                       //  Turn off CCO.
      0080CB 35 00 50 C9      [ 1]  183 	mov	0x50c9+0, #0x00
                                    184 ;	ds18b20.c: 48: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      0080CF 35 00 50 CC      [ 1]  185 	mov	0x50cc+0, #0x00
                                    186 ;	ds18b20.c: 49: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      0080D3 35 00 50 CD      [ 1]  187 	mov	0x50cd+0, #0x00
                                    188 ;	ds18b20.c: 50: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      0080D7 35 E1 50 C4      [ 1]  189 	mov	0x50c4+0, #0xe1
                                    190 ;	ds18b20.c: 51: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      0080DB 35 00 50 C5      [ 1]  191 	mov	0x50c5+0, #0x00
                                    192 ;	ds18b20.c: 52: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      0080DF 35 02 50 C5      [ 1]  193 	mov	0x50c5+0, #0x02
                                    194 ;	ds18b20.c: 53: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      0080E3                        195 00104$:
      0080E3 AE 50 C5         [ 2]  196 	ldw	x, #0x50c5
      0080E6 F6               [ 1]  197 	ld	a, (x)
      0080E7 44               [ 1]  198 	srl	a
      0080E8 25 F9            [ 1]  199 	jrc	00104$
      0080EA 81               [ 4]  200 	ret
                                    201 ;	ds18b20.c: 55: void delay (int time_ms) {
                                    202 ;	-----------------------------------------
                                    203 ;	 function delay
                                    204 ;	-----------------------------------------
      0080EB                        205 _delay:
      0080EB 52 0A            [ 2]  206 	sub	sp, #10
                                    207 ;	ds18b20.c: 57: for (x = 0; x < 1036*time_ms; ++x)
      0080ED 5F               [ 1]  208 	clrw	x
      0080EE 1F 03            [ 2]  209 	ldw	(0x03, sp), x
      0080F0 1F 01            [ 2]  210 	ldw	(0x01, sp), x
      0080F2 1E 0D            [ 2]  211 	ldw	x, (0x0d, sp)
      0080F4 89               [ 2]  212 	pushw	x
      0080F5 4B 0C            [ 1]  213 	push	#0x0c
      0080F7 4B 04            [ 1]  214 	push	#0x04
      0080F9 CD 8B 58         [ 4]  215 	call	__mulint
      0080FC 5B 04            [ 2]  216 	addw	sp, #4
      0080FE 1F 09            [ 2]  217 	ldw	(0x09, sp), x
      008100                        218 00103$:
      008100 16 09            [ 2]  219 	ldw	y, (0x09, sp)
      008102 17 07            [ 2]  220 	ldw	(0x07, sp), y
      008104 7B 07            [ 1]  221 	ld	a, (0x07, sp)
      008106 49               [ 1]  222 	rlc	a
      008107 4F               [ 1]  223 	clr	a
      008108 A2 00            [ 1]  224 	sbc	a, #0x00
      00810A 6B 06            [ 1]  225 	ld	(0x06, sp), a
      00810C 6B 05            [ 1]  226 	ld	(0x05, sp), a
      00810E 1E 03            [ 2]  227 	ldw	x, (0x03, sp)
      008110 13 07            [ 2]  228 	cpw	x, (0x07, sp)
      008112 7B 02            [ 1]  229 	ld	a, (0x02, sp)
      008114 12 06            [ 1]  230 	sbc	a, (0x06, sp)
      008116 7B 01            [ 1]  231 	ld	a, (0x01, sp)
      008118 12 05            [ 1]  232 	sbc	a, (0x05, sp)
      00811A 2E 17            [ 1]  233 	jrsge	00105$
                                    234 ;	ds18b20.c: 58: __asm__("nop");
      00811C 9D               [ 1]  235 	nop
                                    236 ;	ds18b20.c: 57: for (x = 0; x < 1036*time_ms; ++x)
      00811D 16 03            [ 2]  237 	ldw	y, (0x03, sp)
      00811F 72 A9 00 01      [ 2]  238 	addw	y, #0x0001
      008123 7B 02            [ 1]  239 	ld	a, (0x02, sp)
      008125 A9 00            [ 1]  240 	adc	a, #0x00
      008127 97               [ 1]  241 	ld	xl, a
      008128 7B 01            [ 1]  242 	ld	a, (0x01, sp)
      00812A A9 00            [ 1]  243 	adc	a, #0x00
      00812C 95               [ 1]  244 	ld	xh, a
      00812D 17 03            [ 2]  245 	ldw	(0x03, sp), y
      00812F 1F 01            [ 2]  246 	ldw	(0x01, sp), x
      008131 20 CD            [ 2]  247 	jra	00103$
      008133                        248 00105$:
      008133 5B 0A            [ 2]  249 	addw	sp, #10
      008135 81               [ 4]  250 	ret
                                    251 ;	ds18b20.c: 60: void i2c_read (unsigned char *x) {
                                    252 ;	-----------------------------------------
                                    253 ;	 function i2c_read
                                    254 ;	-----------------------------------------
      008136                        255 _i2c_read:
                                    256 ;	ds18b20.c: 61: while ((I2C_SR1 & I2C_RXNE) == 0);
      008136                        257 00101$:
      008136 AE 52 17         [ 2]  258 	ldw	x, #0x5217
      008139 F6               [ 1]  259 	ld	a, (x)
      00813A A5 40            [ 1]  260 	bcp	a, #0x40
      00813C 27 F8            [ 1]  261 	jreq	00101$
                                    262 ;	ds18b20.c: 62: *x = I2C_DR;
      00813E 16 03            [ 2]  263 	ldw	y, (0x03, sp)
      008140 AE 52 16         [ 2]  264 	ldw	x, #0x5216
      008143 F6               [ 1]  265 	ld	a, (x)
      008144 90 F7            [ 1]  266 	ld	(y), a
      008146 81               [ 4]  267 	ret
                                    268 ;	ds18b20.c: 64: void i2c_set_nak (void) {
                                    269 ;	-----------------------------------------
                                    270 ;	 function i2c_set_nak
                                    271 ;	-----------------------------------------
      008147                        272 _i2c_set_nak:
                                    273 ;	ds18b20.c: 65: I2C_CR2 &= ~I2C_ACK;
      008147 AE 52 11         [ 2]  274 	ldw	x, #0x5211
      00814A F6               [ 1]  275 	ld	a, (x)
      00814B A4 FB            [ 1]  276 	and	a, #0xfb
      00814D F7               [ 1]  277 	ld	(x), a
      00814E 81               [ 4]  278 	ret
                                    279 ;	ds18b20.c: 67: void i2c_set_stop (void) {
                                    280 ;	-----------------------------------------
                                    281 ;	 function i2c_set_stop
                                    282 ;	-----------------------------------------
      00814F                        283 _i2c_set_stop:
                                    284 ;	ds18b20.c: 68: I2C_CR2 |= I2C_STOP;
      00814F AE 52 11         [ 2]  285 	ldw	x, #0x5211
      008152 F6               [ 1]  286 	ld	a, (x)
      008153 AA 02            [ 1]  287 	or	a, #0x02
      008155 F7               [ 1]  288 	ld	(x), a
      008156 81               [ 4]  289 	ret
                                    290 ;	ds18b20.c: 70: void i2c_send_reg (UCHAR addr) {
                                    291 ;	-----------------------------------------
                                    292 ;	 function i2c_send_reg
                                    293 ;	-----------------------------------------
      008157                        294 _i2c_send_reg:
      008157 52 02            [ 2]  295 	sub	sp, #2
                                    296 ;	ds18b20.c: 72: reg = I2C_SR1;
      008159 AE 52 17         [ 2]  297 	ldw	x, #0x5217
      00815C F6               [ 1]  298 	ld	a, (x)
      00815D 5F               [ 1]  299 	clrw	x
      00815E 97               [ 1]  300 	ld	xl, a
      00815F 1F 01            [ 2]  301 	ldw	(0x01, sp), x
                                    302 ;	ds18b20.c: 73: reg = I2C_SR3;
      008161 AE 52 19         [ 2]  303 	ldw	x, #0x5219
      008164 F6               [ 1]  304 	ld	a, (x)
      008165 5F               [ 1]  305 	clrw	x
      008166 97               [ 1]  306 	ld	xl, a
      008167 1F 01            [ 2]  307 	ldw	(0x01, sp), x
                                    308 ;	ds18b20.c: 74: I2C_DR = addr;
      008169 AE 52 16         [ 2]  309 	ldw	x, #0x5216
      00816C 7B 05            [ 1]  310 	ld	a, (0x05, sp)
      00816E F7               [ 1]  311 	ld	(x), a
                                    312 ;	ds18b20.c: 75: while ((I2C_SR1 & I2C_TXE) == 0);
      00816F                        313 00101$:
      00816F AE 52 17         [ 2]  314 	ldw	x, #0x5217
      008172 F6               [ 1]  315 	ld	a, (x)
      008173 4D               [ 1]  316 	tnz	a
      008174 2A F9            [ 1]  317 	jrpl	00101$
      008176 5B 02            [ 2]  318 	addw	sp, #2
      008178 81               [ 4]  319 	ret
                                    320 ;	ds18b20.c: 79: void UARTPrintF (char *message) {
                                    321 ;	-----------------------------------------
                                    322 ;	 function UARTPrintF
                                    323 ;	-----------------------------------------
      008179                        324 _UARTPrintF:
                                    325 ;	ds18b20.c: 80: char *ch = message;
      008179 16 03            [ 2]  326 	ldw	y, (0x03, sp)
                                    327 ;	ds18b20.c: 81: while (*ch) {
      00817B                        328 00104$:
      00817B 90 F6            [ 1]  329 	ld	a, (y)
      00817D 4D               [ 1]  330 	tnz	a
      00817E 27 0F            [ 1]  331 	jreq	00107$
                                    332 ;	ds18b20.c: 82: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      008180 AE 52 31         [ 2]  333 	ldw	x, #0x5231
      008183 F7               [ 1]  334 	ld	(x), a
                                    335 ;	ds18b20.c: 83: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      008184                        336 00101$:
      008184 AE 52 30         [ 2]  337 	ldw	x, #0x5230
      008187 F6               [ 1]  338 	ld	a, (x)
      008188 4D               [ 1]  339 	tnz	a
      008189 2A F9            [ 1]  340 	jrpl	00101$
                                    341 ;	ds18b20.c: 84: ch++;                               //  Grab the next character.
      00818B 90 5C            [ 2]  342 	incw	y
      00818D 20 EC            [ 2]  343 	jra	00104$
      00818F                        344 00107$:
      00818F 81               [ 4]  345 	ret
                                    346 ;	ds18b20.c: 90: void i2c_send_address (UCHAR addr, UCHAR mode) {
                                    347 ;	-----------------------------------------
                                    348 ;	 function i2c_send_address
                                    349 ;	-----------------------------------------
      008190                        350 _i2c_send_address:
      008190 52 03            [ 2]  351 	sub	sp, #3
                                    352 ;	ds18b20.c: 92: reg = I2C_SR1;
      008192 AE 52 17         [ 2]  353 	ldw	x, #0x5217
      008195 F6               [ 1]  354 	ld	a, (x)
      008196 5F               [ 1]  355 	clrw	x
      008197 97               [ 1]  356 	ld	xl, a
      008198 1F 01            [ 2]  357 	ldw	(0x01, sp), x
                                    358 ;	ds18b20.c: 93: I2C_DR = (addr << 1) | mode;
      00819A 7B 06            [ 1]  359 	ld	a, (0x06, sp)
      00819C 48               [ 1]  360 	sll	a
      00819D 1A 07            [ 1]  361 	or	a, (0x07, sp)
      00819F AE 52 16         [ 2]  362 	ldw	x, #0x5216
      0081A2 F7               [ 1]  363 	ld	(x), a
                                    364 ;	ds18b20.c: 94: if (mode == I2C_READ) {
      0081A3 7B 07            [ 1]  365 	ld	a, (0x07, sp)
      0081A5 A1 01            [ 1]  366 	cp	a, #0x01
      0081A7 26 06            [ 1]  367 	jrne	00127$
      0081A9 A6 01            [ 1]  368 	ld	a, #0x01
      0081AB 6B 03            [ 1]  369 	ld	(0x03, sp), a
      0081AD 20 02            [ 2]  370 	jra	00128$
      0081AF                        371 00127$:
      0081AF 0F 03            [ 1]  372 	clr	(0x03, sp)
      0081B1                        373 00128$:
      0081B1 0D 03            [ 1]  374 	tnz	(0x03, sp)
      0081B3 27 08            [ 1]  375 	jreq	00103$
                                    376 ;	ds18b20.c: 95: I2C_OARL = 0;
      0081B5 35 00 52 13      [ 1]  377 	mov	0x5213+0, #0x00
                                    378 ;	ds18b20.c: 96: I2C_OARH = 0;
      0081B9 35 00 52 14      [ 1]  379 	mov	0x5214+0, #0x00
                                    380 ;	ds18b20.c: 99: while ((I2C_SR1 & I2C_ADDR) == 0);
      0081BD                        381 00103$:
                                    382 ;	ds18b20.c: 92: reg = I2C_SR1;
      0081BD AE 52 17         [ 2]  383 	ldw	x, #0x5217
      0081C0 F6               [ 1]  384 	ld	a, (x)
                                    385 ;	ds18b20.c: 99: while ((I2C_SR1 & I2C_ADDR) == 0);
      0081C1 A5 02            [ 1]  386 	bcp	a, #0x02
      0081C3 27 F8            [ 1]  387 	jreq	00103$
                                    388 ;	ds18b20.c: 100: if (mode == I2C_READ)
      0081C5 0D 03            [ 1]  389 	tnz	(0x03, sp)
      0081C7 27 06            [ 1]  390 	jreq	00108$
                                    391 ;	ds18b20.c: 101: UNSET (I2C_SR1, I2C_ADDR);
      0081C9 A4 FD            [ 1]  392 	and	a, #0xfd
      0081CB AE 52 17         [ 2]  393 	ldw	x, #0x5217
      0081CE F7               [ 1]  394 	ld	(x), a
      0081CF                        395 00108$:
      0081CF 5B 03            [ 2]  396 	addw	sp, #3
      0081D1 81               [ 4]  397 	ret
                                    398 ;	ds18b20.c: 104: void i2c_set_start_ack (void) {
                                    399 ;	-----------------------------------------
                                    400 ;	 function i2c_set_start_ack
                                    401 ;	-----------------------------------------
      0081D2                        402 _i2c_set_start_ack:
                                    403 ;	ds18b20.c: 105: I2C_CR2 = I2C_ACK | I2C_START;
      0081D2 35 05 52 11      [ 1]  404 	mov	0x5211+0, #0x05
                                    405 ;	ds18b20.c: 106: while ((I2C_SR1 & I2C_SB) == 0);
      0081D6                        406 00101$:
      0081D6 AE 52 17         [ 2]  407 	ldw	x, #0x5217
      0081D9 F6               [ 1]  408 	ld	a, (x)
      0081DA 44               [ 1]  409 	srl	a
      0081DB 24 F9            [ 1]  410 	jrnc	00101$
      0081DD 81               [ 4]  411 	ret
                                    412 ;	ds18b20.c: 113: void print_byte_hex (unsigned char buffer) {
                                    413 ;	-----------------------------------------
                                    414 ;	 function print_byte_hex
                                    415 ;	-----------------------------------------
      0081DE                        416 _print_byte_hex:
      0081DE 52 0E            [ 2]  417 	sub	sp, #14
                                    418 ;	ds18b20.c: 116: a = (buffer >> 4);
      0081E0 7B 11            [ 1]  419 	ld	a, (0x11, sp)
      0081E2 4E               [ 1]  420 	swap	a
      0081E3 A4 0F            [ 1]  421 	and	a, #0x0f
      0081E5 5F               [ 1]  422 	clrw	x
      0081E6 97               [ 1]  423 	ld	xl, a
                                    424 ;	ds18b20.c: 117: if (a > 9)
      0081E7 A3 00 09         [ 2]  425 	cpw	x, #0x0009
      0081EA 2D 07            [ 1]  426 	jrsle	00102$
                                    427 ;	ds18b20.c: 118: a = a + 'a' - 10;
      0081EC 1C 00 57         [ 2]  428 	addw	x, #0x0057
      0081EF 1F 03            [ 2]  429 	ldw	(0x03, sp), x
      0081F1 20 05            [ 2]  430 	jra	00103$
      0081F3                        431 00102$:
                                    432 ;	ds18b20.c: 120: a += '0'; 
      0081F3 1C 00 30         [ 2]  433 	addw	x, #0x0030
      0081F6 1F 03            [ 2]  434 	ldw	(0x03, sp), x
      0081F8                        435 00103$:
                                    436 ;	ds18b20.c: 121: b = buffer & 0x0f;
      0081F8 7B 11            [ 1]  437 	ld	a, (0x11, sp)
      0081FA A4 0F            [ 1]  438 	and	a, #0x0f
      0081FC 5F               [ 1]  439 	clrw	x
      0081FD 97               [ 1]  440 	ld	xl, a
                                    441 ;	ds18b20.c: 122: if (b > 9)
      0081FE A3 00 09         [ 2]  442 	cpw	x, #0x0009
      008201 2D 07            [ 1]  443 	jrsle	00105$
                                    444 ;	ds18b20.c: 123: b = b + 'a' - 10;
      008203 1C 00 57         [ 2]  445 	addw	x, #0x0057
      008206 1F 01            [ 2]  446 	ldw	(0x01, sp), x
      008208 20 05            [ 2]  447 	jra	00106$
      00820A                        448 00105$:
                                    449 ;	ds18b20.c: 125: b += '0'; 
      00820A 1C 00 30         [ 2]  450 	addw	x, #0x0030
      00820D 1F 01            [ 2]  451 	ldw	(0x01, sp), x
      00820F                        452 00106$:
                                    453 ;	ds18b20.c: 126: message[0] = a;
      00820F 96               [ 1]  454 	ldw	x, sp
      008210 1C 00 05         [ 2]  455 	addw	x, #5
      008213 1F 0D            [ 2]  456 	ldw	(0x0d, sp), x
      008215 7B 04            [ 1]  457 	ld	a, (0x04, sp)
      008217 1E 0D            [ 2]  458 	ldw	x, (0x0d, sp)
      008219 F7               [ 1]  459 	ld	(x), a
                                    460 ;	ds18b20.c: 127: message[1] = b;
      00821A 1E 0D            [ 2]  461 	ldw	x, (0x0d, sp)
      00821C 5C               [ 2]  462 	incw	x
      00821D 7B 02            [ 1]  463 	ld	a, (0x02, sp)
      00821F F7               [ 1]  464 	ld	(x), a
                                    465 ;	ds18b20.c: 128: message[2] = 0;
      008220 1E 0D            [ 2]  466 	ldw	x, (0x0d, sp)
      008222 5C               [ 2]  467 	incw	x
      008223 5C               [ 2]  468 	incw	x
      008224 7F               [ 1]  469 	clr	(x)
                                    470 ;	ds18b20.c: 129: UARTPrintF (message);
      008225 1E 0D            [ 2]  471 	ldw	x, (0x0d, sp)
      008227 89               [ 2]  472 	pushw	x
      008228 CD 81 79         [ 4]  473 	call	_UARTPrintF
      00822B 5B 10            [ 2]  474 	addw	sp, #16
      00822D 81               [ 4]  475 	ret
                                    476 ;	ds18b20.c: 133: unsigned char i2c_read_register (UCHAR addr, UCHAR rg) {
                                    477 ;	-----------------------------------------
                                    478 ;	 function i2c_read_register
                                    479 ;	-----------------------------------------
      00822E                        480 _i2c_read_register:
      00822E 52 02            [ 2]  481 	sub	sp, #2
                                    482 ;	ds18b20.c: 136: i2c_set_start_ack ();
      008230 CD 81 D2         [ 4]  483 	call	_i2c_set_start_ack
                                    484 ;	ds18b20.c: 137: i2c_send_address (addr, I2C_WRITE);
      008233 4B 00            [ 1]  485 	push	#0x00
      008235 7B 06            [ 1]  486 	ld	a, (0x06, sp)
      008237 88               [ 1]  487 	push	a
      008238 CD 81 90         [ 4]  488 	call	_i2c_send_address
      00823B 5B 02            [ 2]  489 	addw	sp, #2
                                    490 ;	ds18b20.c: 138: i2c_send_reg (rg);
      00823D 7B 06            [ 1]  491 	ld	a, (0x06, sp)
      00823F 88               [ 1]  492 	push	a
      008240 CD 81 57         [ 4]  493 	call	_i2c_send_reg
      008243 84               [ 1]  494 	pop	a
                                    495 ;	ds18b20.c: 139: i2c_set_start_ack ();
      008244 CD 81 D2         [ 4]  496 	call	_i2c_set_start_ack
                                    497 ;	ds18b20.c: 140: i2c_send_address (addr, I2C_READ);
      008247 4B 01            [ 1]  498 	push	#0x01
      008249 7B 06            [ 1]  499 	ld	a, (0x06, sp)
      00824B 88               [ 1]  500 	push	a
      00824C CD 81 90         [ 4]  501 	call	_i2c_send_address
      00824F 5B 02            [ 2]  502 	addw	sp, #2
                                    503 ;	ds18b20.c: 141: reg = I2C_SR1;
      008251 AE 52 17         [ 2]  504 	ldw	x, #0x5217
      008254 F6               [ 1]  505 	ld	a, (x)
      008255 6B 02            [ 1]  506 	ld	(0x02, sp), a
                                    507 ;	ds18b20.c: 142: reg = I2C_SR3;
      008257 AE 52 19         [ 2]  508 	ldw	x, #0x5219
      00825A F6               [ 1]  509 	ld	a, (x)
      00825B 6B 02            [ 1]  510 	ld	(0x02, sp), a
                                    511 ;	ds18b20.c: 143: i2c_set_nak ();
      00825D CD 81 47         [ 4]  512 	call	_i2c_set_nak
                                    513 ;	ds18b20.c: 144: i2c_set_stop ();
      008260 CD 81 4F         [ 4]  514 	call	_i2c_set_stop
                                    515 ;	ds18b20.c: 145: i2c_read (&x);
      008263 96               [ 1]  516 	ldw	x, sp
      008264 5C               [ 2]  517 	incw	x
      008265 89               [ 2]  518 	pushw	x
      008266 CD 81 36         [ 4]  519 	call	_i2c_read
      008269 5B 02            [ 2]  520 	addw	sp, #2
                                    521 ;	ds18b20.c: 146: return (x);
      00826B 7B 01            [ 1]  522 	ld	a, (0x01, sp)
      00826D 5B 02            [ 2]  523 	addw	sp, #2
      00826F 81               [ 4]  524 	ret
                                    525 ;	ds18b20.c: 149: void InitializeI2C (void) {
                                    526 ;	-----------------------------------------
                                    527 ;	 function InitializeI2C
                                    528 ;	-----------------------------------------
      008270                        529 _InitializeI2C:
                                    530 ;	ds18b20.c: 150: I2C_CR1 = 0;   //  Disable I2C before configuration starts. PE bit is bit 0
      008270 35 00 52 10      [ 1]  531 	mov	0x5210+0, #0x00
                                    532 ;	ds18b20.c: 154: I2C_FREQR = 16;                     //  Set the internal clock frequency (MHz).
      008274 35 10 52 12      [ 1]  533 	mov	0x5212+0, #0x10
                                    534 ;	ds18b20.c: 155: UNSET (I2C_CCRH, I2C_FS);           //  I2C running is standard mode.
      008278 72 1F 52 1C      [ 1]  535 	bres	0x521c, #7
                                    536 ;	ds18b20.c: 157: I2C_CCRL = 0xa0;                    //  SCL clock speed is 50 kHz.
      00827C 35 A0 52 1B      [ 1]  537 	mov	0x521b+0, #0xa0
                                    538 ;	ds18b20.c: 159: I2C_CCRH &= 0x00;	// Clears lower 4 bits "CCR"
      008280 35 00 52 1C      [ 1]  539 	mov	0x521c+0, #0x00
                                    540 ;	ds18b20.c: 163: UNSET (I2C_OARH, I2C_ADDMODE);      //  7 bit address mode.
      008284 72 1F 52 14      [ 1]  541 	bres	0x5214, #7
                                    542 ;	ds18b20.c: 164: SET (I2C_OARH, I2C_ADDCONF);        //  Docs say this must always be 1.
      008288 AE 52 14         [ 2]  543 	ldw	x, #0x5214
      00828B F6               [ 1]  544 	ld	a, (x)
      00828C AA 40            [ 1]  545 	or	a, #0x40
      00828E F7               [ 1]  546 	ld	(x), a
                                    547 ;	ds18b20.c: 168: I2C_TRISER = 17;
      00828F 35 11 52 1D      [ 1]  548 	mov	0x521d+0, #0x11
                                    549 ;	ds18b20.c: 176: I2C_CR1 = I2C_PE;	// Enables port
      008293 35 01 52 10      [ 1]  550 	mov	0x5210+0, #0x01
      008297 81               [ 4]  551 	ret
                                    552 ;	ds18b20.c: 182: void InitializeUART() {
                                    553 ;	-----------------------------------------
                                    554 ;	 function InitializeUART
                                    555 ;	-----------------------------------------
      008298                        556 _InitializeUART:
                                    557 ;	ds18b20.c: 192: UART1_CR1 = 0;
      008298 35 00 52 34      [ 1]  558 	mov	0x5234+0, #0x00
                                    559 ;	ds18b20.c: 193: UART1_CR2 = 0;
      00829C 35 00 52 35      [ 1]  560 	mov	0x5235+0, #0x00
                                    561 ;	ds18b20.c: 194: UART1_CR4 = 0;
      0082A0 35 00 52 37      [ 1]  562 	mov	0x5237+0, #0x00
                                    563 ;	ds18b20.c: 195: UART1_CR3 = 0;
      0082A4 35 00 52 36      [ 1]  564 	mov	0x5236+0, #0x00
                                    565 ;	ds18b20.c: 196: UART1_CR5 = 0;
      0082A8 35 00 52 38      [ 1]  566 	mov	0x5238+0, #0x00
                                    567 ;	ds18b20.c: 197: UART1_GTR = 0;
      0082AC 35 00 52 39      [ 1]  568 	mov	0x5239+0, #0x00
                                    569 ;	ds18b20.c: 198: UART1_PSCR = 0;
      0082B0 35 00 52 3A      [ 1]  570 	mov	0x523a+0, #0x00
                                    571 ;	ds18b20.c: 202: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      0082B4 AE 52 34         [ 2]  572 	ldw	x, #0x5234
      0082B7 F6               [ 1]  573 	ld	a, (x)
      0082B8 A4 EF            [ 1]  574 	and	a, #0xef
      0082BA F7               [ 1]  575 	ld	(x), a
                                    576 ;	ds18b20.c: 203: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      0082BB AE 52 34         [ 2]  577 	ldw	x, #0x5234
      0082BE F6               [ 1]  578 	ld	a, (x)
      0082BF A4 FB            [ 1]  579 	and	a, #0xfb
      0082C1 F7               [ 1]  580 	ld	(x), a
                                    581 ;	ds18b20.c: 204: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      0082C2 AE 52 36         [ 2]  582 	ldw	x, #0x5236
      0082C5 F6               [ 1]  583 	ld	a, (x)
      0082C6 A4 DF            [ 1]  584 	and	a, #0xdf
      0082C8 F7               [ 1]  585 	ld	(x), a
                                    586 ;	ds18b20.c: 205: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      0082C9 AE 52 36         [ 2]  587 	ldw	x, #0x5236
      0082CC F6               [ 1]  588 	ld	a, (x)
      0082CD A4 EF            [ 1]  589 	and	a, #0xef
      0082CF F7               [ 1]  590 	ld	(x), a
                                    591 ;	ds18b20.c: 206: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      0082D0 35 0A 52 33      [ 1]  592 	mov	0x5233+0, #0x0a
                                    593 ;	ds18b20.c: 207: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      0082D4 35 08 52 32      [ 1]  594 	mov	0x5232+0, #0x08
                                    595 ;	ds18b20.c: 211: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      0082D8 AE 52 35         [ 2]  596 	ldw	x, #0x5235
      0082DB F6               [ 1]  597 	ld	a, (x)
      0082DC A4 F7            [ 1]  598 	and	a, #0xf7
      0082DE F7               [ 1]  599 	ld	(x), a
                                    600 ;	ds18b20.c: 212: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      0082DF AE 52 35         [ 2]  601 	ldw	x, #0x5235
      0082E2 F6               [ 1]  602 	ld	a, (x)
      0082E3 A4 FB            [ 1]  603 	and	a, #0xfb
      0082E5 F7               [ 1]  604 	ld	(x), a
                                    605 ;	ds18b20.c: 216: SET (UART1_CR3, CR3_CPOL);
      0082E6 AE 52 36         [ 2]  606 	ldw	x, #0x5236
      0082E9 F6               [ 1]  607 	ld	a, (x)
      0082EA AA 04            [ 1]  608 	or	a, #0x04
      0082EC F7               [ 1]  609 	ld	(x), a
                                    610 ;	ds18b20.c: 217: SET (UART1_CR3, CR3_CPHA);
      0082ED AE 52 36         [ 2]  611 	ldw	x, #0x5236
      0082F0 F6               [ 1]  612 	ld	a, (x)
      0082F1 AA 02            [ 1]  613 	or	a, #0x02
      0082F3 F7               [ 1]  614 	ld	(x), a
                                    615 ;	ds18b20.c: 218: SET (UART1_CR3, CR3_LBCL);
      0082F4 72 10 52 36      [ 1]  616 	bset	0x5236, #0
                                    617 ;	ds18b20.c: 222: SET (UART1_CR2, CR2_TEN);
      0082F8 AE 52 35         [ 2]  618 	ldw	x, #0x5235
      0082FB F6               [ 1]  619 	ld	a, (x)
      0082FC AA 08            [ 1]  620 	or	a, #0x08
      0082FE F7               [ 1]  621 	ld	(x), a
                                    622 ;	ds18b20.c: 223: SET (UART1_CR2, CR2_REN);
      0082FF AE 52 35         [ 2]  623 	ldw	x, #0x5235
      008302 F6               [ 1]  624 	ld	a, (x)
      008303 AA 04            [ 1]  625 	or	a, #0x04
      008305 F7               [ 1]  626 	ld	(x), a
                                    627 ;	ds18b20.c: 224: UART1_CR3 = CR3_CLKEN;
      008306 35 08 52 36      [ 1]  628 	mov	0x5236+0, #0x08
      00830A 81               [ 4]  629 	ret
                                    630 ;	ds18b20.c: 252: void tm1637Init(void)
                                    631 ;	-----------------------------------------
                                    632 ;	 function tm1637Init
                                    633 ;	-----------------------------------------
      00830B                        634 _tm1637Init:
                                    635 ;	ds18b20.c: 254: tm1637SetBrightness(8);
      00830B 4B 08            [ 1]  636 	push	#0x08
      00830D CD 83 A8         [ 4]  637 	call	_tm1637SetBrightness
      008310 84               [ 1]  638 	pop	a
      008311 81               [ 4]  639 	ret
                                    640 ;	ds18b20.c: 259: void tm1637DisplayDecimal(long TT,unsigned int displaySeparator)
                                    641 ;	-----------------------------------------
                                    642 ;	 function tm1637DisplayDecimal
                                    643 ;	-----------------------------------------
      008312                        644 _tm1637DisplayDecimal:
      008312 52 0D            [ 2]  645 	sub	sp, #13
                                    646 ;	ds18b20.c: 261: unsigned int v = TT & 0x0000FFFF;
      008314 16 12            [ 2]  647 	ldw	y, (0x12, sp)
      008316 5F               [ 1]  648 	clrw	x
      008317 17 01            [ 2]  649 	ldw	(0x01, sp), y
                                    650 ;	ds18b20.c: 267: for (ii = 0; ii < 4; ++ii) {
      008319 96               [ 1]  651 	ldw	x, sp
      00831A 1C 00 05         [ 2]  652 	addw	x, #5
      00831D 1F 0A            [ 2]  653 	ldw	(0x0a, sp), x
      00831F AE 87 36         [ 2]  654 	ldw	x, #_segmentMap+0
      008322 1F 0C            [ 2]  655 	ldw	(0x0c, sp), x
      008324 5F               [ 1]  656 	clrw	x
      008325 1F 03            [ 2]  657 	ldw	(0x03, sp), x
      008327                        658 00106$:
                                    659 ;	ds18b20.c: 268: digitArr[ii] = segmentMap[v % 10];
      008327 1E 0A            [ 2]  660 	ldw	x, (0x0a, sp)
      008329 72 FB 03         [ 2]  661 	addw	x, (0x03, sp)
      00832C 89               [ 2]  662 	pushw	x
      00832D 1E 03            [ 2]  663 	ldw	x, (0x03, sp)
      00832F 90 AE 00 0A      [ 2]  664 	ldw	y, #0x000a
      008333 65               [ 2]  665 	divw	x, y
      008334 90 9F            [ 1]  666 	ld	a, yl
      008336 85               [ 2]  667 	popw	x
      008337 90 97            [ 1]  668 	ld	yl, a
      008339 72 F9 0C         [ 2]  669 	addw	y, (0x0c, sp)
      00833C 90 F6            [ 1]  670 	ld	a, (y)
      00833E F7               [ 1]  671 	ld	(x), a
                                    672 ;	ds18b20.c: 269: if (ii == 2 && displaySeparator) {
      00833F 89               [ 2]  673 	pushw	x
      008340 1E 05            [ 2]  674 	ldw	x, (0x05, sp)
      008342 A3 00 02         [ 2]  675 	cpw	x, #0x0002
      008345 85               [ 2]  676 	popw	x
      008346 26 08            [ 1]  677 	jrne	00102$
      008348 16 14            [ 2]  678 	ldw	y, (0x14, sp)
      00834A 27 04            [ 1]  679 	jreq	00102$
                                    680 ;	ds18b20.c: 270: digitArr[ii] |= 1 << 7;
      00834C F6               [ 1]  681 	ld	a, (x)
      00834D AA 80            [ 1]  682 	or	a, #0x80
      00834F F7               [ 1]  683 	ld	(x), a
      008350                        684 00102$:
                                    685 ;	ds18b20.c: 272: v /= 10;
      008350 1E 01            [ 2]  686 	ldw	x, (0x01, sp)
      008352 90 AE 00 0A      [ 2]  687 	ldw	y, #0x000a
      008356 65               [ 2]  688 	divw	x, y
      008357 1F 01            [ 2]  689 	ldw	(0x01, sp), x
                                    690 ;	ds18b20.c: 267: for (ii = 0; ii < 4; ++ii) {
      008359 1E 03            [ 2]  691 	ldw	x, (0x03, sp)
      00835B 5C               [ 2]  692 	incw	x
      00835C 1F 03            [ 2]  693 	ldw	(0x03, sp), x
      00835E 1E 03            [ 2]  694 	ldw	x, (0x03, sp)
      008360 A3 00 04         [ 2]  695 	cpw	x, #0x0004
      008363 25 C2            [ 1]  696 	jrc	00106$
                                    697 ;	ds18b20.c: 275: _tm1637Start();
      008365 CD 83 BA         [ 4]  698 	call	__tm1637Start
                                    699 ;	ds18b20.c: 276: _tm1637WriteByte(0x40);
      008368 4B 40            [ 1]  700 	push	#0x40
      00836A CD 84 0E         [ 4]  701 	call	__tm1637WriteByte
      00836D 84               [ 1]  702 	pop	a
                                    703 ;	ds18b20.c: 277: _tm1637ReadResult();
      00836E CD 83 F3         [ 4]  704 	call	__tm1637ReadResult
                                    705 ;	ds18b20.c: 278: _tm1637Stop();
      008371 CD 83 CC         [ 4]  706 	call	__tm1637Stop
                                    707 ;	ds18b20.c: 280: _tm1637Start();
      008374 CD 83 BA         [ 4]  708 	call	__tm1637Start
                                    709 ;	ds18b20.c: 281: _tm1637WriteByte(0xc0);
      008377 4B C0            [ 1]  710 	push	#0xc0
      008379 CD 84 0E         [ 4]  711 	call	__tm1637WriteByte
      00837C 84               [ 1]  712 	pop	a
                                    713 ;	ds18b20.c: 282: _tm1637ReadResult();
      00837D CD 83 F3         [ 4]  714 	call	__tm1637ReadResult
                                    715 ;	ds18b20.c: 284: for (ii = 0; ii < 4; ++ii) {
      008380 5F               [ 1]  716 	clrw	x
      008381                        717 00108$:
                                    718 ;	ds18b20.c: 285: _tm1637WriteByte(digitArr[3 - ii]);
      008381 41               [ 1]  719 	exg	a, xl
      008382 6B 09            [ 1]  720 	ld	(0x09, sp), a
      008384 41               [ 1]  721 	exg	a, xl
      008385 A6 03            [ 1]  722 	ld	a, #0x03
      008387 10 09            [ 1]  723 	sub	a, (0x09, sp)
      008389 90 5F            [ 1]  724 	clrw	y
      00838B 90 97            [ 1]  725 	ld	yl, a
      00838D 72 F9 0A         [ 2]  726 	addw	y, (0x0a, sp)
      008390 90 F6            [ 1]  727 	ld	a, (y)
      008392 89               [ 2]  728 	pushw	x
      008393 88               [ 1]  729 	push	a
      008394 CD 84 0E         [ 4]  730 	call	__tm1637WriteByte
      008397 84               [ 1]  731 	pop	a
      008398 CD 83 F3         [ 4]  732 	call	__tm1637ReadResult
      00839B 85               [ 2]  733 	popw	x
                                    734 ;	ds18b20.c: 284: for (ii = 0; ii < 4; ++ii) {
      00839C 5C               [ 2]  735 	incw	x
      00839D A3 00 04         [ 2]  736 	cpw	x, #0x0004
      0083A0 25 DF            [ 1]  737 	jrc	00108$
                                    738 ;	ds18b20.c: 289: _tm1637Stop();
      0083A2 CD 83 CC         [ 4]  739 	call	__tm1637Stop
      0083A5 5B 0D            [ 2]  740 	addw	sp, #13
      0083A7 81               [ 4]  741 	ret
                                    742 ;	ds18b20.c: 294: void tm1637SetBrightness(char brightness)
                                    743 ;	-----------------------------------------
                                    744 ;	 function tm1637SetBrightness
                                    745 ;	-----------------------------------------
      0083A8                        746 _tm1637SetBrightness:
                                    747 ;	ds18b20.c: 301: _tm1637Start();
      0083A8 CD 83 BA         [ 4]  748 	call	__tm1637Start
                                    749 ;	ds18b20.c: 302: _tm1637WriteByte(0x87 + brightness);
      0083AB 7B 03            [ 1]  750 	ld	a, (0x03, sp)
      0083AD AB 87            [ 1]  751 	add	a, #0x87
      0083AF 88               [ 1]  752 	push	a
      0083B0 CD 84 0E         [ 4]  753 	call	__tm1637WriteByte
      0083B3 84               [ 1]  754 	pop	a
                                    755 ;	ds18b20.c: 303: _tm1637ReadResult();
      0083B4 CD 83 F3         [ 4]  756 	call	__tm1637ReadResult
                                    757 ;	ds18b20.c: 304: _tm1637Stop();
      0083B7 CC 83 CC         [ 2]  758 	jp	__tm1637Stop
                                    759 ;	ds18b20.c: 307: void _tm1637Start(void)
                                    760 ;	-----------------------------------------
                                    761 ;	 function _tm1637Start
                                    762 ;	-----------------------------------------
      0083BA                        763 __tm1637Start:
                                    764 ;	ds18b20.c: 309: _tm1637ClkHigh();
      0083BA CD 84 4C         [ 4]  765 	call	__tm1637ClkHigh
                                    766 ;	ds18b20.c: 310: _tm1637DioHigh();
      0083BD CD 84 5C         [ 4]  767 	call	__tm1637DioHigh
                                    768 ;	ds18b20.c: 311: delay(5);
      0083C0 4B 05            [ 1]  769 	push	#0x05
      0083C2 4B 00            [ 1]  770 	push	#0x00
      0083C4 CD 80 EB         [ 4]  771 	call	_delay
      0083C7 5B 02            [ 2]  772 	addw	sp, #2
                                    773 ;	ds18b20.c: 312: _tm1637DioLow();
      0083C9 CC 84 64         [ 2]  774 	jp	__tm1637DioLow
                                    775 ;	ds18b20.c: 315: void _tm1637Stop(void)
                                    776 ;	-----------------------------------------
                                    777 ;	 function _tm1637Stop
                                    778 ;	-----------------------------------------
      0083CC                        779 __tm1637Stop:
                                    780 ;	ds18b20.c: 317: _tm1637ClkLow();
      0083CC CD 84 54         [ 4]  781 	call	__tm1637ClkLow
                                    782 ;	ds18b20.c: 318: delay(5);
      0083CF 4B 05            [ 1]  783 	push	#0x05
      0083D1 4B 00            [ 1]  784 	push	#0x00
      0083D3 CD 80 EB         [ 4]  785 	call	_delay
      0083D6 5B 02            [ 2]  786 	addw	sp, #2
                                    787 ;	ds18b20.c: 319: _tm1637DioLow();
      0083D8 CD 84 64         [ 4]  788 	call	__tm1637DioLow
                                    789 ;	ds18b20.c: 320: delay(5);
      0083DB 4B 05            [ 1]  790 	push	#0x05
      0083DD 4B 00            [ 1]  791 	push	#0x00
      0083DF CD 80 EB         [ 4]  792 	call	_delay
      0083E2 5B 02            [ 2]  793 	addw	sp, #2
                                    794 ;	ds18b20.c: 321: _tm1637ClkHigh();
      0083E4 CD 84 4C         [ 4]  795 	call	__tm1637ClkHigh
                                    796 ;	ds18b20.c: 322: delay(5);
      0083E7 4B 05            [ 1]  797 	push	#0x05
      0083E9 4B 00            [ 1]  798 	push	#0x00
      0083EB CD 80 EB         [ 4]  799 	call	_delay
      0083EE 5B 02            [ 2]  800 	addw	sp, #2
                                    801 ;	ds18b20.c: 323: _tm1637DioHigh();
      0083F0 CC 84 5C         [ 2]  802 	jp	__tm1637DioHigh
                                    803 ;	ds18b20.c: 326: void _tm1637ReadResult(void)
                                    804 ;	-----------------------------------------
                                    805 ;	 function _tm1637ReadResult
                                    806 ;	-----------------------------------------
      0083F3                        807 __tm1637ReadResult:
                                    808 ;	ds18b20.c: 328: _tm1637ClkLow();
      0083F3 CD 84 54         [ 4]  809 	call	__tm1637ClkLow
                                    810 ;	ds18b20.c: 329: delay(5);
      0083F6 4B 05            [ 1]  811 	push	#0x05
      0083F8 4B 00            [ 1]  812 	push	#0x00
      0083FA CD 80 EB         [ 4]  813 	call	_delay
      0083FD 5B 02            [ 2]  814 	addw	sp, #2
                                    815 ;	ds18b20.c: 331: _tm1637ClkHigh();
      0083FF CD 84 4C         [ 4]  816 	call	__tm1637ClkHigh
                                    817 ;	ds18b20.c: 332: delay(5);
      008402 4B 05            [ 1]  818 	push	#0x05
      008404 4B 00            [ 1]  819 	push	#0x00
      008406 CD 80 EB         [ 4]  820 	call	_delay
      008409 5B 02            [ 2]  821 	addw	sp, #2
                                    822 ;	ds18b20.c: 333: _tm1637ClkLow();
      00840B CC 84 54         [ 2]  823 	jp	__tm1637ClkLow
                                    824 ;	ds18b20.c: 336: void _tm1637WriteByte(unsigned char b)
                                    825 ;	-----------------------------------------
                                    826 ;	 function _tm1637WriteByte
                                    827 ;	-----------------------------------------
      00840E                        828 __tm1637WriteByte:
      00840E 52 02            [ 2]  829 	sub	sp, #2
                                    830 ;	ds18b20.c: 338: for (ii = 0; ii < 8; ++ii) {
      008410 5F               [ 1]  831 	clrw	x
      008411 1F 01            [ 2]  832 	ldw	(0x01, sp), x
      008413                        833 00105$:
                                    834 ;	ds18b20.c: 339: _tm1637ClkLow();
      008413 CD 84 54         [ 4]  835 	call	__tm1637ClkLow
                                    836 ;	ds18b20.c: 340: if (b & 0x01) {
      008416 7B 05            [ 1]  837 	ld	a, (0x05, sp)
      008418 44               [ 1]  838 	srl	a
      008419 24 05            [ 1]  839 	jrnc	00102$
                                    840 ;	ds18b20.c: 341: _tm1637DioHigh();
      00841B CD 84 5C         [ 4]  841 	call	__tm1637DioHigh
      00841E 20 03            [ 2]  842 	jra	00103$
      008420                        843 00102$:
                                    844 ;	ds18b20.c: 344: _tm1637DioLow();
      008420 CD 84 64         [ 4]  845 	call	__tm1637DioLow
      008423                        846 00103$:
                                    847 ;	ds18b20.c: 346: delay(15);
      008423 4B 0F            [ 1]  848 	push	#0x0f
      008425 4B 00            [ 1]  849 	push	#0x00
      008427 CD 80 EB         [ 4]  850 	call	_delay
      00842A 5B 02            [ 2]  851 	addw	sp, #2
                                    852 ;	ds18b20.c: 347: b >>= 1;
      00842C 7B 05            [ 1]  853 	ld	a, (0x05, sp)
      00842E 44               [ 1]  854 	srl	a
      00842F 6B 05            [ 1]  855 	ld	(0x05, sp), a
                                    856 ;	ds18b20.c: 348: _tm1637ClkHigh();
      008431 CD 84 4C         [ 4]  857 	call	__tm1637ClkHigh
                                    858 ;	ds18b20.c: 349: delay(15);
      008434 4B 0F            [ 1]  859 	push	#0x0f
      008436 4B 00            [ 1]  860 	push	#0x00
      008438 CD 80 EB         [ 4]  861 	call	_delay
      00843B 5B 02            [ 2]  862 	addw	sp, #2
                                    863 ;	ds18b20.c: 338: for (ii = 0; ii < 8; ++ii) {
      00843D 1E 01            [ 2]  864 	ldw	x, (0x01, sp)
      00843F 5C               [ 2]  865 	incw	x
      008440 1F 01            [ 2]  866 	ldw	(0x01, sp), x
      008442 1E 01            [ 2]  867 	ldw	x, (0x01, sp)
      008444 A3 00 08         [ 2]  868 	cpw	x, #0x0008
      008447 2F CA            [ 1]  869 	jrslt	00105$
      008449 5B 02            [ 2]  870 	addw	sp, #2
      00844B 81               [ 4]  871 	ret
                                    872 ;	ds18b20.c: 355: void _tm1637ClkHigh(void)
                                    873 ;	-----------------------------------------
                                    874 ;	 function _tm1637ClkHigh
                                    875 ;	-----------------------------------------
      00844C                        876 __tm1637ClkHigh:
                                    877 ;	ds18b20.c: 360: PD_ODR |= 1 << 2;
      00844C AE 50 0F         [ 2]  878 	ldw	x, #0x500f
      00844F F6               [ 1]  879 	ld	a, (x)
      008450 AA 04            [ 1]  880 	or	a, #0x04
      008452 F7               [ 1]  881 	ld	(x), a
      008453 81               [ 4]  882 	ret
                                    883 ;	ds18b20.c: 363: void _tm1637ClkLow(void)
                                    884 ;	-----------------------------------------
                                    885 ;	 function _tm1637ClkLow
                                    886 ;	-----------------------------------------
      008454                        887 __tm1637ClkLow:
                                    888 ;	ds18b20.c: 367: PD_ODR &= ~(1 << 2);
      008454 AE 50 0F         [ 2]  889 	ldw	x, #0x500f
      008457 F6               [ 1]  890 	ld	a, (x)
      008458 A4 FB            [ 1]  891 	and	a, #0xfb
      00845A F7               [ 1]  892 	ld	(x), a
      00845B 81               [ 4]  893 	ret
                                    894 ;	ds18b20.c: 373: void _tm1637DioHigh(void)
                                    895 ;	-----------------------------------------
                                    896 ;	 function _tm1637DioHigh
                                    897 ;	-----------------------------------------
      00845C                        898 __tm1637DioHigh:
                                    899 ;	ds18b20.c: 377: PD_ODR |= 1 << 3;
      00845C AE 50 0F         [ 2]  900 	ldw	x, #0x500f
      00845F F6               [ 1]  901 	ld	a, (x)
      008460 AA 08            [ 1]  902 	or	a, #0x08
      008462 F7               [ 1]  903 	ld	(x), a
      008463 81               [ 4]  904 	ret
                                    905 ;	ds18b20.c: 381: void _tm1637DioLow(void)
                                    906 ;	-----------------------------------------
                                    907 ;	 function _tm1637DioLow
                                    908 ;	-----------------------------------------
      008464                        909 __tm1637DioLow:
                                    910 ;	ds18b20.c: 383: PD_ODR &= ~(1 << 3);
      008464 AE 50 0F         [ 2]  911 	ldw	x, #0x500f
      008467 F6               [ 1]  912 	ld	a, (x)
      008468 A4 F7            [ 1]  913 	and	a, #0xf7
      00846A F7               [ 1]  914 	ld	(x), a
      00846B 81               [ 4]  915 	ret
                                    916 ;	ds18b20.c: 391: void _delay_us(unsigned int i)
                                    917 ;	-----------------------------------------
                                    918 ;	 function _delay_us
                                    919 ;	-----------------------------------------
      00846C                        920 __delay_us:
                                    921 ;	ds18b20.c: 393: i *= 3; 
      00846C 1E 03            [ 2]  922 	ldw	x, (0x03, sp)
      00846E 89               [ 2]  923 	pushw	x
      00846F 4B 03            [ 1]  924 	push	#0x03
      008471 4B 00            [ 1]  925 	push	#0x00
      008473 CD 8B 58         [ 4]  926 	call	__mulint
      008476 5B 04            [ 2]  927 	addw	sp, #4
      008478 1F 03            [ 2]  928 	ldw	(0x03, sp), x
                                    929 ;	ds18b20.c: 394: while(--i);
      00847A 1E 03            [ 2]  930 	ldw	x, (0x03, sp)
      00847C                        931 00101$:
      00847C 5A               [ 2]  932 	decw	x
      00847D 5D               [ 2]  933 	tnzw	x
      00847E 26 FC            [ 1]  934 	jrne	00101$
      008480 81               [ 4]  935 	ret
                                    936 ;	ds18b20.c: 397: void _delay_ms(unsigned int i)
                                    937 ;	-----------------------------------------
                                    938 ;	 function _delay_ms
                                    939 ;	-----------------------------------------
      008481                        940 __delay_ms:
      008481 52 02            [ 2]  941 	sub	sp, #2
                                    942 ;	ds18b20.c: 399: while(i--)
      008483 1E 05            [ 2]  943 	ldw	x, (0x05, sp)
      008485                        944 00101$:
      008485 1F 01            [ 2]  945 	ldw	(0x01, sp), x
      008487 5A               [ 2]  946 	decw	x
      008488 16 01            [ 2]  947 	ldw	y, (0x01, sp)
      00848A 27 0D            [ 1]  948 	jreq	00104$
                                    949 ;	ds18b20.c: 401: _delay_us(1000);
      00848C 89               [ 2]  950 	pushw	x
      00848D 4B E8            [ 1]  951 	push	#0xe8
      00848F 4B 03            [ 1]  952 	push	#0x03
      008491 CD 84 6C         [ 4]  953 	call	__delay_us
      008494 5B 02            [ 2]  954 	addw	sp, #2
      008496 85               [ 2]  955 	popw	x
      008497 20 EC            [ 2]  956 	jra	00101$
      008499                        957 00104$:
      008499 5B 02            [ 2]  958 	addw	sp, #2
      00849B 81               [ 4]  959 	ret
                                    960 ;	ds18b20.c: 407: void DS18B20_Init(void)
                                    961 ;	-----------------------------------------
                                    962 ;	 function DS18B20_Init
                                    963 ;	-----------------------------------------
      00849C                        964 _DS18B20_Init:
                                    965 ;	ds18b20.c: 409: DS18B20_DQ_OUT;   
      00849C AE 50 02         [ 2]  966 	ldw	x, #0x5002
      00849F F6               [ 1]  967 	ld	a, (x)
      0084A0 AA 08            [ 1]  968 	or	a, #0x08
      0084A2 F7               [ 1]  969 	ld	(x), a
                                    970 ;	ds18b20.c: 410: DS18B20_DQ_PUSH_PULL;    
      0084A3 AE 50 03         [ 2]  971 	ldw	x, #0x5003
      0084A6 F6               [ 1]  972 	ld	a, (x)
      0084A7 AA 08            [ 1]  973 	or	a, #0x08
      0084A9 F7               [ 1]  974 	ld	(x), a
                                    975 ;	ds18b20.c: 411: DS18B20_DQ_HIGH;   
      0084AA AE 50 00         [ 2]  976 	ldw	x, #0x5000
      0084AD F6               [ 1]  977 	ld	a, (x)
      0084AE AA 08            [ 1]  978 	or	a, #0x08
      0084B0 F7               [ 1]  979 	ld	(x), a
                                    980 ;	ds18b20.c: 412: _delay_us(10);
      0084B1 4B 0A            [ 1]  981 	push	#0x0a
      0084B3 4B 00            [ 1]  982 	push	#0x00
      0084B5 CD 84 6C         [ 4]  983 	call	__delay_us
      0084B8 5B 02            [ 2]  984 	addw	sp, #2
                                    985 ;	ds18b20.c: 413: DS18B20_DQ_LOW;   
      0084BA AE 50 00         [ 2]  986 	ldw	x, #0x5000
      0084BD F6               [ 1]  987 	ld	a, (x)
      0084BE A4 F7            [ 1]  988 	and	a, #0xf7
      0084C0 F7               [ 1]  989 	ld	(x), a
                                    990 ;	ds18b20.c: 414: _delay_us(600);     //????
      0084C1 4B 58            [ 1]  991 	push	#0x58
      0084C3 4B 02            [ 1]  992 	push	#0x02
      0084C5 CD 84 6C         [ 4]  993 	call	__delay_us
      0084C8 5B 02            [ 2]  994 	addw	sp, #2
                                    995 ;	ds18b20.c: 416: DS18B20_DQ_IN;   
      0084CA AE 50 02         [ 2]  996 	ldw	x, #0x5002
      0084CD F6               [ 1]  997 	ld	a, (x)
      0084CE A4 F7            [ 1]  998 	and	a, #0xf7
      0084D0 F7               [ 1]  999 	ld	(x), a
                                   1000 ;	ds18b20.c: 417: DS18B20_DQ_PULL_UP;    
      0084D1 AE 50 03         [ 2] 1001 	ldw	x, #0x5003
      0084D4 F6               [ 1] 1002 	ld	a, (x)
      0084D5 AA 08            [ 1] 1003 	or	a, #0x08
      0084D7 F7               [ 1] 1004 	ld	(x), a
                                   1005 ;	ds18b20.c: 418: _delay_us(100);     
      0084D8 4B 64            [ 1] 1006 	push	#0x64
      0084DA 4B 00            [ 1] 1007 	push	#0x00
      0084DC CD 84 6C         [ 4] 1008 	call	__delay_us
      0084DF 5B 02            [ 2] 1009 	addw	sp, #2
                                   1010 ;	ds18b20.c: 419: while(DS18B20_DQ_VALUE == 1);
      0084E1                       1011 00101$:
      0084E1 AE 50 01         [ 2] 1012 	ldw	x, #0x5001
      0084E4 F6               [ 1] 1013 	ld	a, (x)
      0084E5 A1 01            [ 1] 1014 	cp	a, #0x01
      0084E7 27 F8            [ 1] 1015 	jreq	00101$
                                   1016 ;	ds18b20.c: 420: _delay_us(400);
      0084E9 4B 90            [ 1] 1017 	push	#0x90
      0084EB 4B 01            [ 1] 1018 	push	#0x01
      0084ED CD 84 6C         [ 4] 1019 	call	__delay_us
      0084F0 5B 02            [ 2] 1020 	addw	sp, #2
      0084F2 81               [ 4] 1021 	ret
                                   1022 ;	ds18b20.c: 424: void DS18B20_WriteByte(unsigned char _data)
                                   1023 ;	-----------------------------------------
                                   1024 ;	 function DS18B20_WriteByte
                                   1025 ;	-----------------------------------------
      0084F3                       1026 _DS18B20_WriteByte:
      0084F3 88               [ 1] 1027 	push	a
                                   1028 ;	ds18b20.c: 428: DS18B20_DQ_OUT;
      0084F4 AE 50 02         [ 2] 1029 	ldw	x, #0x5002
      0084F7 F6               [ 1] 1030 	ld	a, (x)
      0084F8 AA 08            [ 1] 1031 	or	a, #0x08
      0084FA F7               [ 1] 1032 	ld	(x), a
                                   1033 ;	ds18b20.c: 429: for (i = 0; i < 8; i++)
      0084FB 0F 01            [ 1] 1034 	clr	(0x01, sp)
      0084FD                       1035 00104$:
                                   1036 ;	ds18b20.c: 431: DS18B20_DQ_LOW;
      0084FD AE 50 00         [ 2] 1037 	ldw	x, #0x5000
      008500 F6               [ 1] 1038 	ld	a, (x)
      008501 A4 F7            [ 1] 1039 	and	a, #0xf7
      008503 F7               [ 1] 1040 	ld	(x), a
                                   1041 ;	ds18b20.c: 432: _delay_us(2);
      008504 4B 02            [ 1] 1042 	push	#0x02
      008506 4B 00            [ 1] 1043 	push	#0x00
      008508 CD 84 6C         [ 4] 1044 	call	__delay_us
      00850B 5B 02            [ 2] 1045 	addw	sp, #2
                                   1046 ;	ds18b20.c: 433: if (_data & 0x01)
      00850D 7B 04            [ 1] 1047 	ld	a, (0x04, sp)
      00850F 44               [ 1] 1048 	srl	a
      008510 24 07            [ 1] 1049 	jrnc	00102$
                                   1050 ;	ds18b20.c: 435: DS18B20_DQ_HIGH;
      008512 AE 50 00         [ 2] 1051 	ldw	x, #0x5000
      008515 F6               [ 1] 1052 	ld	a, (x)
      008516 AA 08            [ 1] 1053 	or	a, #0x08
      008518 F7               [ 1] 1054 	ld	(x), a
      008519                       1055 00102$:
                                   1056 ;	ds18b20.c: 437: _data >>= 1;
      008519 7B 04            [ 1] 1057 	ld	a, (0x04, sp)
      00851B 44               [ 1] 1058 	srl	a
      00851C 6B 04            [ 1] 1059 	ld	(0x04, sp), a
                                   1060 ;	ds18b20.c: 438: _delay_us(60);
      00851E 4B 3C            [ 1] 1061 	push	#0x3c
      008520 4B 00            [ 1] 1062 	push	#0x00
      008522 CD 84 6C         [ 4] 1063 	call	__delay_us
      008525 5B 02            [ 2] 1064 	addw	sp, #2
                                   1065 ;	ds18b20.c: 439: DS18B20_DQ_HIGH;
      008527 AE 50 00         [ 2] 1066 	ldw	x, #0x5000
      00852A F6               [ 1] 1067 	ld	a, (x)
      00852B AA 08            [ 1] 1068 	or	a, #0x08
      00852D F7               [ 1] 1069 	ld	(x), a
                                   1070 ;	ds18b20.c: 429: for (i = 0; i < 8; i++)
      00852E 0C 01            [ 1] 1071 	inc	(0x01, sp)
      008530 7B 01            [ 1] 1072 	ld	a, (0x01, sp)
      008532 A1 08            [ 1] 1073 	cp	a, #0x08
      008534 25 C7            [ 1] 1074 	jrc	00104$
      008536 84               [ 1] 1075 	pop	a
      008537 81               [ 4] 1076 	ret
                                   1077 ;	ds18b20.c: 443: unsigned char DS18B20_ReadByte(void)
                                   1078 ;	-----------------------------------------
                                   1079 ;	 function DS18B20_ReadByte
                                   1080 ;	-----------------------------------------
      008538                       1081 _DS18B20_ReadByte:
      008538 52 02            [ 2] 1082 	sub	sp, #2
                                   1083 ;	ds18b20.c: 445: unsigned char i = 0, _data = 0;
      00853A 0F 01            [ 1] 1084 	clr	(0x01, sp)
                                   1085 ;	ds18b20.c: 447: for (i = 0; i < 8; i++)
      00853C 0F 02            [ 1] 1086 	clr	(0x02, sp)
      00853E                       1087 00104$:
                                   1088 ;	ds18b20.c: 449: DS18B20_DQ_OUT;
      00853E AE 50 02         [ 2] 1089 	ldw	x, #0x5002
      008541 F6               [ 1] 1090 	ld	a, (x)
      008542 AA 08            [ 1] 1091 	or	a, #0x08
      008544 F7               [ 1] 1092 	ld	(x), a
                                   1093 ;	ds18b20.c: 450: DS18B20_DQ_LOW;
      008545 AE 50 00         [ 2] 1094 	ldw	x, #0x5000
      008548 F6               [ 1] 1095 	ld	a, (x)
      008549 A4 F7            [ 1] 1096 	and	a, #0xf7
      00854B F7               [ 1] 1097 	ld	(x), a
                                   1098 ;	ds18b20.c: 451: _delay_us(5);
      00854C 4B 05            [ 1] 1099 	push	#0x05
      00854E 4B 00            [ 1] 1100 	push	#0x00
      008550 CD 84 6C         [ 4] 1101 	call	__delay_us
      008553 5B 02            [ 2] 1102 	addw	sp, #2
                                   1103 ;	ds18b20.c: 452: _data >>= 1;
      008555 04 01            [ 1] 1104 	srl	(0x01, sp)
                                   1105 ;	ds18b20.c: 453: DS18B20_DQ_HIGH;
      008557 AE 50 00         [ 2] 1106 	ldw	x, #0x5000
      00855A F6               [ 1] 1107 	ld	a, (x)
      00855B AA 08            [ 1] 1108 	or	a, #0x08
      00855D F7               [ 1] 1109 	ld	(x), a
                                   1110 ;	ds18b20.c: 454: DS18B20_DQ_IN;
      00855E AE 50 02         [ 2] 1111 	ldw	x, #0x5002
      008561 F6               [ 1] 1112 	ld	a, (x)
      008562 A4 F7            [ 1] 1113 	and	a, #0xf7
      008564 F7               [ 1] 1114 	ld	(x), a
                                   1115 ;	ds18b20.c: 455: if (DS18B20_DQ_VALUE)
      008565 AE 50 01         [ 2] 1116 	ldw	x, #0x5001
      008568 F6               [ 1] 1117 	ld	a, (x)
      008569 4D               [ 1] 1118 	tnz	a
      00856A 27 06            [ 1] 1119 	jreq	00102$
                                   1120 ;	ds18b20.c: 457: _data |= 0x80;
      00856C 7B 01            [ 1] 1121 	ld	a, (0x01, sp)
      00856E AA 80            [ 1] 1122 	or	a, #0x80
      008570 6B 01            [ 1] 1123 	ld	(0x01, sp), a
      008572                       1124 00102$:
                                   1125 ;	ds18b20.c: 459: DS18B20_DQ_OUT; 
      008572 AE 50 02         [ 2] 1126 	ldw	x, #0x5002
      008575 F6               [ 1] 1127 	ld	a, (x)
      008576 AA 08            [ 1] 1128 	or	a, #0x08
      008578 F7               [ 1] 1129 	ld	(x), a
                                   1130 ;	ds18b20.c: 460: DS18B20_DQ_HIGH;
      008579 AE 50 00         [ 2] 1131 	ldw	x, #0x5000
      00857C F6               [ 1] 1132 	ld	a, (x)
      00857D AA 08            [ 1] 1133 	or	a, #0x08
      00857F F7               [ 1] 1134 	ld	(x), a
                                   1135 ;	ds18b20.c: 461: _delay_us(60);
      008580 4B 3C            [ 1] 1136 	push	#0x3c
      008582 4B 00            [ 1] 1137 	push	#0x00
      008584 CD 84 6C         [ 4] 1138 	call	__delay_us
      008587 5B 02            [ 2] 1139 	addw	sp, #2
                                   1140 ;	ds18b20.c: 447: for (i = 0; i < 8; i++)
      008589 0C 02            [ 1] 1141 	inc	(0x02, sp)
      00858B 7B 02            [ 1] 1142 	ld	a, (0x02, sp)
      00858D A1 08            [ 1] 1143 	cp	a, #0x08
      00858F 25 AD            [ 1] 1144 	jrc	00104$
                                   1145 ;	ds18b20.c: 464: return _data;
      008591 7B 01            [ 1] 1146 	ld	a, (0x01, sp)
      008593 5B 02            [ 2] 1147 	addw	sp, #2
      008595 81               [ 4] 1148 	ret
                                   1149 ;	ds18b20.c: 467: float DS18B20_ReadTemperature(void)
                                   1150 ;	-----------------------------------------
                                   1151 ;	 function DS18B20_ReadTemperature
                                   1152 ;	-----------------------------------------
      008596                       1153 _DS18B20_ReadTemperature:
      008596 52 0A            [ 2] 1154 	sub	sp, #10
                                   1155 ;	ds18b20.c: 481: DS18B20_Init();
      008598 CD 84 9C         [ 4] 1156 	call	_DS18B20_Init
                                   1157 ;	ds18b20.c: 482: DS18B20_WriteByte(0xcc);
      00859B 4B CC            [ 1] 1158 	push	#0xcc
      00859D CD 84 F3         [ 4] 1159 	call	_DS18B20_WriteByte
      0085A0 84               [ 1] 1160 	pop	a
                                   1161 ;	ds18b20.c: 483: DS18B20_WriteByte(0x44);
      0085A1 4B 44            [ 1] 1162 	push	#0x44
      0085A3 CD 84 F3         [ 4] 1163 	call	_DS18B20_WriteByte
      0085A6 84               [ 1] 1164 	pop	a
                                   1165 ;	ds18b20.c: 485: DS18B20_Init();
      0085A7 CD 84 9C         [ 4] 1166 	call	_DS18B20_Init
                                   1167 ;	ds18b20.c: 486: DS18B20_WriteByte(0xcc);
      0085AA 4B CC            [ 1] 1168 	push	#0xcc
      0085AC CD 84 F3         [ 4] 1169 	call	_DS18B20_WriteByte
      0085AF 84               [ 1] 1170 	pop	a
                                   1171 ;	ds18b20.c: 487: DS18B20_WriteByte(0xbe);
      0085B0 4B BE            [ 1] 1172 	push	#0xbe
      0085B2 CD 84 F3         [ 4] 1173 	call	_DS18B20_WriteByte
      0085B5 84               [ 1] 1174 	pop	a
                                   1175 ;	ds18b20.c: 489: temp = DS18B20_ReadByte();
      0085B6 CD 85 38         [ 4] 1176 	call	_DS18B20_ReadByte
                                   1177 ;	ds18b20.c: 490: t = (((temp & 0xf0) >> 4) + (temp & 0x07) * 0.125); 
      0085B9 95               [ 1] 1178 	ld	xh, a
      0085BA A4 F0            [ 1] 1179 	and	a, #0xf0
      0085BC 4E               [ 1] 1180 	swap	a
      0085BD A4 0F            [ 1] 1181 	and	a, #0x0f
      0085BF 6B 0A            [ 1] 1182 	ld	(0x0a, sp), a
      0085C1 0F 09            [ 1] 1183 	clr	(0x09, sp)
      0085C3 9E               [ 1] 1184 	ld	a, xh
      0085C4 A4 07            [ 1] 1185 	and	a, #0x07
      0085C6 88               [ 1] 1186 	push	a
      0085C7 CD 8E 4C         [ 4] 1187 	call	___uchar2fs
      0085CA 84               [ 1] 1188 	pop	a
      0085CB 89               [ 2] 1189 	pushw	x
      0085CC 90 89            [ 2] 1190 	pushw	y
      0085CE 5F               [ 1] 1191 	clrw	x
      0085CF 89               [ 2] 1192 	pushw	x
      0085D0 4B 00            [ 1] 1193 	push	#0x00
      0085D2 4B 3E            [ 1] 1194 	push	#0x3e
      0085D4 CD 87 6A         [ 4] 1195 	call	___fsmul
      0085D7 5B 08            [ 2] 1196 	addw	sp, #8
      0085D9 17 05            [ 2] 1197 	ldw	(0x05, sp), y
      0085DB 89               [ 2] 1198 	pushw	x
      0085DC 16 0B            [ 2] 1199 	ldw	y, (0x0b, sp)
      0085DE 90 89            [ 2] 1200 	pushw	y
      0085E0 CD 8E 3B         [ 4] 1201 	call	___sint2fs
      0085E3 5B 02            [ 2] 1202 	addw	sp, #2
      0085E5 1F 05            [ 2] 1203 	ldw	(0x05, sp), x
      0085E7 1E 07            [ 2] 1204 	ldw	x, (0x07, sp)
      0085E9 89               [ 2] 1205 	pushw	x
      0085EA 1E 07            [ 2] 1206 	ldw	x, (0x07, sp)
      0085EC 89               [ 2] 1207 	pushw	x
      0085ED 90 89            [ 2] 1208 	pushw	y
      0085EF CD 8B 79         [ 4] 1209 	call	___fsadd
                                   1210 ;	ds18b20.c: 494: return t;
      0085F2 5B 12            [ 2] 1211 	addw	sp, #18
      0085F4 81               [ 4] 1212 	ret
                                   1213 ;	ds18b20.c: 500: int main () {
                                   1214 ;	-----------------------------------------
                                   1215 ;	 function main
                                   1216 ;	-----------------------------------------
      0085F5                       1217 _main:
      0085F5 52 16            [ 2] 1218 	sub	sp, #22
                                   1219 ;	ds18b20.c: 504: InitializeSystemClock();
      0085F7 CD 80 AB         [ 4] 1220 	call	_InitializeSystemClock
                                   1221 ;	ds18b20.c: 507: PD_DDR = (1 << 3) | (1 << 2); // output mode
      0085FA 35 0C 50 11      [ 1] 1222 	mov	0x5011+0, #0x0c
                                   1223 ;	ds18b20.c: 508: PD_CR1 = (1 << 3) | (1 << 2); // push-pull
      0085FE 35 0C 50 12      [ 1] 1224 	mov	0x5012+0, #0x0c
                                   1225 ;	ds18b20.c: 509: PD_CR2 = (1 << 3) | (1 << 2); // up to 10MHz speed
      008602 35 0C 50 13      [ 1] 1226 	mov	0x5013+0, #0x0c
                                   1227 ;	ds18b20.c: 510: tm1637Init();
      008606 CD 83 0B         [ 4] 1228 	call	_tm1637Init
                                   1229 ;	ds18b20.c: 512: InitializeUART();
      008609 CD 82 98         [ 4] 1230 	call	_InitializeUART
                                   1231 ;	ds18b20.c: 516: while (1) {
      00860C                       1232 00114$:
                                   1233 ;	ds18b20.c: 519: objTemp = DS18B20_ReadTemperature(); 
      00860C CD 85 96         [ 4] 1234 	call	_DS18B20_ReadTemperature
      00860F 1F 07            [ 2] 1235 	ldw	(0x07, sp), x
      008611 17 05            [ 2] 1236 	ldw	(0x05, sp), y
                                   1237 ;	ds18b20.c: 522: while (objTemp > 1000) {
      008613 5F               [ 1] 1238 	clrw	x
      008614 1F 03            [ 2] 1239 	ldw	(0x03, sp), x
      008616                       1240 00101$:
      008616 5F               [ 1] 1241 	clrw	x
      008617 89               [ 2] 1242 	pushw	x
      008618 4B 7A            [ 1] 1243 	push	#0x7a
      00861A 4B 44            [ 1] 1244 	push	#0x44
      00861C 1E 0B            [ 2] 1245 	ldw	x, (0x0b, sp)
      00861E 89               [ 2] 1246 	pushw	x
      00861F 1E 0B            [ 2] 1247 	ldw	x, (0x0b, sp)
      008621 89               [ 2] 1248 	pushw	x
      008622 CD 8A 6C         [ 4] 1249 	call	___fsgt
      008625 5B 08            [ 2] 1250 	addw	sp, #8
      008627 4D               [ 1] 1251 	tnz	a
      008628 27 1C            [ 1] 1252 	jreq	00127$
                                   1253 ;	ds18b20.c: 523: vierde+=1;
      00862A 1E 03            [ 2] 1254 	ldw	x, (0x03, sp)
      00862C 5C               [ 2] 1255 	incw	x
      00862D 1F 03            [ 2] 1256 	ldw	(0x03, sp), x
                                   1257 ;	ds18b20.c: 524: objTemp-=1000;
      00862F 5F               [ 1] 1258 	clrw	x
      008630 89               [ 2] 1259 	pushw	x
      008631 4B 7A            [ 1] 1260 	push	#0x7a
      008633 4B 44            [ 1] 1261 	push	#0x44
      008635 1E 0B            [ 2] 1262 	ldw	x, (0x0b, sp)
      008637 89               [ 2] 1263 	pushw	x
      008638 1E 0B            [ 2] 1264 	ldw	x, (0x0b, sp)
      00863A 89               [ 2] 1265 	pushw	x
      00863B CD 87 47         [ 4] 1266 	call	___fssub
      00863E 5B 08            [ 2] 1267 	addw	sp, #8
      008640 1F 07            [ 2] 1268 	ldw	(0x07, sp), x
      008642 17 05            [ 2] 1269 	ldw	(0x05, sp), y
      008644 20 D0            [ 2] 1270 	jra	00101$
                                   1271 ;	ds18b20.c: 526: while (objTemp > 100) {
      008646                       1272 00127$:
      008646 16 03            [ 2] 1273 	ldw	y, (0x03, sp)
      008648 17 13            [ 2] 1274 	ldw	(0x13, sp), y
      00864A 5F               [ 1] 1275 	clrw	x
      00864B 1F 09            [ 2] 1276 	ldw	(0x09, sp), x
      00864D                       1277 00104$:
      00864D 5F               [ 1] 1278 	clrw	x
      00864E 89               [ 2] 1279 	pushw	x
      00864F 4B C8            [ 1] 1280 	push	#0xc8
      008651 4B 42            [ 1] 1281 	push	#0x42
      008653 1E 0B            [ 2] 1282 	ldw	x, (0x0b, sp)
      008655 89               [ 2] 1283 	pushw	x
      008656 1E 0B            [ 2] 1284 	ldw	x, (0x0b, sp)
      008658 89               [ 2] 1285 	pushw	x
      008659 CD 8A 6C         [ 4] 1286 	call	___fsgt
      00865C 5B 08            [ 2] 1287 	addw	sp, #8
      00865E 4D               [ 1] 1288 	tnz	a
      00865F 27 1C            [ 1] 1289 	jreq	00128$
                                   1290 ;	ds18b20.c: 527: derde+=1;
      008661 1E 09            [ 2] 1291 	ldw	x, (0x09, sp)
      008663 5C               [ 2] 1292 	incw	x
      008664 1F 09            [ 2] 1293 	ldw	(0x09, sp), x
                                   1294 ;	ds18b20.c: 528: objTemp-=100;
      008666 5F               [ 1] 1295 	clrw	x
      008667 89               [ 2] 1296 	pushw	x
      008668 4B C8            [ 1] 1297 	push	#0xc8
      00866A 4B 42            [ 1] 1298 	push	#0x42
      00866C 1E 0B            [ 2] 1299 	ldw	x, (0x0b, sp)
      00866E 89               [ 2] 1300 	pushw	x
      00866F 1E 0B            [ 2] 1301 	ldw	x, (0x0b, sp)
      008671 89               [ 2] 1302 	pushw	x
      008672 CD 87 47         [ 4] 1303 	call	___fssub
      008675 5B 08            [ 2] 1304 	addw	sp, #8
      008677 1F 07            [ 2] 1305 	ldw	(0x07, sp), x
      008679 17 05            [ 2] 1306 	ldw	(0x05, sp), y
      00867B 20 D0            [ 2] 1307 	jra	00104$
                                   1308 ;	ds18b20.c: 530: while (objTemp > 10) {
      00867D                       1309 00128$:
      00867D 16 09            [ 2] 1310 	ldw	y, (0x09, sp)
      00867F 17 11            [ 2] 1311 	ldw	(0x11, sp), y
      008681 5F               [ 1] 1312 	clrw	x
      008682 1F 01            [ 2] 1313 	ldw	(0x01, sp), x
      008684                       1314 00107$:
      008684 5F               [ 1] 1315 	clrw	x
      008685 89               [ 2] 1316 	pushw	x
      008686 4B 20            [ 1] 1317 	push	#0x20
      008688 4B 41            [ 1] 1318 	push	#0x41
      00868A 1E 0B            [ 2] 1319 	ldw	x, (0x0b, sp)
      00868C 89               [ 2] 1320 	pushw	x
      00868D 1E 0B            [ 2] 1321 	ldw	x, (0x0b, sp)
      00868F 89               [ 2] 1322 	pushw	x
      008690 CD 8A 6C         [ 4] 1323 	call	___fsgt
      008693 5B 08            [ 2] 1324 	addw	sp, #8
      008695 4D               [ 1] 1325 	tnz	a
      008696 27 1C            [ 1] 1326 	jreq	00129$
                                   1327 ;	ds18b20.c: 531: tweede+=1;
      008698 1E 01            [ 2] 1328 	ldw	x, (0x01, sp)
      00869A 5C               [ 2] 1329 	incw	x
      00869B 1F 01            [ 2] 1330 	ldw	(0x01, sp), x
                                   1331 ;	ds18b20.c: 532: objTemp-=10;
      00869D 5F               [ 1] 1332 	clrw	x
      00869E 89               [ 2] 1333 	pushw	x
      00869F 4B 20            [ 1] 1334 	push	#0x20
      0086A1 4B 41            [ 1] 1335 	push	#0x41
      0086A3 1E 0B            [ 2] 1336 	ldw	x, (0x0b, sp)
      0086A5 89               [ 2] 1337 	pushw	x
      0086A6 1E 0B            [ 2] 1338 	ldw	x, (0x0b, sp)
      0086A8 89               [ 2] 1339 	pushw	x
      0086A9 CD 87 47         [ 4] 1340 	call	___fssub
      0086AC 5B 08            [ 2] 1341 	addw	sp, #8
      0086AE 1F 07            [ 2] 1342 	ldw	(0x07, sp), x
      0086B0 17 05            [ 2] 1343 	ldw	(0x05, sp), y
      0086B2 20 D0            [ 2] 1344 	jra	00107$
                                   1345 ;	ds18b20.c: 534: while (objTemp > 0)
      0086B4                       1346 00129$:
      0086B4 16 01            [ 2] 1347 	ldw	y, (0x01, sp)
      0086B6 17 0F            [ 2] 1348 	ldw	(0x0f, sp), y
      0086B8 5F               [ 1] 1349 	clrw	x
      0086B9 1F 0B            [ 2] 1350 	ldw	(0x0b, sp), x
      0086BB                       1351 00110$:
      0086BB 5F               [ 1] 1352 	clrw	x
      0086BC 89               [ 2] 1353 	pushw	x
      0086BD 5F               [ 1] 1354 	clrw	x
      0086BE 89               [ 2] 1355 	pushw	x
      0086BF 1E 0B            [ 2] 1356 	ldw	x, (0x0b, sp)
      0086C1 89               [ 2] 1357 	pushw	x
      0086C2 1E 0B            [ 2] 1358 	ldw	x, (0x0b, sp)
      0086C4 89               [ 2] 1359 	pushw	x
      0086C5 CD 8A 6C         [ 4] 1360 	call	___fsgt
      0086C8 5B 08            [ 2] 1361 	addw	sp, #8
      0086CA 4D               [ 1] 1362 	tnz	a
      0086CB 27 1C            [ 1] 1363 	jreq	00112$
                                   1364 ;	ds18b20.c: 536: eerste+=1;
      0086CD 1E 0B            [ 2] 1365 	ldw	x, (0x0b, sp)
      0086CF 5C               [ 2] 1366 	incw	x
      0086D0 1F 0B            [ 2] 1367 	ldw	(0x0b, sp), x
                                   1368 ;	ds18b20.c: 537: objTemp-=1;
      0086D2 5F               [ 1] 1369 	clrw	x
      0086D3 89               [ 2] 1370 	pushw	x
      0086D4 4B 80            [ 1] 1371 	push	#0x80
      0086D6 4B 3F            [ 1] 1372 	push	#0x3f
      0086D8 1E 0B            [ 2] 1373 	ldw	x, (0x0b, sp)
      0086DA 89               [ 2] 1374 	pushw	x
      0086DB 1E 0B            [ 2] 1375 	ldw	x, (0x0b, sp)
      0086DD 89               [ 2] 1376 	pushw	x
      0086DE CD 87 47         [ 4] 1377 	call	___fssub
      0086E1 5B 08            [ 2] 1378 	addw	sp, #8
      0086E3 1F 07            [ 2] 1379 	ldw	(0x07, sp), x
      0086E5 17 05            [ 2] 1380 	ldw	(0x05, sp), y
      0086E7 20 D2            [ 2] 1381 	jra	00110$
      0086E9                       1382 00112$:
                                   1383 ;	ds18b20.c: 540: utemp=vierde*1000+derde*100+tweede*10+eerste;
      0086E9 1E 13            [ 2] 1384 	ldw	x, (0x13, sp)
      0086EB 89               [ 2] 1385 	pushw	x
      0086EC 4B E8            [ 1] 1386 	push	#0xe8
      0086EE 4B 03            [ 1] 1387 	push	#0x03
      0086F0 CD 8B 58         [ 4] 1388 	call	__mulint
      0086F3 5B 04            [ 2] 1389 	addw	sp, #4
      0086F5 1F 0D            [ 2] 1390 	ldw	(0x0d, sp), x
      0086F7 1E 11            [ 2] 1391 	ldw	x, (0x11, sp)
      0086F9 89               [ 2] 1392 	pushw	x
      0086FA 4B 64            [ 1] 1393 	push	#0x64
      0086FC 4B 00            [ 1] 1394 	push	#0x00
      0086FE CD 8B 58         [ 4] 1395 	call	__mulint
      008701 5B 04            [ 2] 1396 	addw	sp, #4
      008703 72 FB 0D         [ 2] 1397 	addw	x, (0x0d, sp)
      008706 1F 15            [ 2] 1398 	ldw	(0x15, sp), x
      008708 1E 0F            [ 2] 1399 	ldw	x, (0x0f, sp)
      00870A 89               [ 2] 1400 	pushw	x
      00870B 4B 0A            [ 1] 1401 	push	#0x0a
      00870D 4B 00            [ 1] 1402 	push	#0x00
      00870F CD 8B 58         [ 4] 1403 	call	__mulint
      008712 5B 04            [ 2] 1404 	addw	sp, #4
      008714 72 FB 15         [ 2] 1405 	addw	x, (0x15, sp)
      008717 72 FB 0B         [ 2] 1406 	addw	x, (0x0b, sp)
      00871A 90 5F            [ 1] 1407 	clrw	y
      00871C 5D               [ 2] 1408 	tnzw	x
      00871D 2A 02            [ 1] 1409 	jrpl	00162$
      00871F 90 5A            [ 2] 1410 	decw	y
      008721                       1411 00162$:
                                   1412 ;	ds18b20.c: 543: tm1637DisplayDecimal(utemp, 1); // eg 37:12
      008721 4B 01            [ 1] 1413 	push	#0x01
      008723 4B 00            [ 1] 1414 	push	#0x00
      008725 89               [ 2] 1415 	pushw	x
      008726 90 89            [ 2] 1416 	pushw	y
      008728 CD 83 12         [ 4] 1417 	call	_tm1637DisplayDecimal
      00872B 5B 06            [ 2] 1418 	addw	sp, #6
                                   1419 ;	ds18b20.c: 546: delayTenMicro();
      00872D CD 80 A0         [ 4] 1420 	call	_delayTenMicro
      008730 CC 86 0C         [ 2] 1421 	jp	00114$
      008733 5B 16            [ 2] 1422 	addw	sp, #22
      008735 81               [ 4] 1423 	ret
                                   1424 	.area CODE
      008736                       1425 _segmentMap:
      008736 3F                    1426 	.db #0x3F	;  63
      008737 06                    1427 	.db #0x06	;  6
      008738 5B                    1428 	.db #0x5B	;  91
      008739 4F                    1429 	.db #0x4F	;  79	'O'
      00873A 66                    1430 	.db #0x66	;  102	'f'
      00873B 6D                    1431 	.db #0x6D	;  109	'm'
      00873C 7D                    1432 	.db #0x7D	;  125
      00873D 07                    1433 	.db #0x07	;  7
      00873E 7F                    1434 	.db #0x7F	;  127
      00873F 6F                    1435 	.db #0x6F	;  111	'o'
      008740 77                    1436 	.db #0x77	;  119	'w'
      008741 7C                    1437 	.db #0x7C	;  124
      008742 39                    1438 	.db #0x39	;  57	'9'
      008743 5E                    1439 	.db #0x5E	;  94
      008744 79                    1440 	.db #0x79	;  121	'y'
      008745 71                    1441 	.db #0x71	;  113	'q'
      008746 00                    1442 	.db #0x00	;  0
                                   1443 	.area INITIALIZER
                                   1444 	.area CABS (ABS)
