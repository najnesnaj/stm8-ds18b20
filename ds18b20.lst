                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul 11 2014) (Linux)
                                      4 ; This file was generated Wed Jul 19 13:15:51 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module ds18b20
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _segmentMap
                                     13 	.globl _main
                                     14 	.globl _tm1637DisplayDecimal
                                     15 	.globl _tm1637Init
                                     16 	.globl _InitializeUART
                                     17 	.globl _InitializeI2C
                                     18 	.globl _i2c_read_register
                                     19 	.globl _print_byte_hex
                                     20 	.globl _i2c_set_start_ack
                                     21 	.globl _i2c_send_address
                                     22 	.globl _UARTPrintF
                                     23 	.globl _i2c_send_reg
                                     24 	.globl _i2c_set_stop
                                     25 	.globl _i2c_set_nak
                                     26 	.globl _i2c_read
                                     27 	.globl _delay
                                     28 	.globl _InitializeSystemClock
                                     29 	.globl _delayTenMicro
                                     30 	.globl _tm1637SetBrightness
                                     31 	.globl __tm1637Start
                                     32 	.globl __tm1637Stop
                                     33 	.globl __tm1637ReadResult
                                     34 	.globl __tm1637WriteByte
                                     35 	.globl __tm1637ClkHigh
                                     36 	.globl __tm1637ClkLow
                                     37 	.globl __tm1637DioHigh
                                     38 	.globl __tm1637DioLow
                                     39 ;--------------------------------------------------------
                                     40 ; ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area DATA
                                     43 ;--------------------------------------------------------
                                     44 ; ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area INITIALIZED
                                     47 ;--------------------------------------------------------
                                     48 ; Stack segment in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 	.area	SSEG
      000000                         51 __start__stack:
      000000                         52 	.ds	1
                                     53 
                                     54 ;--------------------------------------------------------
                                     55 ; absolute external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area DABS (ABS)
                                     58 ;--------------------------------------------------------
                                     59 ; interrupt vector 
                                     60 ;--------------------------------------------------------
                                     61 	.area HOME
      000000                         62 __interrupt_vect:
      000000 82v00u00u00             63 	int s_GSINIT ;reset
      000004 82 00 00 00             64 	int 0x0000 ;trap
      000008 82 00 00 00             65 	int 0x0000 ;int0
      00000C 82 00 00 00             66 	int 0x0000 ;int1
      000010 82 00 00 00             67 	int 0x0000 ;int2
      000014 82 00 00 00             68 	int 0x0000 ;int3
      000018 82 00 00 00             69 	int 0x0000 ;int4
      00001C 82 00 00 00             70 	int 0x0000 ;int5
      000020 82 00 00 00             71 	int 0x0000 ;int6
      000024 82 00 00 00             72 	int 0x0000 ;int7
      000028 82 00 00 00             73 	int 0x0000 ;int8
      00002C 82 00 00 00             74 	int 0x0000 ;int9
      000030 82 00 00 00             75 	int 0x0000 ;int10
      000034 82 00 00 00             76 	int 0x0000 ;int11
      000038 82 00 00 00             77 	int 0x0000 ;int12
      00003C 82 00 00 00             78 	int 0x0000 ;int13
      000040 82 00 00 00             79 	int 0x0000 ;int14
      000044 82 00 00 00             80 	int 0x0000 ;int15
      000048 82 00 00 00             81 	int 0x0000 ;int16
      00004C 82 00 00 00             82 	int 0x0000 ;int17
      000050 82 00 00 00             83 	int 0x0000 ;int18
      000054 82 00 00 00             84 	int 0x0000 ;int19
      000058 82 00 00 00             85 	int 0x0000 ;int20
      00005C 82 00 00 00             86 	int 0x0000 ;int21
      000060 82 00 00 00             87 	int 0x0000 ;int22
      000064 82 00 00 00             88 	int 0x0000 ;int23
      000068 82 00 00 00             89 	int 0x0000 ;int24
      00006C 82 00 00 00             90 	int 0x0000 ;int25
      000070 82 00 00 00             91 	int 0x0000 ;int26
      000074 82 00 00 00             92 	int 0x0000 ;int27
      000078 82 00 00 00             93 	int 0x0000 ;int28
      00007C 82 00 00 00             94 	int 0x0000 ;int29
                                     95 ;--------------------------------------------------------
                                     96 ; global & static initialisations
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME
                                     99 	.area GSINIT
                                    100 	.area GSFINAL
                                    101 	.area GSINIT
      000000                        102 __sdcc_gs_init_startup:
      000000                        103 __sdcc_init_data:
                                    104 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  105 	ldw x, #l_DATA
      000003 27 07            [ 1]  106 	jreq	00002$
      000005                        107 00001$:
      000005 72 4FuFFuFF      [ 1]  108 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  109 	decw x
      00000A 26 F9            [ 1]  110 	jrne	00001$
      00000C                        111 00002$:
      00000C AEr00r00         [ 2]  112 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  113 	jreq	00004$
      000011                        114 00003$:
      000011 D6uFFuFF         [ 1]  115 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  116 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  117 	decw	x
      000018 26 F7            [ 1]  118 	jrne	00003$
      00001A                        119 00004$:
                                    120 ; stm8_genXINIT() end
                                    121 	.area GSFINAL
      000000 CCr00r80         [ 2]  122 	jp	__sdcc_program_startup
                                    123 ;--------------------------------------------------------
                                    124 ; Home
                                    125 ;--------------------------------------------------------
                                    126 	.area HOME
                                    127 	.area HOME
      000080                        128 __sdcc_program_startup:
      000080 CCr03rEA         [ 2]  129 	jp	_main
                                    130 ;	return from main will return to caller
                                    131 ;--------------------------------------------------------
                                    132 ; code
                                    133 ;--------------------------------------------------------
                                    134 	.area CODE
                                    135 ;	ds18b20.c: 15: void delayTenMicro (void) {
                                    136 ;	-----------------------------------------
                                    137 ;	 function delayTenMicro
                                    138 ;	-----------------------------------------
      000000                        139 _delayTenMicro:
                                    140 ;	ds18b20.c: 17: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  141 	ld	a, #0x32
      000002                        142 00104$:
                                    143 ;	ds18b20.c: 18: __asm__("nop");
      000002 9D               [ 1]  144 	nop
      000003 4A               [ 1]  145 	dec	a
                                    146 ;	ds18b20.c: 17: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  147 	tnz	a
      000005 26 FB            [ 1]  148 	jrne	00104$
      000007 81               [ 4]  149 	ret
                                    150 ;	ds18b20.c: 21: void InitializeSystemClock() {
                                    151 ;	-----------------------------------------
                                    152 ;	 function InitializeSystemClock
                                    153 ;	-----------------------------------------
      000008                        154 _InitializeSystemClock:
                                    155 ;	ds18b20.c: 22: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000008 AE 50 C0         [ 2]  156 	ldw	x, #0x50c0
      00000B 7F               [ 1]  157 	clr	(x)
                                    158 ;	ds18b20.c: 23: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      00000C AE 50 C0         [ 2]  159 	ldw	x, #0x50c0
      00000F A6 01            [ 1]  160 	ld	a, #0x01
      000011 F7               [ 1]  161 	ld	(x), a
                                    162 ;	ds18b20.c: 24: CLK_ECKR = 0;                       //  Disable the external clock.
      000012 AE 50 C1         [ 2]  163 	ldw	x, #0x50c1
      000015 7F               [ 1]  164 	clr	(x)
                                    165 ;	ds18b20.c: 25: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000016                        166 00101$:
      000016 AE 50 C0         [ 2]  167 	ldw	x, #0x50c0
      000019 F6               [ 1]  168 	ld	a, (x)
      00001A A5 02            [ 1]  169 	bcp	a, #0x02
      00001C 27 F8            [ 1]  170 	jreq	00101$
                                    171 ;	ds18b20.c: 26: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00001E AE 50 C6         [ 2]  172 	ldw	x, #0x50c6
      000021 7F               [ 1]  173 	clr	(x)
                                    174 ;	ds18b20.c: 27: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      000022 AE 50 C7         [ 2]  175 	ldw	x, #0x50c7
      000025 A6 FF            [ 1]  176 	ld	a, #0xff
      000027 F7               [ 1]  177 	ld	(x), a
                                    178 ;	ds18b20.c: 28: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000028 AE 50 CA         [ 2]  179 	ldw	x, #0x50ca
      00002B A6 FF            [ 1]  180 	ld	a, #0xff
      00002D F7               [ 1]  181 	ld	(x), a
                                    182 ;	ds18b20.c: 29: CLK_CCOR = 0;                       //  Turn off CCO.
      00002E AE 50 C9         [ 2]  183 	ldw	x, #0x50c9
      000031 7F               [ 1]  184 	clr	(x)
                                    185 ;	ds18b20.c: 30: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      000032 AE 50 CC         [ 2]  186 	ldw	x, #0x50cc
      000035 7F               [ 1]  187 	clr	(x)
                                    188 ;	ds18b20.c: 31: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000036 AE 50 CD         [ 2]  189 	ldw	x, #0x50cd
      000039 7F               [ 1]  190 	clr	(x)
                                    191 ;	ds18b20.c: 32: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      00003A AE 50 C4         [ 2]  192 	ldw	x, #0x50c4
      00003D A6 E1            [ 1]  193 	ld	a, #0xe1
      00003F F7               [ 1]  194 	ld	(x), a
                                    195 ;	ds18b20.c: 33: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      000040 AE 50 C5         [ 2]  196 	ldw	x, #0x50c5
      000043 7F               [ 1]  197 	clr	(x)
                                    198 ;	ds18b20.c: 34: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000044 AE 50 C5         [ 2]  199 	ldw	x, #0x50c5
      000047 A6 02            [ 1]  200 	ld	a, #0x02
      000049 F7               [ 1]  201 	ld	(x), a
                                    202 ;	ds18b20.c: 35: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      00004A                        203 00104$:
      00004A AE 50 C5         [ 2]  204 	ldw	x, #0x50c5
      00004D F6               [ 1]  205 	ld	a, (x)
      00004E 44               [ 1]  206 	srl	a
      00004F 25 F9            [ 1]  207 	jrc	00104$
      000051 81               [ 4]  208 	ret
                                    209 ;	ds18b20.c: 37: void delay (int time_ms) {
                                    210 ;	-----------------------------------------
                                    211 ;	 function delay
                                    212 ;	-----------------------------------------
      000052                        213 _delay:
      000052 52 0A            [ 2]  214 	sub	sp, #10
                                    215 ;	ds18b20.c: 39: for (x = 0; x < 1036*time_ms; ++x)
      000054 5F               [ 1]  216 	clrw	x
      000055 1F 03            [ 2]  217 	ldw	(0x03, sp), x
      000057 1F 01            [ 2]  218 	ldw	(0x01, sp), x
      000059 1E 0D            [ 2]  219 	ldw	x, (0x0d, sp)
      00005B 89               [ 2]  220 	pushw	x
      00005C 4B 0C            [ 1]  221 	push	#0x0c
      00005E 4B 04            [ 1]  222 	push	#0x04
      000060 CDr00r00         [ 4]  223 	call	__mulint
      000063 5B 04            [ 2]  224 	addw	sp, #4
      000065 1F 09            [ 2]  225 	ldw	(0x09, sp), x
      000067                        226 00103$:
      000067 16 09            [ 2]  227 	ldw	y, (0x09, sp)
      000069 17 07            [ 2]  228 	ldw	(0x07, sp), y
      00006B 7B 07            [ 1]  229 	ld	a, (0x07, sp)
      00006D 49               [ 1]  230 	rlc	a
      00006E 4F               [ 1]  231 	clr	a
      00006F A2 00            [ 1]  232 	sbc	a, #0x00
      000071 6B 06            [ 1]  233 	ld	(0x06, sp), a
      000073 6B 05            [ 1]  234 	ld	(0x05, sp), a
      000075 1E 03            [ 2]  235 	ldw	x, (0x03, sp)
      000077 13 07            [ 2]  236 	cpw	x, (0x07, sp)
      000079 7B 02            [ 1]  237 	ld	a, (0x02, sp)
      00007B 12 06            [ 1]  238 	sbc	a, (0x06, sp)
      00007D 7B 01            [ 1]  239 	ld	a, (0x01, sp)
      00007F 12 05            [ 1]  240 	sbc	a, (0x05, sp)
      000081 2E 17            [ 1]  241 	jrsge	00105$
                                    242 ;	ds18b20.c: 40: __asm__("nop");
      000083 9D               [ 1]  243 	nop
                                    244 ;	ds18b20.c: 39: for (x = 0; x < 1036*time_ms; ++x)
      000084 16 03            [ 2]  245 	ldw	y, (0x03, sp)
      000086 72 A9 00 01      [ 2]  246 	addw	y, #0x0001
      00008A 7B 02            [ 1]  247 	ld	a, (0x02, sp)
      00008C A9 00            [ 1]  248 	adc	a, #0x00
      00008E 97               [ 1]  249 	ld	xl, a
      00008F 7B 01            [ 1]  250 	ld	a, (0x01, sp)
      000091 A9 00            [ 1]  251 	adc	a, #0x00
      000093 95               [ 1]  252 	ld	xh, a
      000094 17 03            [ 2]  253 	ldw	(0x03, sp), y
      000096 1F 01            [ 2]  254 	ldw	(0x01, sp), x
      000098 20 CD            [ 2]  255 	jra	00103$
      00009A                        256 00105$:
      00009A 5B 0A            [ 2]  257 	addw	sp, #10
      00009C 81               [ 4]  258 	ret
                                    259 ;	ds18b20.c: 42: void i2c_read (unsigned char *x) {
                                    260 ;	-----------------------------------------
                                    261 ;	 function i2c_read
                                    262 ;	-----------------------------------------
      00009D                        263 _i2c_read:
                                    264 ;	ds18b20.c: 43: while ((I2C_SR1 & I2C_RXNE) == 0);
      00009D                        265 00101$:
      00009D AE 52 17         [ 2]  266 	ldw	x, #0x5217
      0000A0 F6               [ 1]  267 	ld	a, (x)
      0000A1 A5 40            [ 1]  268 	bcp	a, #0x40
      0000A3 27 F8            [ 1]  269 	jreq	00101$
                                    270 ;	ds18b20.c: 44: *x = I2C_DR;
      0000A5 16 03            [ 2]  271 	ldw	y, (0x03, sp)
      0000A7 AE 52 16         [ 2]  272 	ldw	x, #0x5216
      0000AA F6               [ 1]  273 	ld	a, (x)
      0000AB 90 F7            [ 1]  274 	ld	(y), a
      0000AD 81               [ 4]  275 	ret
                                    276 ;	ds18b20.c: 46: void i2c_set_nak (void) {
                                    277 ;	-----------------------------------------
                                    278 ;	 function i2c_set_nak
                                    279 ;	-----------------------------------------
      0000AE                        280 _i2c_set_nak:
                                    281 ;	ds18b20.c: 47: I2C_CR2 &= ~I2C_ACK;
      0000AE AE 52 11         [ 2]  282 	ldw	x, #0x5211
      0000B1 F6               [ 1]  283 	ld	a, (x)
      0000B2 A4 FB            [ 1]  284 	and	a, #0xfb
      0000B4 F7               [ 1]  285 	ld	(x), a
      0000B5 81               [ 4]  286 	ret
                                    287 ;	ds18b20.c: 49: void i2c_set_stop (void) {
                                    288 ;	-----------------------------------------
                                    289 ;	 function i2c_set_stop
                                    290 ;	-----------------------------------------
      0000B6                        291 _i2c_set_stop:
                                    292 ;	ds18b20.c: 50: I2C_CR2 |= I2C_STOP;
      0000B6 AE 52 11         [ 2]  293 	ldw	x, #0x5211
      0000B9 F6               [ 1]  294 	ld	a, (x)
      0000BA AA 02            [ 1]  295 	or	a, #0x02
      0000BC F7               [ 1]  296 	ld	(x), a
      0000BD 81               [ 4]  297 	ret
                                    298 ;	ds18b20.c: 52: void i2c_send_reg (UCHAR addr) {
                                    299 ;	-----------------------------------------
                                    300 ;	 function i2c_send_reg
                                    301 ;	-----------------------------------------
      0000BE                        302 _i2c_send_reg:
      0000BE 52 02            [ 2]  303 	sub	sp, #2
                                    304 ;	ds18b20.c: 54: reg = I2C_SR1;
      0000C0 AE 52 17         [ 2]  305 	ldw	x, #0x5217
      0000C3 F6               [ 1]  306 	ld	a, (x)
      0000C4 5F               [ 1]  307 	clrw	x
      0000C5 97               [ 1]  308 	ld	xl, a
      0000C6 1F 01            [ 2]  309 	ldw	(0x01, sp), x
                                    310 ;	ds18b20.c: 55: reg = I2C_SR3;
      0000C8 AE 52 19         [ 2]  311 	ldw	x, #0x5219
      0000CB F6               [ 1]  312 	ld	a, (x)
      0000CC 5F               [ 1]  313 	clrw	x
      0000CD 97               [ 1]  314 	ld	xl, a
      0000CE 1F 01            [ 2]  315 	ldw	(0x01, sp), x
                                    316 ;	ds18b20.c: 56: I2C_DR = addr;
      0000D0 AE 52 16         [ 2]  317 	ldw	x, #0x5216
      0000D3 7B 05            [ 1]  318 	ld	a, (0x05, sp)
      0000D5 F7               [ 1]  319 	ld	(x), a
                                    320 ;	ds18b20.c: 57: while ((I2C_SR1 & I2C_TXE) == 0);
      0000D6                        321 00101$:
      0000D6 AE 52 17         [ 2]  322 	ldw	x, #0x5217
      0000D9 F6               [ 1]  323 	ld	a, (x)
      0000DA 48               [ 1]  324 	sll	a
      0000DB 24 F9            [ 1]  325 	jrnc	00101$
      0000DD 5B 02            [ 2]  326 	addw	sp, #2
      0000DF 81               [ 4]  327 	ret
                                    328 ;	ds18b20.c: 61: void UARTPrintF (char *message) {
                                    329 ;	-----------------------------------------
                                    330 ;	 function UARTPrintF
                                    331 ;	-----------------------------------------
      0000E0                        332 _UARTPrintF:
                                    333 ;	ds18b20.c: 62: char *ch = message;
      0000E0 16 03            [ 2]  334 	ldw	y, (0x03, sp)
                                    335 ;	ds18b20.c: 63: while (*ch) {
      0000E2                        336 00104$:
      0000E2 90 F6            [ 1]  337 	ld	a, (y)
      0000E4 4D               [ 1]  338 	tnz	a
      0000E5 27 0F            [ 1]  339 	jreq	00107$
                                    340 ;	ds18b20.c: 64: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0000E7 AE 52 31         [ 2]  341 	ldw	x, #0x5231
      0000EA F7               [ 1]  342 	ld	(x), a
                                    343 ;	ds18b20.c: 65: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0000EB                        344 00101$:
      0000EB AE 52 30         [ 2]  345 	ldw	x, #0x5230
      0000EE F6               [ 1]  346 	ld	a, (x)
      0000EF 48               [ 1]  347 	sll	a
      0000F0 24 F9            [ 1]  348 	jrnc	00101$
                                    349 ;	ds18b20.c: 66: ch++;                               //  Grab the next character.
      0000F2 90 5C            [ 2]  350 	incw	y
      0000F4 20 EC            [ 2]  351 	jra	00104$
      0000F6                        352 00107$:
      0000F6 81               [ 4]  353 	ret
                                    354 ;	ds18b20.c: 72: void i2c_send_address (UCHAR addr, UCHAR mode) {
                                    355 ;	-----------------------------------------
                                    356 ;	 function i2c_send_address
                                    357 ;	-----------------------------------------
      0000F7                        358 _i2c_send_address:
      0000F7 52 03            [ 2]  359 	sub	sp, #3
                                    360 ;	ds18b20.c: 74: reg = I2C_SR1;
      0000F9 AE 52 17         [ 2]  361 	ldw	x, #0x5217
      0000FC F6               [ 1]  362 	ld	a, (x)
      0000FD 5F               [ 1]  363 	clrw	x
      0000FE 97               [ 1]  364 	ld	xl, a
      0000FF 1F 01            [ 2]  365 	ldw	(0x01, sp), x
                                    366 ;	ds18b20.c: 75: I2C_DR = (addr << 1) | mode;
      000101 7B 06            [ 1]  367 	ld	a, (0x06, sp)
      000103 48               [ 1]  368 	sll	a
      000104 1A 07            [ 1]  369 	or	a, (0x07, sp)
      000106 AE 52 16         [ 2]  370 	ldw	x, #0x5216
      000109 F7               [ 1]  371 	ld	(x), a
                                    372 ;	ds18b20.c: 76: if (mode == I2C_READ) {
      00010A 7B 07            [ 1]  373 	ld	a, (0x07, sp)
      00010C A1 01            [ 1]  374 	cp	a, #0x01
      00010E 26 06            [ 1]  375 	jrne	00127$
      000110 A6 01            [ 1]  376 	ld	a, #0x01
      000112 6B 03            [ 1]  377 	ld	(0x03, sp), a
      000114 20 02            [ 2]  378 	jra	00128$
      000116                        379 00127$:
      000116 0F 03            [ 1]  380 	clr	(0x03, sp)
      000118                        381 00128$:
      000118 0D 03            [ 1]  382 	tnz	(0x03, sp)
      00011A 27 08            [ 1]  383 	jreq	00103$
                                    384 ;	ds18b20.c: 77: I2C_OARL = 0;
      00011C AE 52 13         [ 2]  385 	ldw	x, #0x5213
      00011F 7F               [ 1]  386 	clr	(x)
                                    387 ;	ds18b20.c: 78: I2C_OARH = 0;
      000120 AE 52 14         [ 2]  388 	ldw	x, #0x5214
      000123 7F               [ 1]  389 	clr	(x)
                                    390 ;	ds18b20.c: 81: while ((I2C_SR1 & I2C_ADDR) == 0);
      000124                        391 00103$:
                                    392 ;	ds18b20.c: 74: reg = I2C_SR1;
      000124 AE 52 17         [ 2]  393 	ldw	x, #0x5217
      000127 F6               [ 1]  394 	ld	a, (x)
                                    395 ;	ds18b20.c: 81: while ((I2C_SR1 & I2C_ADDR) == 0);
      000128 A5 02            [ 1]  396 	bcp	a, #0x02
      00012A 27 F8            [ 1]  397 	jreq	00103$
                                    398 ;	ds18b20.c: 82: if (mode == I2C_READ)
      00012C 0D 03            [ 1]  399 	tnz	(0x03, sp)
      00012E 27 06            [ 1]  400 	jreq	00108$
                                    401 ;	ds18b20.c: 83: UNSET (I2C_SR1, I2C_ADDR);
      000130 A4 FD            [ 1]  402 	and	a, #0xfd
      000132 AE 52 17         [ 2]  403 	ldw	x, #0x5217
      000135 F7               [ 1]  404 	ld	(x), a
      000136                        405 00108$:
      000136 5B 03            [ 2]  406 	addw	sp, #3
      000138 81               [ 4]  407 	ret
                                    408 ;	ds18b20.c: 86: void i2c_set_start_ack (void) {
                                    409 ;	-----------------------------------------
                                    410 ;	 function i2c_set_start_ack
                                    411 ;	-----------------------------------------
      000139                        412 _i2c_set_start_ack:
                                    413 ;	ds18b20.c: 87: I2C_CR2 = I2C_ACK | I2C_START;
      000139 AE 52 11         [ 2]  414 	ldw	x, #0x5211
      00013C A6 05            [ 1]  415 	ld	a, #0x05
      00013E F7               [ 1]  416 	ld	(x), a
                                    417 ;	ds18b20.c: 88: while ((I2C_SR1 & I2C_SB) == 0);
      00013F                        418 00101$:
      00013F AE 52 17         [ 2]  419 	ldw	x, #0x5217
      000142 F6               [ 1]  420 	ld	a, (x)
      000143 44               [ 1]  421 	srl	a
      000144 24 F9            [ 1]  422 	jrnc	00101$
      000146 81               [ 4]  423 	ret
                                    424 ;	ds18b20.c: 95: void print_byte_hex (unsigned char buffer) {
                                    425 ;	-----------------------------------------
                                    426 ;	 function print_byte_hex
                                    427 ;	-----------------------------------------
      000147                        428 _print_byte_hex:
      000147 52 0C            [ 2]  429 	sub	sp, #12
                                    430 ;	ds18b20.c: 98: a = (buffer >> 4);
      000149 7B 0F            [ 1]  431 	ld	a, (0x0f, sp)
      00014B 4E               [ 1]  432 	swap	a
      00014C A4 0F            [ 1]  433 	and	a, #0x0f
      00014E 5F               [ 1]  434 	clrw	x
      00014F 97               [ 1]  435 	ld	xl, a
                                    436 ;	ds18b20.c: 99: if (a > 9)
      000150 A3 00 09         [ 2]  437 	cpw	x, #0x0009
      000153 2D 07            [ 1]  438 	jrsle	00102$
                                    439 ;	ds18b20.c: 100: a = a + 'a' - 10;
      000155 1C 00 57         [ 2]  440 	addw	x, #0x0057
      000158 1F 03            [ 2]  441 	ldw	(0x03, sp), x
      00015A 20 05            [ 2]  442 	jra	00103$
      00015C                        443 00102$:
                                    444 ;	ds18b20.c: 102: a += '0'; 
      00015C 1C 00 30         [ 2]  445 	addw	x, #0x0030
      00015F 1F 03            [ 2]  446 	ldw	(0x03, sp), x
      000161                        447 00103$:
                                    448 ;	ds18b20.c: 103: b = buffer & 0x0f;
      000161 7B 0F            [ 1]  449 	ld	a, (0x0f, sp)
      000163 A4 0F            [ 1]  450 	and	a, #0x0f
      000165 5F               [ 1]  451 	clrw	x
      000166 97               [ 1]  452 	ld	xl, a
                                    453 ;	ds18b20.c: 104: if (b > 9)
      000167 A3 00 09         [ 2]  454 	cpw	x, #0x0009
      00016A 2D 07            [ 1]  455 	jrsle	00105$
                                    456 ;	ds18b20.c: 105: b = b + 'a' - 10;
      00016C 1C 00 57         [ 2]  457 	addw	x, #0x0057
      00016F 1F 01            [ 2]  458 	ldw	(0x01, sp), x
      000171 20 05            [ 2]  459 	jra	00106$
      000173                        460 00105$:
                                    461 ;	ds18b20.c: 107: b += '0'; 
      000173 1C 00 30         [ 2]  462 	addw	x, #0x0030
      000176 1F 01            [ 2]  463 	ldw	(0x01, sp), x
      000178                        464 00106$:
                                    465 ;	ds18b20.c: 108: message[0] = a;
      000178 90 96            [ 1]  466 	ldw	y, sp
      00017A 72 A9 00 05      [ 2]  467 	addw	y, #5
      00017E 7B 04            [ 1]  468 	ld	a, (0x04, sp)
      000180 90 F7            [ 1]  469 	ld	(y), a
                                    470 ;	ds18b20.c: 109: message[1] = b;
      000182 93               [ 1]  471 	ldw	x, y
      000183 5C               [ 2]  472 	incw	x
      000184 7B 02            [ 1]  473 	ld	a, (0x02, sp)
      000186 F7               [ 1]  474 	ld	(x), a
                                    475 ;	ds18b20.c: 110: message[2] = 0;
      000187 93               [ 1]  476 	ldw	x, y
      000188 5C               [ 2]  477 	incw	x
      000189 5C               [ 2]  478 	incw	x
      00018A 7F               [ 1]  479 	clr	(x)
                                    480 ;	ds18b20.c: 111: UARTPrintF (message);
      00018B 90 89            [ 2]  481 	pushw	y
      00018D CDr00rE0         [ 4]  482 	call	_UARTPrintF
      000190 5B 02            [ 2]  483 	addw	sp, #2
      000192 5B 0C            [ 2]  484 	addw	sp, #12
      000194 81               [ 4]  485 	ret
                                    486 ;	ds18b20.c: 115: unsigned char i2c_read_register (UCHAR addr, UCHAR rg) {
                                    487 ;	-----------------------------------------
                                    488 ;	 function i2c_read_register
                                    489 ;	-----------------------------------------
      000195                        490 _i2c_read_register:
      000195 52 02            [ 2]  491 	sub	sp, #2
                                    492 ;	ds18b20.c: 118: i2c_set_start_ack ();
      000197 CDr01r39         [ 4]  493 	call	_i2c_set_start_ack
                                    494 ;	ds18b20.c: 119: i2c_send_address (addr, I2C_WRITE);
      00019A 4B 00            [ 1]  495 	push	#0x00
      00019C 7B 06            [ 1]  496 	ld	a, (0x06, sp)
      00019E 88               [ 1]  497 	push	a
      00019F CDr00rF7         [ 4]  498 	call	_i2c_send_address
      0001A2 5B 02            [ 2]  499 	addw	sp, #2
                                    500 ;	ds18b20.c: 120: i2c_send_reg (rg);
      0001A4 7B 06            [ 1]  501 	ld	a, (0x06, sp)
      0001A6 88               [ 1]  502 	push	a
      0001A7 CDr00rBE         [ 4]  503 	call	_i2c_send_reg
      0001AA 84               [ 1]  504 	pop	a
                                    505 ;	ds18b20.c: 121: i2c_set_start_ack ();
      0001AB CDr01r39         [ 4]  506 	call	_i2c_set_start_ack
                                    507 ;	ds18b20.c: 122: i2c_send_address (addr, I2C_READ);
      0001AE 4B 01            [ 1]  508 	push	#0x01
      0001B0 7B 06            [ 1]  509 	ld	a, (0x06, sp)
      0001B2 88               [ 1]  510 	push	a
      0001B3 CDr00rF7         [ 4]  511 	call	_i2c_send_address
      0001B6 5B 02            [ 2]  512 	addw	sp, #2
                                    513 ;	ds18b20.c: 123: reg = I2C_SR1;
      0001B8 AE 52 17         [ 2]  514 	ldw	x, #0x5217
      0001BB F6               [ 1]  515 	ld	a, (x)
      0001BC 6B 01            [ 1]  516 	ld	(0x01, sp), a
                                    517 ;	ds18b20.c: 124: reg = I2C_SR3;
      0001BE AE 52 19         [ 2]  518 	ldw	x, #0x5219
      0001C1 F6               [ 1]  519 	ld	a, (x)
      0001C2 6B 01            [ 1]  520 	ld	(0x01, sp), a
                                    521 ;	ds18b20.c: 125: i2c_set_nak ();
      0001C4 CDr00rAE         [ 4]  522 	call	_i2c_set_nak
                                    523 ;	ds18b20.c: 126: i2c_set_stop ();
      0001C7 CDr00rB6         [ 4]  524 	call	_i2c_set_stop
                                    525 ;	ds18b20.c: 127: i2c_read (&x);
      0001CA 96               [ 1]  526 	ldw	x, sp
      0001CB 5C               [ 2]  527 	incw	x
      0001CC 5C               [ 2]  528 	incw	x
      0001CD 89               [ 2]  529 	pushw	x
      0001CE CDr00r9D         [ 4]  530 	call	_i2c_read
      0001D1 5B 02            [ 2]  531 	addw	sp, #2
                                    532 ;	ds18b20.c: 128: return (x);
      0001D3 7B 02            [ 1]  533 	ld	a, (0x02, sp)
      0001D5 5B 02            [ 2]  534 	addw	sp, #2
      0001D7 81               [ 4]  535 	ret
                                    536 ;	ds18b20.c: 131: void InitializeI2C (void) {
                                    537 ;	-----------------------------------------
                                    538 ;	 function InitializeI2C
                                    539 ;	-----------------------------------------
      0001D8                        540 _InitializeI2C:
                                    541 ;	ds18b20.c: 132: I2C_CR1 = 0;   //  Disable I2C before configuration starts. PE bit is bit 0
      0001D8 AE 52 10         [ 2]  542 	ldw	x, #0x5210
      0001DB 7F               [ 1]  543 	clr	(x)
                                    544 ;	ds18b20.c: 136: I2C_FREQR = 16;                     //  Set the internal clock frequency (MHz).
      0001DC AE 52 12         [ 2]  545 	ldw	x, #0x5212
      0001DF A6 10            [ 1]  546 	ld	a, #0x10
      0001E1 F7               [ 1]  547 	ld	(x), a
                                    548 ;	ds18b20.c: 137: UNSET (I2C_CCRH, I2C_FS);           //  I2C running is standard mode.
      0001E2 72 17 52 1C      [ 1]  549 	bres	0x521c, #7
                                    550 ;	ds18b20.c: 139: I2C_CCRL = 0xa0;                    //  SCL clock speed is 50 kHz.
      0001E6 AE 52 1B         [ 2]  551 	ldw	x, #0x521b
      0001E9 A6 A0            [ 1]  552 	ld	a, #0xa0
      0001EB F7               [ 1]  553 	ld	(x), a
                                    554 ;	ds18b20.c: 141: I2C_CCRH &= 0x00;	// Clears lower 4 bits "CCR"
      0001EC AE 52 1C         [ 2]  555 	ldw	x, #0x521c
      0001EF 7F               [ 1]  556 	clr	(x)
                                    557 ;	ds18b20.c: 145: UNSET (I2C_OARH, I2C_ADDMODE);      //  7 bit address mode.
      0001F0 72 17 52 14      [ 1]  558 	bres	0x5214, #7
                                    559 ;	ds18b20.c: 146: SET (I2C_OARH, I2C_ADDCONF);        //  Docs say this must always be 1.
      0001F4 AE 52 14         [ 2]  560 	ldw	x, #0x5214
      0001F7 F6               [ 1]  561 	ld	a, (x)
      0001F8 AA 40            [ 1]  562 	or	a, #0x40
      0001FA F7               [ 1]  563 	ld	(x), a
                                    564 ;	ds18b20.c: 150: I2C_TRISER = 17;
      0001FB AE 52 1D         [ 2]  565 	ldw	x, #0x521d
      0001FE A6 11            [ 1]  566 	ld	a, #0x11
      000200 F7               [ 1]  567 	ld	(x), a
                                    568 ;	ds18b20.c: 158: I2C_CR1 = I2C_PE;	// Enables port
      000201 AE 52 10         [ 2]  569 	ldw	x, #0x5210
      000204 A6 01            [ 1]  570 	ld	a, #0x01
      000206 F7               [ 1]  571 	ld	(x), a
      000207 81               [ 4]  572 	ret
                                    573 ;	ds18b20.c: 164: void InitializeUART() {
                                    574 ;	-----------------------------------------
                                    575 ;	 function InitializeUART
                                    576 ;	-----------------------------------------
      000208                        577 _InitializeUART:
                                    578 ;	ds18b20.c: 174: UART1_CR1 = 0;
      000208 AE 52 34         [ 2]  579 	ldw	x, #0x5234
      00020B 7F               [ 1]  580 	clr	(x)
                                    581 ;	ds18b20.c: 175: UART1_CR2 = 0;
      00020C AE 52 35         [ 2]  582 	ldw	x, #0x5235
      00020F 7F               [ 1]  583 	clr	(x)
                                    584 ;	ds18b20.c: 176: UART1_CR4 = 0;
      000210 AE 52 37         [ 2]  585 	ldw	x, #0x5237
      000213 7F               [ 1]  586 	clr	(x)
                                    587 ;	ds18b20.c: 177: UART1_CR3 = 0;
      000214 AE 52 36         [ 2]  588 	ldw	x, #0x5236
      000217 7F               [ 1]  589 	clr	(x)
                                    590 ;	ds18b20.c: 178: UART1_CR5 = 0;
      000218 AE 52 38         [ 2]  591 	ldw	x, #0x5238
      00021B 7F               [ 1]  592 	clr	(x)
                                    593 ;	ds18b20.c: 179: UART1_GTR = 0;
      00021C AE 52 39         [ 2]  594 	ldw	x, #0x5239
      00021F 7F               [ 1]  595 	clr	(x)
                                    596 ;	ds18b20.c: 180: UART1_PSCR = 0;
      000220 AE 52 3A         [ 2]  597 	ldw	x, #0x523a
      000223 7F               [ 1]  598 	clr	(x)
                                    599 ;	ds18b20.c: 184: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      000224 AE 52 34         [ 2]  600 	ldw	x, #0x5234
      000227 F6               [ 1]  601 	ld	a, (x)
      000228 A4 EF            [ 1]  602 	and	a, #0xef
      00022A F7               [ 1]  603 	ld	(x), a
                                    604 ;	ds18b20.c: 185: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      00022B AE 52 34         [ 2]  605 	ldw	x, #0x5234
      00022E F6               [ 1]  606 	ld	a, (x)
      00022F A4 FB            [ 1]  607 	and	a, #0xfb
      000231 F7               [ 1]  608 	ld	(x), a
                                    609 ;	ds18b20.c: 186: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000232 AE 52 36         [ 2]  610 	ldw	x, #0x5236
      000235 F6               [ 1]  611 	ld	a, (x)
      000236 A4 DF            [ 1]  612 	and	a, #0xdf
      000238 F7               [ 1]  613 	ld	(x), a
                                    614 ;	ds18b20.c: 187: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      000239 AE 52 36         [ 2]  615 	ldw	x, #0x5236
      00023C F6               [ 1]  616 	ld	a, (x)
      00023D A4 EF            [ 1]  617 	and	a, #0xef
      00023F F7               [ 1]  618 	ld	(x), a
                                    619 ;	ds18b20.c: 188: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      000240 AE 52 33         [ 2]  620 	ldw	x, #0x5233
      000243 A6 0A            [ 1]  621 	ld	a, #0x0a
      000245 F7               [ 1]  622 	ld	(x), a
                                    623 ;	ds18b20.c: 189: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      000246 AE 52 32         [ 2]  624 	ldw	x, #0x5232
      000249 A6 08            [ 1]  625 	ld	a, #0x08
      00024B F7               [ 1]  626 	ld	(x), a
                                    627 ;	ds18b20.c: 193: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      00024C AE 52 35         [ 2]  628 	ldw	x, #0x5235
      00024F F6               [ 1]  629 	ld	a, (x)
      000250 A4 F7            [ 1]  630 	and	a, #0xf7
      000252 F7               [ 1]  631 	ld	(x), a
                                    632 ;	ds18b20.c: 194: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      000253 AE 52 35         [ 2]  633 	ldw	x, #0x5235
      000256 F6               [ 1]  634 	ld	a, (x)
      000257 A4 FB            [ 1]  635 	and	a, #0xfb
      000259 F7               [ 1]  636 	ld	(x), a
                                    637 ;	ds18b20.c: 198: SET (UART1_CR3, CR3_CPOL);
      00025A AE 52 36         [ 2]  638 	ldw	x, #0x5236
      00025D F6               [ 1]  639 	ld	a, (x)
      00025E AA 04            [ 1]  640 	or	a, #0x04
      000260 F7               [ 1]  641 	ld	(x), a
                                    642 ;	ds18b20.c: 199: SET (UART1_CR3, CR3_CPHA);
      000261 AE 52 36         [ 2]  643 	ldw	x, #0x5236
      000264 F6               [ 1]  644 	ld	a, (x)
      000265 AA 02            [ 1]  645 	or	a, #0x02
      000267 F7               [ 1]  646 	ld	(x), a
                                    647 ;	ds18b20.c: 200: SET (UART1_CR3, CR3_LBCL);
      000268 72 10 52 36      [ 1]  648 	bset	0x5236, #0
                                    649 ;	ds18b20.c: 204: SET (UART1_CR2, CR2_TEN);
      00026C AE 52 35         [ 2]  650 	ldw	x, #0x5235
      00026F F6               [ 1]  651 	ld	a, (x)
      000270 AA 08            [ 1]  652 	or	a, #0x08
      000272 F7               [ 1]  653 	ld	(x), a
                                    654 ;	ds18b20.c: 205: SET (UART1_CR2, CR2_REN);
      000273 AE 52 35         [ 2]  655 	ldw	x, #0x5235
      000276 F6               [ 1]  656 	ld	a, (x)
      000277 AA 04            [ 1]  657 	or	a, #0x04
      000279 F7               [ 1]  658 	ld	(x), a
                                    659 ;	ds18b20.c: 206: UART1_CR3 = CR3_CLKEN;
      00027A AE 52 36         [ 2]  660 	ldw	x, #0x5236
      00027D A6 08            [ 1]  661 	ld	a, #0x08
      00027F F7               [ 1]  662 	ld	(x), a
      000280 81               [ 4]  663 	ret
                                    664 ;	ds18b20.c: 234: void tm1637Init(void)
                                    665 ;	-----------------------------------------
                                    666 ;	 function tm1637Init
                                    667 ;	-----------------------------------------
      000281                        668 _tm1637Init:
                                    669 ;	ds18b20.c: 236: tm1637SetBrightness(8);
      000281 4B 08            [ 1]  670 	push	#0x08
      000283 CDr03r26         [ 4]  671 	call	_tm1637SetBrightness
      000286 84               [ 1]  672 	pop	a
      000287 81               [ 4]  673 	ret
                                    674 ;	ds18b20.c: 241: void tm1637DisplayDecimal(long TT,unsigned int displaySeparator)
                                    675 ;	-----------------------------------------
                                    676 ;	 function tm1637DisplayDecimal
                                    677 ;	-----------------------------------------
      000288                        678 _tm1637DisplayDecimal:
      000288 52 13            [ 2]  679 	sub	sp, #19
                                    680 ;	ds18b20.c: 243: unsigned int v = TT & 0x0000FFFF;
      00028A 7B 19            [ 1]  681 	ld	a, (0x19, sp)
      00028C 97               [ 1]  682 	ld	xl, a
      00028D 7B 18            [ 1]  683 	ld	a, (0x18, sp)
      00028F 95               [ 1]  684 	ld	xh, a
      000290 0F 0C            [ 1]  685 	clr	(0x0c, sp)
      000292 4F               [ 1]  686 	clr	a
      000293 1F 05            [ 2]  687 	ldw	(0x05, sp), x
                                    688 ;	ds18b20.c: 249: for (ii = 0; ii < 4; ++ii) {
      000295 96               [ 1]  689 	ldw	x, sp
      000296 5C               [ 2]  690 	incw	x
      000297 1F 09            [ 2]  691 	ldw	(0x09, sp), x
      000299 AEr05rA7         [ 2]  692 	ldw	x, #_segmentMap+0
      00029C 1F 12            [ 2]  693 	ldw	(0x12, sp), x
      00029E 90 5F            [ 1]  694 	clrw	y
      0002A0                        695 00106$:
                                    696 ;	ds18b20.c: 250: digitArr[ii] = segmentMap[v % 10];
      0002A0 93               [ 1]  697 	ldw	x, y
      0002A1 72 FB 09         [ 2]  698 	addw	x, (0x09, sp)
      0002A4 1F 10            [ 2]  699 	ldw	(0x10, sp), x
      0002A6 90 89            [ 2]  700 	pushw	y
      0002A8 1E 07            [ 2]  701 	ldw	x, (0x07, sp)
      0002AA 90 AE 00 0A      [ 2]  702 	ldw	y, #0x000a
      0002AE 65               [ 2]  703 	divw	x, y
      0002AF 93               [ 1]  704 	ldw	x, y
      0002B0 90 85            [ 2]  705 	popw	y
      0002B2 72 FB 12         [ 2]  706 	addw	x, (0x12, sp)
      0002B5 F6               [ 1]  707 	ld	a, (x)
      0002B6 1E 10            [ 2]  708 	ldw	x, (0x10, sp)
      0002B8 F7               [ 1]  709 	ld	(x), a
                                    710 ;	ds18b20.c: 251: if (ii == 2 && displaySeparator) {
      0002B9 90 A3 00 02      [ 2]  711 	cpw	y, #0x0002
      0002BD 26 0C            [ 1]  712 	jrne	00102$
      0002BF 1E 1A            [ 2]  713 	ldw	x, (0x1a, sp)
      0002C1 27 08            [ 1]  714 	jreq	00102$
                                    715 ;	ds18b20.c: 252: digitArr[ii] |= 1 << 7;
      0002C3 1E 10            [ 2]  716 	ldw	x, (0x10, sp)
      0002C5 F6               [ 1]  717 	ld	a, (x)
      0002C6 AA 80            [ 1]  718 	or	a, #0x80
      0002C8 1E 10            [ 2]  719 	ldw	x, (0x10, sp)
      0002CA F7               [ 1]  720 	ld	(x), a
      0002CB                        721 00102$:
                                    722 ;	ds18b20.c: 254: v /= 10;
      0002CB 90 89            [ 2]  723 	pushw	y
      0002CD 1E 07            [ 2]  724 	ldw	x, (0x07, sp)
      0002CF 90 AE 00 0A      [ 2]  725 	ldw	y, #0x000a
      0002D3 65               [ 2]  726 	divw	x, y
      0002D4 90 85            [ 2]  727 	popw	y
      0002D6 1F 05            [ 2]  728 	ldw	(0x05, sp), x
                                    729 ;	ds18b20.c: 249: for (ii = 0; ii < 4; ++ii) {
      0002D8 90 5C            [ 2]  730 	incw	y
      0002DA 90 A3 00 04      [ 2]  731 	cpw	y, #0x0004
      0002DE 25 C0            [ 1]  732 	jrc	00106$
                                    733 ;	ds18b20.c: 257: _tm1637Start();
      0002E0 CDr03r38         [ 4]  734 	call	__tm1637Start
                                    735 ;	ds18b20.c: 258: _tm1637WriteByte(0x40);
      0002E3 4B 40            [ 1]  736 	push	#0x40
      0002E5 CDr03r8C         [ 4]  737 	call	__tm1637WriteByte
      0002E8 84               [ 1]  738 	pop	a
                                    739 ;	ds18b20.c: 259: _tm1637ReadResult();
      0002E9 CDr03r71         [ 4]  740 	call	__tm1637ReadResult
                                    741 ;	ds18b20.c: 260: _tm1637Stop();
      0002EC CDr03r4A         [ 4]  742 	call	__tm1637Stop
                                    743 ;	ds18b20.c: 262: _tm1637Start();
      0002EF CDr03r38         [ 4]  744 	call	__tm1637Start
                                    745 ;	ds18b20.c: 263: _tm1637WriteByte(0xc0);
      0002F2 4B C0            [ 1]  746 	push	#0xc0
      0002F4 CDr03r8C         [ 4]  747 	call	__tm1637WriteByte
      0002F7 84               [ 1]  748 	pop	a
                                    749 ;	ds18b20.c: 264: _tm1637ReadResult();
      0002F8 CDr03r71         [ 4]  750 	call	__tm1637ReadResult
                                    751 ;	ds18b20.c: 266: for (ii = 0; ii < 4; ++ii) {
      0002FB 5F               [ 1]  752 	clrw	x
      0002FC 1F 07            [ 2]  753 	ldw	(0x07, sp), x
      0002FE                        754 00108$:
                                    755 ;	ds18b20.c: 267: _tm1637WriteByte(digitArr[3 - ii]);
      0002FE 7B 08            [ 1]  756 	ld	a, (0x08, sp)
      000300 6B 0F            [ 1]  757 	ld	(0x0f, sp), a
      000302 A6 03            [ 1]  758 	ld	a, #0x03
      000304 10 0F            [ 1]  759 	sub	a, (0x0f, sp)
      000306 5F               [ 1]  760 	clrw	x
      000307 97               [ 1]  761 	ld	xl, a
      000308 72 FB 09         [ 2]  762 	addw	x, (0x09, sp)
      00030B F6               [ 1]  763 	ld	a, (x)
      00030C 88               [ 1]  764 	push	a
      00030D CDr03r8C         [ 4]  765 	call	__tm1637WriteByte
      000310 84               [ 1]  766 	pop	a
                                    767 ;	ds18b20.c: 268: _tm1637ReadResult();
      000311 CDr03r71         [ 4]  768 	call	__tm1637ReadResult
                                    769 ;	ds18b20.c: 266: for (ii = 0; ii < 4; ++ii) {
      000314 1E 07            [ 2]  770 	ldw	x, (0x07, sp)
      000316 5C               [ 2]  771 	incw	x
      000317 1F 07            [ 2]  772 	ldw	(0x07, sp), x
      000319 1E 07            [ 2]  773 	ldw	x, (0x07, sp)
      00031B A3 00 04         [ 2]  774 	cpw	x, #0x0004
      00031E 25 DE            [ 1]  775 	jrc	00108$
                                    776 ;	ds18b20.c: 271: _tm1637Stop();
      000320 CDr03r4A         [ 4]  777 	call	__tm1637Stop
      000323 5B 13            [ 2]  778 	addw	sp, #19
      000325 81               [ 4]  779 	ret
                                    780 ;	ds18b20.c: 276: void tm1637SetBrightness(char brightness)
                                    781 ;	-----------------------------------------
                                    782 ;	 function tm1637SetBrightness
                                    783 ;	-----------------------------------------
      000326                        784 _tm1637SetBrightness:
                                    785 ;	ds18b20.c: 283: _tm1637Start();
      000326 CDr03r38         [ 4]  786 	call	__tm1637Start
                                    787 ;	ds18b20.c: 284: _tm1637WriteByte(0x87 + brightness);
      000329 7B 03            [ 1]  788 	ld	a, (0x03, sp)
      00032B AB 87            [ 1]  789 	add	a, #0x87
      00032D 88               [ 1]  790 	push	a
      00032E CDr03r8C         [ 4]  791 	call	__tm1637WriteByte
      000331 84               [ 1]  792 	pop	a
                                    793 ;	ds18b20.c: 285: _tm1637ReadResult();
      000332 CDr03r71         [ 4]  794 	call	__tm1637ReadResult
                                    795 ;	ds18b20.c: 286: _tm1637Stop();
      000335 CCr03r4A         [ 2]  796 	jp	__tm1637Stop
                                    797 ;	ds18b20.c: 289: void _tm1637Start(void)
                                    798 ;	-----------------------------------------
                                    799 ;	 function _tm1637Start
                                    800 ;	-----------------------------------------
      000338                        801 __tm1637Start:
                                    802 ;	ds18b20.c: 291: _tm1637ClkHigh();
      000338 CDr03rCA         [ 4]  803 	call	__tm1637ClkHigh
                                    804 ;	ds18b20.c: 292: _tm1637DioHigh();
      00033B CDr03rDA         [ 4]  805 	call	__tm1637DioHigh
                                    806 ;	ds18b20.c: 293: delay(5);
      00033E 4B 05            [ 1]  807 	push	#0x05
      000340 4B 00            [ 1]  808 	push	#0x00
      000342 CDr00r52         [ 4]  809 	call	_delay
      000345 5B 02            [ 2]  810 	addw	sp, #2
                                    811 ;	ds18b20.c: 294: _tm1637DioLow();
      000347 CCr03rE2         [ 2]  812 	jp	__tm1637DioLow
                                    813 ;	ds18b20.c: 297: void _tm1637Stop(void)
                                    814 ;	-----------------------------------------
                                    815 ;	 function _tm1637Stop
                                    816 ;	-----------------------------------------
      00034A                        817 __tm1637Stop:
                                    818 ;	ds18b20.c: 299: _tm1637ClkLow();
      00034A CDr03rD2         [ 4]  819 	call	__tm1637ClkLow
                                    820 ;	ds18b20.c: 300: delay(5);
      00034D 4B 05            [ 1]  821 	push	#0x05
      00034F 4B 00            [ 1]  822 	push	#0x00
      000351 CDr00r52         [ 4]  823 	call	_delay
      000354 5B 02            [ 2]  824 	addw	sp, #2
                                    825 ;	ds18b20.c: 301: _tm1637DioLow();
      000356 CDr03rE2         [ 4]  826 	call	__tm1637DioLow
                                    827 ;	ds18b20.c: 302: delay(5);
      000359 4B 05            [ 1]  828 	push	#0x05
      00035B 4B 00            [ 1]  829 	push	#0x00
      00035D CDr00r52         [ 4]  830 	call	_delay
      000360 5B 02            [ 2]  831 	addw	sp, #2
                                    832 ;	ds18b20.c: 303: _tm1637ClkHigh();
      000362 CDr03rCA         [ 4]  833 	call	__tm1637ClkHigh
                                    834 ;	ds18b20.c: 304: delay(5);
      000365 4B 05            [ 1]  835 	push	#0x05
      000367 4B 00            [ 1]  836 	push	#0x00
      000369 CDr00r52         [ 4]  837 	call	_delay
      00036C 5B 02            [ 2]  838 	addw	sp, #2
                                    839 ;	ds18b20.c: 305: _tm1637DioHigh();
      00036E CCr03rDA         [ 2]  840 	jp	__tm1637DioHigh
                                    841 ;	ds18b20.c: 308: void _tm1637ReadResult(void)
                                    842 ;	-----------------------------------------
                                    843 ;	 function _tm1637ReadResult
                                    844 ;	-----------------------------------------
      000371                        845 __tm1637ReadResult:
                                    846 ;	ds18b20.c: 310: _tm1637ClkLow();
      000371 CDr03rD2         [ 4]  847 	call	__tm1637ClkLow
                                    848 ;	ds18b20.c: 311: delay(5);
      000374 4B 05            [ 1]  849 	push	#0x05
      000376 4B 00            [ 1]  850 	push	#0x00
      000378 CDr00r52         [ 4]  851 	call	_delay
      00037B 5B 02            [ 2]  852 	addw	sp, #2
                                    853 ;	ds18b20.c: 313: _tm1637ClkHigh();
      00037D CDr03rCA         [ 4]  854 	call	__tm1637ClkHigh
                                    855 ;	ds18b20.c: 314: delay(5);
      000380 4B 05            [ 1]  856 	push	#0x05
      000382 4B 00            [ 1]  857 	push	#0x00
      000384 CDr00r52         [ 4]  858 	call	_delay
      000387 5B 02            [ 2]  859 	addw	sp, #2
                                    860 ;	ds18b20.c: 315: _tm1637ClkLow();
      000389 CCr03rD2         [ 2]  861 	jp	__tm1637ClkLow
                                    862 ;	ds18b20.c: 318: void _tm1637WriteByte(unsigned char b)
                                    863 ;	-----------------------------------------
                                    864 ;	 function _tm1637WriteByte
                                    865 ;	-----------------------------------------
      00038C                        866 __tm1637WriteByte:
      00038C 52 02            [ 2]  867 	sub	sp, #2
                                    868 ;	ds18b20.c: 320: for (ii = 0; ii < 8; ++ii) {
      00038E 5F               [ 1]  869 	clrw	x
      00038F 1F 01            [ 2]  870 	ldw	(0x01, sp), x
      000391                        871 00105$:
                                    872 ;	ds18b20.c: 321: _tm1637ClkLow();
      000391 CDr03rD2         [ 4]  873 	call	__tm1637ClkLow
                                    874 ;	ds18b20.c: 322: if (b & 0x01) {
      000394 7B 05            [ 1]  875 	ld	a, (0x05, sp)
      000396 44               [ 1]  876 	srl	a
      000397 24 05            [ 1]  877 	jrnc	00102$
                                    878 ;	ds18b20.c: 323: _tm1637DioHigh();
      000399 CDr03rDA         [ 4]  879 	call	__tm1637DioHigh
      00039C 20 03            [ 2]  880 	jra	00103$
      00039E                        881 00102$:
                                    882 ;	ds18b20.c: 326: _tm1637DioLow();
      00039E CDr03rE2         [ 4]  883 	call	__tm1637DioLow
      0003A1                        884 00103$:
                                    885 ;	ds18b20.c: 328: delay(15);
      0003A1 4B 0F            [ 1]  886 	push	#0x0f
      0003A3 4B 00            [ 1]  887 	push	#0x00
      0003A5 CDr00r52         [ 4]  888 	call	_delay
      0003A8 5B 02            [ 2]  889 	addw	sp, #2
                                    890 ;	ds18b20.c: 329: b >>= 1;
      0003AA 7B 05            [ 1]  891 	ld	a, (0x05, sp)
      0003AC 44               [ 1]  892 	srl	a
      0003AD 6B 05            [ 1]  893 	ld	(0x05, sp), a
                                    894 ;	ds18b20.c: 330: _tm1637ClkHigh();
      0003AF CDr03rCA         [ 4]  895 	call	__tm1637ClkHigh
                                    896 ;	ds18b20.c: 331: delay(15);
      0003B2 4B 0F            [ 1]  897 	push	#0x0f
      0003B4 4B 00            [ 1]  898 	push	#0x00
      0003B6 CDr00r52         [ 4]  899 	call	_delay
      0003B9 5B 02            [ 2]  900 	addw	sp, #2
                                    901 ;	ds18b20.c: 320: for (ii = 0; ii < 8; ++ii) {
      0003BB 1E 01            [ 2]  902 	ldw	x, (0x01, sp)
      0003BD 5C               [ 2]  903 	incw	x
      0003BE 1F 01            [ 2]  904 	ldw	(0x01, sp), x
      0003C0 1E 01            [ 2]  905 	ldw	x, (0x01, sp)
      0003C2 A3 00 08         [ 2]  906 	cpw	x, #0x0008
      0003C5 2F CA            [ 1]  907 	jrslt	00105$
      0003C7 5B 02            [ 2]  908 	addw	sp, #2
      0003C9 81               [ 4]  909 	ret
                                    910 ;	ds18b20.c: 337: void _tm1637ClkHigh(void)
                                    911 ;	-----------------------------------------
                                    912 ;	 function _tm1637ClkHigh
                                    913 ;	-----------------------------------------
      0003CA                        914 __tm1637ClkHigh:
                                    915 ;	ds18b20.c: 342: PD_ODR |= 1 << 2;
      0003CA AE 50 0F         [ 2]  916 	ldw	x, #0x500f
      0003CD F6               [ 1]  917 	ld	a, (x)
      0003CE AA 04            [ 1]  918 	or	a, #0x04
      0003D0 F7               [ 1]  919 	ld	(x), a
      0003D1 81               [ 4]  920 	ret
                                    921 ;	ds18b20.c: 345: void _tm1637ClkLow(void)
                                    922 ;	-----------------------------------------
                                    923 ;	 function _tm1637ClkLow
                                    924 ;	-----------------------------------------
      0003D2                        925 __tm1637ClkLow:
                                    926 ;	ds18b20.c: 349: PD_ODR &= ~(1 << 2);
      0003D2 AE 50 0F         [ 2]  927 	ldw	x, #0x500f
      0003D5 F6               [ 1]  928 	ld	a, (x)
      0003D6 A4 FB            [ 1]  929 	and	a, #0xfb
      0003D8 F7               [ 1]  930 	ld	(x), a
      0003D9 81               [ 4]  931 	ret
                                    932 ;	ds18b20.c: 355: void _tm1637DioHigh(void)
                                    933 ;	-----------------------------------------
                                    934 ;	 function _tm1637DioHigh
                                    935 ;	-----------------------------------------
      0003DA                        936 __tm1637DioHigh:
                                    937 ;	ds18b20.c: 359: PD_ODR |= 1 << 3;
      0003DA AE 50 0F         [ 2]  938 	ldw	x, #0x500f
      0003DD F6               [ 1]  939 	ld	a, (x)
      0003DE AA 08            [ 1]  940 	or	a, #0x08
      0003E0 F7               [ 1]  941 	ld	(x), a
      0003E1 81               [ 4]  942 	ret
                                    943 ;	ds18b20.c: 363: void _tm1637DioLow(void)
                                    944 ;	-----------------------------------------
                                    945 ;	 function _tm1637DioLow
                                    946 ;	-----------------------------------------
      0003E2                        947 __tm1637DioLow:
                                    948 ;	ds18b20.c: 365: PD_ODR &= ~(1 << 3);
      0003E2 AE 50 0F         [ 2]  949 	ldw	x, #0x500f
      0003E5 F6               [ 1]  950 	ld	a, (x)
      0003E6 A4 F7            [ 1]  951 	and	a, #0xf7
      0003E8 F7               [ 1]  952 	ld	(x), a
      0003E9 81               [ 4]  953 	ret
                                    954 ;	ds18b20.c: 379: int main () {
                                    955 ;	-----------------------------------------
                                    956 ;	 function main
                                    957 ;	-----------------------------------------
      0003EA                        958 _main:
      0003EA 52 1C            [ 2]  959 	sub	sp, #28
                                    960 ;	ds18b20.c: 386: InitializeSystemClock();
      0003EC CDr00r08         [ 4]  961 	call	_InitializeSystemClock
                                    962 ;	ds18b20.c: 389: PD_DDR = (1 << 3) | (1 << 2); // output mode
      0003EF AE 50 11         [ 2]  963 	ldw	x, #0x5011
      0003F2 A6 0C            [ 1]  964 	ld	a, #0x0c
      0003F4 F7               [ 1]  965 	ld	(x), a
                                    966 ;	ds18b20.c: 390: PD_CR1 = (1 << 3) | (1 << 2); // push-pull
      0003F5 AE 50 12         [ 2]  967 	ldw	x, #0x5012
      0003F8 A6 0C            [ 1]  968 	ld	a, #0x0c
      0003FA F7               [ 1]  969 	ld	(x), a
                                    970 ;	ds18b20.c: 391: PD_CR2 = (1 << 3) | (1 << 2); // up to 10MHz speed
      0003FB AE 50 13         [ 2]  971 	ldw	x, #0x5013
      0003FE A6 0C            [ 1]  972 	ld	a, #0x0c
      000400 F7               [ 1]  973 	ld	(x), a
                                    974 ;	ds18b20.c: 392: tm1637Init();
      000401 CDr02r81         [ 4]  975 	call	_tm1637Init
                                    976 ;	ds18b20.c: 394: InitializeUART();
      000404 CDr02r08         [ 4]  977 	call	_InitializeUART
                                    978 ;	ds18b20.c: 395: InitializeI2C();
      000407 CDr01rD8         [ 4]  979 	call	_InitializeI2C
                                    980 ;	ds18b20.c: 398: while (1) {
      00040A                        981 00114$:
                                    982 ;	ds18b20.c: 400: i2c_set_start_ack ();
      00040A CDr01r39         [ 4]  983 	call	_i2c_set_start_ack
                                    984 ;	ds18b20.c: 401: i2c_send_address (MLX90614_ADDR, I2C_WRITE);
      00040D 4B 00            [ 1]  985 	push	#0x00
      00040F 4B 5A            [ 1]  986 	push	#0x5a
      000411 CDr00rF7         [ 4]  987 	call	_i2c_send_address
      000414 5B 02            [ 2]  988 	addw	sp, #2
                                    989 ;	ds18b20.c: 402: i2c_send_reg(0x07); // object temperature		
      000416 4B 07            [ 1]  990 	push	#0x07
      000418 CDr00rBE         [ 4]  991 	call	_i2c_send_reg
      00041B 84               [ 1]  992 	pop	a
                                    993 ;	ds18b20.c: 404: i2c_set_start_ack ();
      00041C CDr01r39         [ 4]  994 	call	_i2c_set_start_ack
                                    995 ;	ds18b20.c: 405: i2c_send_address (MLX90614_ADDR, I2C_READ);
      00041F 4B 01            [ 1]  996 	push	#0x01
      000421 4B 5A            [ 1]  997 	push	#0x5a
      000423 CDr00rF7         [ 4]  998 	call	_i2c_send_address
      000426 5B 02            [ 2]  999 	addw	sp, #2
                                   1000 ;	ds18b20.c: 406: reg = I2C_SR1;
      000428 AE 52 17         [ 2] 1001 	ldw	x, #0x5217
      00042B F6               [ 1] 1002 	ld	a, (x)
      00042C 5F               [ 1] 1003 	clrw	x
      00042D 97               [ 1] 1004 	ld	xl, a
      00042E 1F 0A            [ 2] 1005 	ldw	(0x0a, sp), x
                                   1006 ;	ds18b20.c: 407: reg = I2C_SR3;
      000430 AE 52 19         [ 2] 1007 	ldw	x, #0x5219
      000433 F6               [ 1] 1008 	ld	a, (x)
      000434 5F               [ 1] 1009 	clrw	x
      000435 97               [ 1] 1010 	ld	xl, a
      000436 1F 0A            [ 2] 1011 	ldw	(0x0a, sp), x
                                   1012 ;	ds18b20.c: 409: i2c_set_nak();
      000438 CDr00rAE         [ 4] 1013 	call	_i2c_set_nak
                                   1014 ;	ds18b20.c: 411: i2c_read (&x);
      00043B 96               [ 1] 1015 	ldw	x, sp
      00043C 1C 00 0C         [ 2] 1016 	addw	x, #12
      00043F 90 93            [ 1] 1017 	ldw	y, x
      000441 89               [ 2] 1018 	pushw	x
      000442 90 89            [ 2] 1019 	pushw	y
      000444 CDr00r9D         [ 4] 1020 	call	_i2c_read
      000447 5B 02            [ 2] 1021 	addw	sp, #2
      000449 85               [ 2] 1022 	popw	x
                                   1023 ;	ds18b20.c: 412: p1=x;
      00044A 7B 0C            [ 1] 1024 	ld	a, (0x0c, sp)
      00044C 6B 03            [ 1] 1025 	ld	(0x03, sp), a
                                   1026 ;	ds18b20.c: 413: i2c_read (&x);
      00044E 89               [ 2] 1027 	pushw	x
      00044F CDr00r9D         [ 4] 1028 	call	_i2c_read
      000452 5B 02            [ 2] 1029 	addw	sp, #2
                                   1030 ;	ds18b20.c: 414: p2=x;
      000454 7B 0C            [ 1] 1031 	ld	a, (0x0c, sp)
                                   1032 ;	ds18b20.c: 415: i2c_set_stop ();
      000456 88               [ 1] 1033 	push	a
      000457 CDr00rB6         [ 4] 1034 	call	_i2c_set_stop
      00045A 84               [ 1] 1035 	pop	a
                                   1036 ;	ds18b20.c: 417: objTemp = ((((p2&0x007f)<<8)+p1)*2)-27315; //subtract kelvin for celcius
      00045B A4 7F            [ 1] 1037 	and	a, #0x7f
      00045D 5F               [ 1] 1038 	clrw	x
      00045E 97               [ 1] 1039 	ld	xl, a
      00045F 58               [ 2] 1040 	sllw	x
      000460 58               [ 2] 1041 	sllw	x
      000461 58               [ 2] 1042 	sllw	x
      000462 58               [ 2] 1043 	sllw	x
      000463 58               [ 2] 1044 	sllw	x
      000464 58               [ 2] 1045 	sllw	x
      000465 58               [ 2] 1046 	sllw	x
      000466 58               [ 2] 1047 	sllw	x
      000467 7B 03            [ 1] 1048 	ld	a, (0x03, sp)
      000469 6B 1C            [ 1] 1049 	ld	(0x1c, sp), a
      00046B 7B 1C            [ 1] 1050 	ld	a, (0x1c, sp)
      00046D 49               [ 1] 1051 	rlc	a
      00046E 4F               [ 1] 1052 	clr	a
      00046F A2 00            [ 1] 1053 	sbc	a, #0x00
      000471 6B 1B            [ 1] 1054 	ld	(0x1b, sp), a
      000473 72 FB 1B         [ 2] 1055 	addw	x, (0x1b, sp)
      000476 58               [ 2] 1056 	sllw	x
      000477 1D 6A B3         [ 2] 1057 	subw	x, #0x6ab3
      00047A 89               [ 2] 1058 	pushw	x
      00047B CDr00r00         [ 4] 1059 	call	___sint2fs
      00047E 5B 02            [ 2] 1060 	addw	sp, #2
      000480 1F 0F            [ 2] 1061 	ldw	(0x0f, sp), x
      000482 17 0D            [ 2] 1062 	ldw	(0x0d, sp), y
                                   1063 ;	ds18b20.c: 420: while (objTemp > 1000) {
      000484 5F               [ 1] 1064 	clrw	x
      000485 1F 04            [ 2] 1065 	ldw	(0x04, sp), x
      000487                       1066 00101$:
      000487 5F               [ 1] 1067 	clrw	x
      000488 89               [ 2] 1068 	pushw	x
      000489 4B 7A            [ 1] 1069 	push	#0x7a
      00048B 4B 44            [ 1] 1070 	push	#0x44
      00048D 1E 13            [ 2] 1071 	ldw	x, (0x13, sp)
      00048F 89               [ 2] 1072 	pushw	x
      000490 1E 13            [ 2] 1073 	ldw	x, (0x13, sp)
      000492 89               [ 2] 1074 	pushw	x
      000493 CDr00r00         [ 4] 1075 	call	___fsgt
      000496 5B 08            [ 2] 1076 	addw	sp, #8
      000498 4D               [ 1] 1077 	tnz	a
      000499 27 1C            [ 1] 1078 	jreq	00127$
                                   1079 ;	ds18b20.c: 421: vierde+=1;
      00049B 1E 04            [ 2] 1080 	ldw	x, (0x04, sp)
      00049D 5C               [ 2] 1081 	incw	x
      00049E 1F 04            [ 2] 1082 	ldw	(0x04, sp), x
                                   1083 ;	ds18b20.c: 422: objTemp-=1000;
      0004A0 5F               [ 1] 1084 	clrw	x
      0004A1 89               [ 2] 1085 	pushw	x
      0004A2 4B 7A            [ 1] 1086 	push	#0x7a
      0004A4 4B 44            [ 1] 1087 	push	#0x44
      0004A6 1E 13            [ 2] 1088 	ldw	x, (0x13, sp)
      0004A8 89               [ 2] 1089 	pushw	x
      0004A9 1E 13            [ 2] 1090 	ldw	x, (0x13, sp)
      0004AB 89               [ 2] 1091 	pushw	x
      0004AC CDr00r00         [ 4] 1092 	call	___fssub
      0004AF 5B 08            [ 2] 1093 	addw	sp, #8
      0004B1 1F 0F            [ 2] 1094 	ldw	(0x0f, sp), x
      0004B3 17 0D            [ 2] 1095 	ldw	(0x0d, sp), y
      0004B5 20 D0            [ 2] 1096 	jra	00101$
                                   1097 ;	ds18b20.c: 424: while (objTemp > 100) {
      0004B7                       1098 00127$:
      0004B7 16 04            [ 2] 1099 	ldw	y, (0x04, sp)
      0004B9 17 15            [ 2] 1100 	ldw	(0x15, sp), y
      0004BB 5F               [ 1] 1101 	clrw	x
      0004BC 1F 06            [ 2] 1102 	ldw	(0x06, sp), x
      0004BE                       1103 00104$:
      0004BE 5F               [ 1] 1104 	clrw	x
      0004BF 89               [ 2] 1105 	pushw	x
      0004C0 4B C8            [ 1] 1106 	push	#0xc8
      0004C2 4B 42            [ 1] 1107 	push	#0x42
      0004C4 1E 13            [ 2] 1108 	ldw	x, (0x13, sp)
      0004C6 89               [ 2] 1109 	pushw	x
      0004C7 1E 13            [ 2] 1110 	ldw	x, (0x13, sp)
      0004C9 89               [ 2] 1111 	pushw	x
      0004CA CDr00r00         [ 4] 1112 	call	___fsgt
      0004CD 5B 08            [ 2] 1113 	addw	sp, #8
      0004CF 4D               [ 1] 1114 	tnz	a
      0004D0 27 1C            [ 1] 1115 	jreq	00128$
                                   1116 ;	ds18b20.c: 425: derde+=1;
      0004D2 1E 06            [ 2] 1117 	ldw	x, (0x06, sp)
      0004D4 5C               [ 2] 1118 	incw	x
      0004D5 1F 06            [ 2] 1119 	ldw	(0x06, sp), x
                                   1120 ;	ds18b20.c: 426: objTemp-=100;
      0004D7 5F               [ 1] 1121 	clrw	x
      0004D8 89               [ 2] 1122 	pushw	x
      0004D9 4B C8            [ 1] 1123 	push	#0xc8
      0004DB 4B 42            [ 1] 1124 	push	#0x42
      0004DD 1E 13            [ 2] 1125 	ldw	x, (0x13, sp)
      0004DF 89               [ 2] 1126 	pushw	x
      0004E0 1E 13            [ 2] 1127 	ldw	x, (0x13, sp)
      0004E2 89               [ 2] 1128 	pushw	x
      0004E3 CDr00r00         [ 4] 1129 	call	___fssub
      0004E6 5B 08            [ 2] 1130 	addw	sp, #8
      0004E8 1F 0F            [ 2] 1131 	ldw	(0x0f, sp), x
      0004EA 17 0D            [ 2] 1132 	ldw	(0x0d, sp), y
      0004EC 20 D0            [ 2] 1133 	jra	00104$
                                   1134 ;	ds18b20.c: 428: while (objTemp > 10) {
      0004EE                       1135 00128$:
      0004EE 16 06            [ 2] 1136 	ldw	y, (0x06, sp)
      0004F0 17 13            [ 2] 1137 	ldw	(0x13, sp), y
      0004F2 5F               [ 1] 1138 	clrw	x
      0004F3 1F 08            [ 2] 1139 	ldw	(0x08, sp), x
      0004F5                       1140 00107$:
      0004F5 5F               [ 1] 1141 	clrw	x
      0004F6 89               [ 2] 1142 	pushw	x
      0004F7 4B 20            [ 1] 1143 	push	#0x20
      0004F9 4B 41            [ 1] 1144 	push	#0x41
      0004FB 1E 13            [ 2] 1145 	ldw	x, (0x13, sp)
      0004FD 89               [ 2] 1146 	pushw	x
      0004FE 1E 13            [ 2] 1147 	ldw	x, (0x13, sp)
      000500 89               [ 2] 1148 	pushw	x
      000501 CDr00r00         [ 4] 1149 	call	___fsgt
      000504 5B 08            [ 2] 1150 	addw	sp, #8
      000506 4D               [ 1] 1151 	tnz	a
      000507 27 1C            [ 1] 1152 	jreq	00129$
                                   1153 ;	ds18b20.c: 429: tweede+=1;
      000509 1E 08            [ 2] 1154 	ldw	x, (0x08, sp)
      00050B 5C               [ 2] 1155 	incw	x
      00050C 1F 08            [ 2] 1156 	ldw	(0x08, sp), x
                                   1157 ;	ds18b20.c: 430: objTemp-=10;
      00050E 5F               [ 1] 1158 	clrw	x
      00050F 89               [ 2] 1159 	pushw	x
      000510 4B 20            [ 1] 1160 	push	#0x20
      000512 4B 41            [ 1] 1161 	push	#0x41
      000514 1E 13            [ 2] 1162 	ldw	x, (0x13, sp)
      000516 89               [ 2] 1163 	pushw	x
      000517 1E 13            [ 2] 1164 	ldw	x, (0x13, sp)
      000519 89               [ 2] 1165 	pushw	x
      00051A CDr00r00         [ 4] 1166 	call	___fssub
      00051D 5B 08            [ 2] 1167 	addw	sp, #8
      00051F 1F 0F            [ 2] 1168 	ldw	(0x0f, sp), x
      000521 17 0D            [ 2] 1169 	ldw	(0x0d, sp), y
      000523 20 D0            [ 2] 1170 	jra	00107$
                                   1171 ;	ds18b20.c: 432: while (objTemp > 0)
      000525                       1172 00129$:
      000525 16 08            [ 2] 1173 	ldw	y, (0x08, sp)
      000527 17 11            [ 2] 1174 	ldw	(0x11, sp), y
      000529 5F               [ 1] 1175 	clrw	x
      00052A 1F 01            [ 2] 1176 	ldw	(0x01, sp), x
      00052C                       1177 00110$:
      00052C 5F               [ 1] 1178 	clrw	x
      00052D 89               [ 2] 1179 	pushw	x
      00052E 5F               [ 1] 1180 	clrw	x
      00052F 89               [ 2] 1181 	pushw	x
      000530 1E 13            [ 2] 1182 	ldw	x, (0x13, sp)
      000532 89               [ 2] 1183 	pushw	x
      000533 1E 13            [ 2] 1184 	ldw	x, (0x13, sp)
      000535 89               [ 2] 1185 	pushw	x
      000536 CDr00r00         [ 4] 1186 	call	___fsgt
      000539 5B 08            [ 2] 1187 	addw	sp, #8
      00053B 4D               [ 1] 1188 	tnz	a
      00053C 27 1C            [ 1] 1189 	jreq	00112$
                                   1190 ;	ds18b20.c: 434: eerste+=1;
      00053E 1E 01            [ 2] 1191 	ldw	x, (0x01, sp)
      000540 5C               [ 2] 1192 	incw	x
      000541 1F 01            [ 2] 1193 	ldw	(0x01, sp), x
                                   1194 ;	ds18b20.c: 435: objTemp-=1;
      000543 5F               [ 1] 1195 	clrw	x
      000544 89               [ 2] 1196 	pushw	x
      000545 4B 80            [ 1] 1197 	push	#0x80
      000547 4B 3F            [ 1] 1198 	push	#0x3f
      000549 1E 13            [ 2] 1199 	ldw	x, (0x13, sp)
      00054B 89               [ 2] 1200 	pushw	x
      00054C 1E 13            [ 2] 1201 	ldw	x, (0x13, sp)
      00054E 89               [ 2] 1202 	pushw	x
      00054F CDr00r00         [ 4] 1203 	call	___fssub
      000552 5B 08            [ 2] 1204 	addw	sp, #8
      000554 1F 0F            [ 2] 1205 	ldw	(0x0f, sp), x
      000556 17 0D            [ 2] 1206 	ldw	(0x0d, sp), y
      000558 20 D2            [ 2] 1207 	jra	00110$
      00055A                       1208 00112$:
                                   1209 ;	ds18b20.c: 438: utemp=vierde*1000+derde*100+tweede*10+eerste;
      00055A 1E 15            [ 2] 1210 	ldw	x, (0x15, sp)
      00055C 89               [ 2] 1211 	pushw	x
      00055D 4B E8            [ 1] 1212 	push	#0xe8
      00055F 4B 03            [ 1] 1213 	push	#0x03
      000561 CDr00r00         [ 4] 1214 	call	__mulint
      000564 5B 04            [ 2] 1215 	addw	sp, #4
      000566 1F 19            [ 2] 1216 	ldw	(0x19, sp), x
      000568 1E 13            [ 2] 1217 	ldw	x, (0x13, sp)
      00056A 89               [ 2] 1218 	pushw	x
      00056B 4B 64            [ 1] 1219 	push	#0x64
      00056D 4B 00            [ 1] 1220 	push	#0x00
      00056F CDr00r00         [ 4] 1221 	call	__mulint
      000572 5B 04            [ 2] 1222 	addw	sp, #4
      000574 72 FB 19         [ 2] 1223 	addw	x, (0x19, sp)
      000577 1F 17            [ 2] 1224 	ldw	(0x17, sp), x
      000579 1E 11            [ 2] 1225 	ldw	x, (0x11, sp)
      00057B 89               [ 2] 1226 	pushw	x
      00057C 4B 0A            [ 1] 1227 	push	#0x0a
      00057E 4B 00            [ 1] 1228 	push	#0x00
      000580 CDr00r00         [ 4] 1229 	call	__mulint
      000583 5B 04            [ 2] 1230 	addw	sp, #4
      000585 72 FB 17         [ 2] 1231 	addw	x, (0x17, sp)
      000588 72 FB 01         [ 2] 1232 	addw	x, (0x01, sp)
      00058B 90 5F            [ 1] 1233 	clrw	y
      00058D 5D               [ 2] 1234 	tnzw	x
      00058E 2A 02            [ 1] 1235 	jrpl	00162$
      000590 90 5A            [ 2] 1236 	decw	y
      000592                       1237 00162$:
                                   1238 ;	ds18b20.c: 441: tm1637DisplayDecimal(utemp, 1); // eg 37:12
      000592 4B 01            [ 1] 1239 	push	#0x01
      000594 4B 00            [ 1] 1240 	push	#0x00
      000596 89               [ 2] 1241 	pushw	x
      000597 90 89            [ 2] 1242 	pushw	y
      000599 CDr02r88         [ 4] 1243 	call	_tm1637DisplayDecimal
      00059C 5B 06            [ 2] 1244 	addw	sp, #6
                                   1245 ;	ds18b20.c: 444: delayTenMicro();
      00059E CDr00r00         [ 4] 1246 	call	_delayTenMicro
      0005A1 CCr04r0A         [ 2] 1247 	jp	00114$
      0005A4 5B 1C            [ 2] 1248 	addw	sp, #28
      0005A6 81               [ 4] 1249 	ret
                                   1250 	.area CODE
      0005A7                       1251 _segmentMap:
      0005A7 3F                    1252 	.db #0x3F	;  63
      0005A8 06                    1253 	.db #0x06	;  6
      0005A9 5B                    1254 	.db #0x5B	;  91
      0005AA 4F                    1255 	.db #0x4F	;  79	'O'
      0005AB 66                    1256 	.db #0x66	;  102	'f'
      0005AC 6D                    1257 	.db #0x6D	;  109	'm'
      0005AD 7D                    1258 	.db #0x7D	;  125
      0005AE 07                    1259 	.db #0x07	;  7
      0005AF 7F                    1260 	.db #0x7F	;  127
      0005B0 6F                    1261 	.db #0x6F	;  111	'o'
      0005B1 77                    1262 	.db #0x77	;  119	'w'
      0005B2 7C                    1263 	.db #0x7C	;  124
      0005B3 39                    1264 	.db #0x39	;  57	'9'
      0005B4 5E                    1265 	.db #0x5E	;  94
      0005B5 79                    1266 	.db #0x79	;  121	'y'
      0005B6 71                    1267 	.db #0x71	;  113	'q'
      0005B7 00                    1268 	.db #0x00	;  0
                                   1269 	.area INITIALIZER
                                   1270 	.area CABS (ABS)
