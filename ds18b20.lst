                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Thu Jul 20 09:11:00 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module ds18b20
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _segmentMap
                                     13 	.globl _main
                                     14 	.globl _DS18B20_ReadTemperature
                                     15 	.globl _DS18B20_ReadByte
                                     16 	.globl _DS18B20_WriteByte
                                     17 	.globl _DS18B20_Init
                                     18 	.globl __delay_ms
                                     19 	.globl __delay_us
                                     20 	.globl _tm1637DisplayDecimal
                                     21 	.globl _tm1637Init
                                     22 	.globl _InitializeUART
                                     23 	.globl _InitializeI2C
                                     24 	.globl _i2c_read_register
                                     25 	.globl _print_byte_hex
                                     26 	.globl _i2c_set_start_ack
                                     27 	.globl _i2c_send_address
                                     28 	.globl _UARTPrintF
                                     29 	.globl _i2c_send_reg
                                     30 	.globl _i2c_set_stop
                                     31 	.globl _i2c_set_nak
                                     32 	.globl _i2c_read
                                     33 	.globl _delay
                                     34 	.globl _InitializeSystemClock
                                     35 	.globl _delayTenMicro
                                     36 	.globl _tm1637SetBrightness
                                     37 	.globl __tm1637Start
                                     38 	.globl __tm1637Stop
                                     39 	.globl __tm1637ReadResult
                                     40 	.globl __tm1637WriteByte
                                     41 	.globl __tm1637ClkHigh
                                     42 	.globl __tm1637ClkLow
                                     43 	.globl __tm1637DioHigh
                                     44 	.globl __tm1637DioLow
                                     45 ;--------------------------------------------------------
                                     46 ; ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DATA
                                     49 ;--------------------------------------------------------
                                     50 ; ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area INITIALIZED
                                     53 ;--------------------------------------------------------
                                     54 ; Stack segment in internal ram 
                                     55 ;--------------------------------------------------------
                                     56 	.area	SSEG
      000000                         57 __start__stack:
      000000                         58 	.ds	1
                                     59 
                                     60 ;--------------------------------------------------------
                                     61 ; absolute external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area DABS (ABS)
                                     64 ;--------------------------------------------------------
                                     65 ; interrupt vector 
                                     66 ;--------------------------------------------------------
                                     67 	.area HOME
      000000                         68 __interrupt_vect:
      000000 82v00u00u00             69 	int s_GSINIT ;reset
      000004 82 00 00 00             70 	int 0x0000 ;trap
      000008 82 00 00 00             71 	int 0x0000 ;int0
      00000C 82 00 00 00             72 	int 0x0000 ;int1
      000010 82 00 00 00             73 	int 0x0000 ;int2
      000014 82 00 00 00             74 	int 0x0000 ;int3
      000018 82 00 00 00             75 	int 0x0000 ;int4
      00001C 82 00 00 00             76 	int 0x0000 ;int5
      000020 82 00 00 00             77 	int 0x0000 ;int6
      000024 82 00 00 00             78 	int 0x0000 ;int7
      000028 82 00 00 00             79 	int 0x0000 ;int8
      00002C 82 00 00 00             80 	int 0x0000 ;int9
      000030 82 00 00 00             81 	int 0x0000 ;int10
      000034 82 00 00 00             82 	int 0x0000 ;int11
      000038 82 00 00 00             83 	int 0x0000 ;int12
      00003C 82 00 00 00             84 	int 0x0000 ;int13
      000040 82 00 00 00             85 	int 0x0000 ;int14
      000044 82 00 00 00             86 	int 0x0000 ;int15
      000048 82 00 00 00             87 	int 0x0000 ;int16
      00004C 82 00 00 00             88 	int 0x0000 ;int17
      000050 82 00 00 00             89 	int 0x0000 ;int18
      000054 82 00 00 00             90 	int 0x0000 ;int19
      000058 82 00 00 00             91 	int 0x0000 ;int20
      00005C 82 00 00 00             92 	int 0x0000 ;int21
      000060 82 00 00 00             93 	int 0x0000 ;int22
      000064 82 00 00 00             94 	int 0x0000 ;int23
      000068 82 00 00 00             95 	int 0x0000 ;int24
      00006C 82 00 00 00             96 	int 0x0000 ;int25
      000070 82 00 00 00             97 	int 0x0000 ;int26
      000074 82 00 00 00             98 	int 0x0000 ;int27
      000078 82 00 00 00             99 	int 0x0000 ;int28
      00007C 82 00 00 00            100 	int 0x0000 ;int29
                                    101 ;--------------------------------------------------------
                                    102 ; global & static initialisations
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME
                                    105 	.area GSINIT
                                    106 	.area GSFINAL
                                    107 	.area GSINIT
      000000                        108 __sdcc_gs_init_startup:
      000000                        109 __sdcc_init_data:
                                    110 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  111 	ldw x, #l_DATA
      000003 27 07            [ 1]  112 	jreq	00002$
      000005                        113 00001$:
      000005 72 4FuFFuFF      [ 1]  114 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  115 	decw x
      00000A 26 F9            [ 1]  116 	jrne	00001$
      00000C                        117 00002$:
      00000C AEr00r00         [ 2]  118 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  119 	jreq	00004$
      000011                        120 00003$:
      000011 D6uFFuFF         [ 1]  121 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  122 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  123 	decw	x
      000018 26 F7            [ 1]  124 	jrne	00003$
      00001A                        125 00004$:
                                    126 ; stm8_genXINIT() end
                                    127 	.area GSFINAL
      000000 CCr00r80         [ 2]  128 	jp	__sdcc_program_startup
                                    129 ;--------------------------------------------------------
                                    130 ; Home
                                    131 ;--------------------------------------------------------
                                    132 	.area HOME
                                    133 	.area HOME
      000080                        134 __sdcc_program_startup:
      000080 CCr05r55         [ 2]  135 	jp	_main
                                    136 ;	return from main will return to caller
                                    137 ;--------------------------------------------------------
                                    138 ; code
                                    139 ;--------------------------------------------------------
                                    140 	.area CODE
                                    141 ;	ds18b20.c: 33: void delayTenMicro (void) {
                                    142 ;	-----------------------------------------
                                    143 ;	 function delayTenMicro
                                    144 ;	-----------------------------------------
      000000                        145 _delayTenMicro:
                                    146 ;	ds18b20.c: 35: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  147 	ld	a, #0x32
      000002 95               [ 1]  148 	ld	xh, a
      000003                        149 00104$:
                                    150 ;	ds18b20.c: 36: __asm__("nop");
      000003 9D               [ 1]  151 	nop
      000004 9E               [ 1]  152 	ld	a, xh
      000005 4A               [ 1]  153 	dec	a
      000006 95               [ 1]  154 	ld	xh, a
                                    155 ;	ds18b20.c: 35: for (a = 0; a < 50; ++a)
      000007 4D               [ 1]  156 	tnz	a
      000008 26 F9            [ 1]  157 	jrne	00104$
      00000A 81               [ 4]  158 	ret
                                    159 ;	ds18b20.c: 39: void InitializeSystemClock() {
                                    160 ;	-----------------------------------------
                                    161 ;	 function InitializeSystemClock
                                    162 ;	-----------------------------------------
      00000B                        163 _InitializeSystemClock:
                                    164 ;	ds18b20.c: 40: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      00000B 35 00 50 C0      [ 1]  165 	mov	0x50c0+0, #0x00
                                    166 ;	ds18b20.c: 41: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      00000F 35 01 50 C0      [ 1]  167 	mov	0x50c0+0, #0x01
                                    168 ;	ds18b20.c: 42: CLK_ECKR = 0;                       //  Disable the external clock.
      000013 35 00 50 C1      [ 1]  169 	mov	0x50c1+0, #0x00
                                    170 ;	ds18b20.c: 43: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000017                        171 00101$:
      000017 AE 50 C0         [ 2]  172 	ldw	x, #0x50c0
      00001A F6               [ 1]  173 	ld	a, (x)
      00001B A5 02            [ 1]  174 	bcp	a, #0x02
      00001D 27 F8            [ 1]  175 	jreq	00101$
                                    176 ;	ds18b20.c: 44: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00001F 35 00 50 C6      [ 1]  177 	mov	0x50c6+0, #0x00
                                    178 ;	ds18b20.c: 45: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      000023 35 FF 50 C7      [ 1]  179 	mov	0x50c7+0, #0xff
                                    180 ;	ds18b20.c: 46: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000027 35 FF 50 CA      [ 1]  181 	mov	0x50ca+0, #0xff
                                    182 ;	ds18b20.c: 47: CLK_CCOR = 0;                       //  Turn off CCO.
      00002B 35 00 50 C9      [ 1]  183 	mov	0x50c9+0, #0x00
                                    184 ;	ds18b20.c: 48: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      00002F 35 00 50 CC      [ 1]  185 	mov	0x50cc+0, #0x00
                                    186 ;	ds18b20.c: 49: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000033 35 00 50 CD      [ 1]  187 	mov	0x50cd+0, #0x00
                                    188 ;	ds18b20.c: 50: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      000037 35 E1 50 C4      [ 1]  189 	mov	0x50c4+0, #0xe1
                                    190 ;	ds18b20.c: 51: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      00003B 35 00 50 C5      [ 1]  191 	mov	0x50c5+0, #0x00
                                    192 ;	ds18b20.c: 52: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      00003F 35 02 50 C5      [ 1]  193 	mov	0x50c5+0, #0x02
                                    194 ;	ds18b20.c: 53: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      000043                        195 00104$:
      000043 AE 50 C5         [ 2]  196 	ldw	x, #0x50c5
      000046 F6               [ 1]  197 	ld	a, (x)
      000047 44               [ 1]  198 	srl	a
      000048 25 F9            [ 1]  199 	jrc	00104$
      00004A 81               [ 4]  200 	ret
                                    201 ;	ds18b20.c: 55: void delay (int time_ms) {
                                    202 ;	-----------------------------------------
                                    203 ;	 function delay
                                    204 ;	-----------------------------------------
      00004B                        205 _delay:
      00004B 52 0A            [ 2]  206 	sub	sp, #10
                                    207 ;	ds18b20.c: 57: for (x = 0; x < 1036*time_ms; ++x)
      00004D 5F               [ 1]  208 	clrw	x
      00004E 1F 03            [ 2]  209 	ldw	(0x03, sp), x
      000050 1F 01            [ 2]  210 	ldw	(0x01, sp), x
      000052 1E 0D            [ 2]  211 	ldw	x, (0x0d, sp)
      000054 89               [ 2]  212 	pushw	x
      000055 4B 0C            [ 1]  213 	push	#0x0c
      000057 4B 04            [ 1]  214 	push	#0x04
      000059 CDr00r00         [ 4]  215 	call	__mulint
      00005C 5B 04            [ 2]  216 	addw	sp, #4
      00005E 1F 09            [ 2]  217 	ldw	(0x09, sp), x
      000060                        218 00103$:
      000060 16 09            [ 2]  219 	ldw	y, (0x09, sp)
      000062 17 07            [ 2]  220 	ldw	(0x07, sp), y
      000064 7B 07            [ 1]  221 	ld	a, (0x07, sp)
      000066 49               [ 1]  222 	rlc	a
      000067 4F               [ 1]  223 	clr	a
      000068 A2 00            [ 1]  224 	sbc	a, #0x00
      00006A 6B 06            [ 1]  225 	ld	(0x06, sp), a
      00006C 6B 05            [ 1]  226 	ld	(0x05, sp), a
      00006E 1E 03            [ 2]  227 	ldw	x, (0x03, sp)
      000070 13 07            [ 2]  228 	cpw	x, (0x07, sp)
      000072 7B 02            [ 1]  229 	ld	a, (0x02, sp)
      000074 12 06            [ 1]  230 	sbc	a, (0x06, sp)
      000076 7B 01            [ 1]  231 	ld	a, (0x01, sp)
      000078 12 05            [ 1]  232 	sbc	a, (0x05, sp)
      00007A 2E 17            [ 1]  233 	jrsge	00105$
                                    234 ;	ds18b20.c: 58: __asm__("nop");
      00007C 9D               [ 1]  235 	nop
                                    236 ;	ds18b20.c: 57: for (x = 0; x < 1036*time_ms; ++x)
      00007D 16 03            [ 2]  237 	ldw	y, (0x03, sp)
      00007F 72 A9 00 01      [ 2]  238 	addw	y, #0x0001
      000083 7B 02            [ 1]  239 	ld	a, (0x02, sp)
      000085 A9 00            [ 1]  240 	adc	a, #0x00
      000087 97               [ 1]  241 	ld	xl, a
      000088 7B 01            [ 1]  242 	ld	a, (0x01, sp)
      00008A A9 00            [ 1]  243 	adc	a, #0x00
      00008C 95               [ 1]  244 	ld	xh, a
      00008D 17 03            [ 2]  245 	ldw	(0x03, sp), y
      00008F 1F 01            [ 2]  246 	ldw	(0x01, sp), x
      000091 20 CD            [ 2]  247 	jra	00103$
      000093                        248 00105$:
      000093 5B 0A            [ 2]  249 	addw	sp, #10
      000095 81               [ 4]  250 	ret
                                    251 ;	ds18b20.c: 60: void i2c_read (unsigned char *x) {
                                    252 ;	-----------------------------------------
                                    253 ;	 function i2c_read
                                    254 ;	-----------------------------------------
      000096                        255 _i2c_read:
                                    256 ;	ds18b20.c: 61: while ((I2C_SR1 & I2C_RXNE) == 0);
      000096                        257 00101$:
      000096 AE 52 17         [ 2]  258 	ldw	x, #0x5217
      000099 F6               [ 1]  259 	ld	a, (x)
      00009A A5 40            [ 1]  260 	bcp	a, #0x40
      00009C 27 F8            [ 1]  261 	jreq	00101$
                                    262 ;	ds18b20.c: 62: *x = I2C_DR;
      00009E 16 03            [ 2]  263 	ldw	y, (0x03, sp)
      0000A0 AE 52 16         [ 2]  264 	ldw	x, #0x5216
      0000A3 F6               [ 1]  265 	ld	a, (x)
      0000A4 90 F7            [ 1]  266 	ld	(y), a
      0000A6 81               [ 4]  267 	ret
                                    268 ;	ds18b20.c: 64: void i2c_set_nak (void) {
                                    269 ;	-----------------------------------------
                                    270 ;	 function i2c_set_nak
                                    271 ;	-----------------------------------------
      0000A7                        272 _i2c_set_nak:
                                    273 ;	ds18b20.c: 65: I2C_CR2 &= ~I2C_ACK;
      0000A7 AE 52 11         [ 2]  274 	ldw	x, #0x5211
      0000AA F6               [ 1]  275 	ld	a, (x)
      0000AB A4 FB            [ 1]  276 	and	a, #0xfb
      0000AD F7               [ 1]  277 	ld	(x), a
      0000AE 81               [ 4]  278 	ret
                                    279 ;	ds18b20.c: 67: void i2c_set_stop (void) {
                                    280 ;	-----------------------------------------
                                    281 ;	 function i2c_set_stop
                                    282 ;	-----------------------------------------
      0000AF                        283 _i2c_set_stop:
                                    284 ;	ds18b20.c: 68: I2C_CR2 |= I2C_STOP;
      0000AF AE 52 11         [ 2]  285 	ldw	x, #0x5211
      0000B2 F6               [ 1]  286 	ld	a, (x)
      0000B3 AA 02            [ 1]  287 	or	a, #0x02
      0000B5 F7               [ 1]  288 	ld	(x), a
      0000B6 81               [ 4]  289 	ret
                                    290 ;	ds18b20.c: 70: void i2c_send_reg (UCHAR addr) {
                                    291 ;	-----------------------------------------
                                    292 ;	 function i2c_send_reg
                                    293 ;	-----------------------------------------
      0000B7                        294 _i2c_send_reg:
      0000B7 52 02            [ 2]  295 	sub	sp, #2
                                    296 ;	ds18b20.c: 72: reg = I2C_SR1;
      0000B9 AE 52 17         [ 2]  297 	ldw	x, #0x5217
      0000BC F6               [ 1]  298 	ld	a, (x)
      0000BD 5F               [ 1]  299 	clrw	x
      0000BE 97               [ 1]  300 	ld	xl, a
      0000BF 1F 01            [ 2]  301 	ldw	(0x01, sp), x
                                    302 ;	ds18b20.c: 73: reg = I2C_SR3;
      0000C1 AE 52 19         [ 2]  303 	ldw	x, #0x5219
      0000C4 F6               [ 1]  304 	ld	a, (x)
      0000C5 5F               [ 1]  305 	clrw	x
      0000C6 97               [ 1]  306 	ld	xl, a
      0000C7 1F 01            [ 2]  307 	ldw	(0x01, sp), x
                                    308 ;	ds18b20.c: 74: I2C_DR = addr;
      0000C9 AE 52 16         [ 2]  309 	ldw	x, #0x5216
      0000CC 7B 05            [ 1]  310 	ld	a, (0x05, sp)
      0000CE F7               [ 1]  311 	ld	(x), a
                                    312 ;	ds18b20.c: 75: while ((I2C_SR1 & I2C_TXE) == 0);
      0000CF                        313 00101$:
      0000CF AE 52 17         [ 2]  314 	ldw	x, #0x5217
      0000D2 F6               [ 1]  315 	ld	a, (x)
      0000D3 4D               [ 1]  316 	tnz	a
      0000D4 2A F9            [ 1]  317 	jrpl	00101$
      0000D6 5B 02            [ 2]  318 	addw	sp, #2
      0000D8 81               [ 4]  319 	ret
                                    320 ;	ds18b20.c: 79: void UARTPrintF (char *message) {
                                    321 ;	-----------------------------------------
                                    322 ;	 function UARTPrintF
                                    323 ;	-----------------------------------------
      0000D9                        324 _UARTPrintF:
                                    325 ;	ds18b20.c: 80: char *ch = message;
      0000D9 16 03            [ 2]  326 	ldw	y, (0x03, sp)
                                    327 ;	ds18b20.c: 81: while (*ch) {
      0000DB                        328 00104$:
      0000DB 90 F6            [ 1]  329 	ld	a, (y)
      0000DD 4D               [ 1]  330 	tnz	a
      0000DE 27 0F            [ 1]  331 	jreq	00107$
                                    332 ;	ds18b20.c: 82: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0000E0 AE 52 31         [ 2]  333 	ldw	x, #0x5231
      0000E3 F7               [ 1]  334 	ld	(x), a
                                    335 ;	ds18b20.c: 83: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0000E4                        336 00101$:
      0000E4 AE 52 30         [ 2]  337 	ldw	x, #0x5230
      0000E7 F6               [ 1]  338 	ld	a, (x)
      0000E8 4D               [ 1]  339 	tnz	a
      0000E9 2A F9            [ 1]  340 	jrpl	00101$
                                    341 ;	ds18b20.c: 84: ch++;                               //  Grab the next character.
      0000EB 90 5C            [ 2]  342 	incw	y
      0000ED 20 EC            [ 2]  343 	jra	00104$
      0000EF                        344 00107$:
      0000EF 81               [ 4]  345 	ret
                                    346 ;	ds18b20.c: 90: void i2c_send_address (UCHAR addr, UCHAR mode) {
                                    347 ;	-----------------------------------------
                                    348 ;	 function i2c_send_address
                                    349 ;	-----------------------------------------
      0000F0                        350 _i2c_send_address:
      0000F0 52 03            [ 2]  351 	sub	sp, #3
                                    352 ;	ds18b20.c: 92: reg = I2C_SR1;
      0000F2 AE 52 17         [ 2]  353 	ldw	x, #0x5217
      0000F5 F6               [ 1]  354 	ld	a, (x)
      0000F6 5F               [ 1]  355 	clrw	x
      0000F7 97               [ 1]  356 	ld	xl, a
      0000F8 1F 01            [ 2]  357 	ldw	(0x01, sp), x
                                    358 ;	ds18b20.c: 93: I2C_DR = (addr << 1) | mode;
      0000FA 7B 06            [ 1]  359 	ld	a, (0x06, sp)
      0000FC 48               [ 1]  360 	sll	a
      0000FD 1A 07            [ 1]  361 	or	a, (0x07, sp)
      0000FF AE 52 16         [ 2]  362 	ldw	x, #0x5216
      000102 F7               [ 1]  363 	ld	(x), a
                                    364 ;	ds18b20.c: 94: if (mode == I2C_READ) {
      000103 7B 07            [ 1]  365 	ld	a, (0x07, sp)
      000105 A1 01            [ 1]  366 	cp	a, #0x01
      000107 26 06            [ 1]  367 	jrne	00127$
      000109 A6 01            [ 1]  368 	ld	a, #0x01
      00010B 6B 03            [ 1]  369 	ld	(0x03, sp), a
      00010D 20 02            [ 2]  370 	jra	00128$
      00010F                        371 00127$:
      00010F 0F 03            [ 1]  372 	clr	(0x03, sp)
      000111                        373 00128$:
      000111 0D 03            [ 1]  374 	tnz	(0x03, sp)
      000113 27 08            [ 1]  375 	jreq	00103$
                                    376 ;	ds18b20.c: 95: I2C_OARL = 0;
      000115 35 00 52 13      [ 1]  377 	mov	0x5213+0, #0x00
                                    378 ;	ds18b20.c: 96: I2C_OARH = 0;
      000119 35 00 52 14      [ 1]  379 	mov	0x5214+0, #0x00
                                    380 ;	ds18b20.c: 99: while ((I2C_SR1 & I2C_ADDR) == 0);
      00011D                        381 00103$:
                                    382 ;	ds18b20.c: 92: reg = I2C_SR1;
      00011D AE 52 17         [ 2]  383 	ldw	x, #0x5217
      000120 F6               [ 1]  384 	ld	a, (x)
                                    385 ;	ds18b20.c: 99: while ((I2C_SR1 & I2C_ADDR) == 0);
      000121 A5 02            [ 1]  386 	bcp	a, #0x02
      000123 27 F8            [ 1]  387 	jreq	00103$
                                    388 ;	ds18b20.c: 100: if (mode == I2C_READ)
      000125 0D 03            [ 1]  389 	tnz	(0x03, sp)
      000127 27 06            [ 1]  390 	jreq	00108$
                                    391 ;	ds18b20.c: 101: UNSET (I2C_SR1, I2C_ADDR);
      000129 A4 FD            [ 1]  392 	and	a, #0xfd
      00012B AE 52 17         [ 2]  393 	ldw	x, #0x5217
      00012E F7               [ 1]  394 	ld	(x), a
      00012F                        395 00108$:
      00012F 5B 03            [ 2]  396 	addw	sp, #3
      000131 81               [ 4]  397 	ret
                                    398 ;	ds18b20.c: 104: void i2c_set_start_ack (void) {
                                    399 ;	-----------------------------------------
                                    400 ;	 function i2c_set_start_ack
                                    401 ;	-----------------------------------------
      000132                        402 _i2c_set_start_ack:
                                    403 ;	ds18b20.c: 105: I2C_CR2 = I2C_ACK | I2C_START;
      000132 35 05 52 11      [ 1]  404 	mov	0x5211+0, #0x05
                                    405 ;	ds18b20.c: 106: while ((I2C_SR1 & I2C_SB) == 0);
      000136                        406 00101$:
      000136 AE 52 17         [ 2]  407 	ldw	x, #0x5217
      000139 F6               [ 1]  408 	ld	a, (x)
      00013A 44               [ 1]  409 	srl	a
      00013B 24 F9            [ 1]  410 	jrnc	00101$
      00013D 81               [ 4]  411 	ret
                                    412 ;	ds18b20.c: 113: void print_byte_hex (unsigned char buffer) {
                                    413 ;	-----------------------------------------
                                    414 ;	 function print_byte_hex
                                    415 ;	-----------------------------------------
      00013E                        416 _print_byte_hex:
      00013E 52 0E            [ 2]  417 	sub	sp, #14
                                    418 ;	ds18b20.c: 116: a = (buffer >> 4);
      000140 7B 11            [ 1]  419 	ld	a, (0x11, sp)
      000142 4E               [ 1]  420 	swap	a
      000143 A4 0F            [ 1]  421 	and	a, #0x0f
      000145 5F               [ 1]  422 	clrw	x
      000146 97               [ 1]  423 	ld	xl, a
                                    424 ;	ds18b20.c: 117: if (a > 9)
      000147 A3 00 09         [ 2]  425 	cpw	x, #0x0009
      00014A 2D 07            [ 1]  426 	jrsle	00102$
                                    427 ;	ds18b20.c: 118: a = a + 'a' - 10;
      00014C 1C 00 57         [ 2]  428 	addw	x, #0x0057
      00014F 1F 03            [ 2]  429 	ldw	(0x03, sp), x
      000151 20 05            [ 2]  430 	jra	00103$
      000153                        431 00102$:
                                    432 ;	ds18b20.c: 120: a += '0'; 
      000153 1C 00 30         [ 2]  433 	addw	x, #0x0030
      000156 1F 03            [ 2]  434 	ldw	(0x03, sp), x
      000158                        435 00103$:
                                    436 ;	ds18b20.c: 121: b = buffer & 0x0f;
      000158 7B 11            [ 1]  437 	ld	a, (0x11, sp)
      00015A A4 0F            [ 1]  438 	and	a, #0x0f
      00015C 5F               [ 1]  439 	clrw	x
      00015D 97               [ 1]  440 	ld	xl, a
                                    441 ;	ds18b20.c: 122: if (b > 9)
      00015E A3 00 09         [ 2]  442 	cpw	x, #0x0009
      000161 2D 07            [ 1]  443 	jrsle	00105$
                                    444 ;	ds18b20.c: 123: b = b + 'a' - 10;
      000163 1C 00 57         [ 2]  445 	addw	x, #0x0057
      000166 1F 01            [ 2]  446 	ldw	(0x01, sp), x
      000168 20 05            [ 2]  447 	jra	00106$
      00016A                        448 00105$:
                                    449 ;	ds18b20.c: 125: b += '0'; 
      00016A 1C 00 30         [ 2]  450 	addw	x, #0x0030
      00016D 1F 01            [ 2]  451 	ldw	(0x01, sp), x
      00016F                        452 00106$:
                                    453 ;	ds18b20.c: 126: message[0] = a;
      00016F 96               [ 1]  454 	ldw	x, sp
      000170 1C 00 05         [ 2]  455 	addw	x, #5
      000173 1F 0D            [ 2]  456 	ldw	(0x0d, sp), x
      000175 7B 04            [ 1]  457 	ld	a, (0x04, sp)
      000177 1E 0D            [ 2]  458 	ldw	x, (0x0d, sp)
      000179 F7               [ 1]  459 	ld	(x), a
                                    460 ;	ds18b20.c: 127: message[1] = b;
      00017A 1E 0D            [ 2]  461 	ldw	x, (0x0d, sp)
      00017C 5C               [ 2]  462 	incw	x
      00017D 7B 02            [ 1]  463 	ld	a, (0x02, sp)
      00017F F7               [ 1]  464 	ld	(x), a
                                    465 ;	ds18b20.c: 128: message[2] = 0;
      000180 1E 0D            [ 2]  466 	ldw	x, (0x0d, sp)
      000182 5C               [ 2]  467 	incw	x
      000183 5C               [ 2]  468 	incw	x
      000184 7F               [ 1]  469 	clr	(x)
                                    470 ;	ds18b20.c: 129: UARTPrintF (message);
      000185 1E 0D            [ 2]  471 	ldw	x, (0x0d, sp)
      000187 89               [ 2]  472 	pushw	x
      000188 CDr00rD9         [ 4]  473 	call	_UARTPrintF
      00018B 5B 10            [ 2]  474 	addw	sp, #16
      00018D 81               [ 4]  475 	ret
                                    476 ;	ds18b20.c: 133: unsigned char i2c_read_register (UCHAR addr, UCHAR rg) {
                                    477 ;	-----------------------------------------
                                    478 ;	 function i2c_read_register
                                    479 ;	-----------------------------------------
      00018E                        480 _i2c_read_register:
      00018E 52 02            [ 2]  481 	sub	sp, #2
                                    482 ;	ds18b20.c: 136: i2c_set_start_ack ();
      000190 CDr01r32         [ 4]  483 	call	_i2c_set_start_ack
                                    484 ;	ds18b20.c: 137: i2c_send_address (addr, I2C_WRITE);
      000193 4B 00            [ 1]  485 	push	#0x00
      000195 7B 06            [ 1]  486 	ld	a, (0x06, sp)
      000197 88               [ 1]  487 	push	a
      000198 CDr00rF0         [ 4]  488 	call	_i2c_send_address
      00019B 5B 02            [ 2]  489 	addw	sp, #2
                                    490 ;	ds18b20.c: 138: i2c_send_reg (rg);
      00019D 7B 06            [ 1]  491 	ld	a, (0x06, sp)
      00019F 88               [ 1]  492 	push	a
      0001A0 CDr00rB7         [ 4]  493 	call	_i2c_send_reg
      0001A3 84               [ 1]  494 	pop	a
                                    495 ;	ds18b20.c: 139: i2c_set_start_ack ();
      0001A4 CDr01r32         [ 4]  496 	call	_i2c_set_start_ack
                                    497 ;	ds18b20.c: 140: i2c_send_address (addr, I2C_READ);
      0001A7 4B 01            [ 1]  498 	push	#0x01
      0001A9 7B 06            [ 1]  499 	ld	a, (0x06, sp)
      0001AB 88               [ 1]  500 	push	a
      0001AC CDr00rF0         [ 4]  501 	call	_i2c_send_address
      0001AF 5B 02            [ 2]  502 	addw	sp, #2
                                    503 ;	ds18b20.c: 141: reg = I2C_SR1;
      0001B1 AE 52 17         [ 2]  504 	ldw	x, #0x5217
      0001B4 F6               [ 1]  505 	ld	a, (x)
      0001B5 6B 02            [ 1]  506 	ld	(0x02, sp), a
                                    507 ;	ds18b20.c: 142: reg = I2C_SR3;
      0001B7 AE 52 19         [ 2]  508 	ldw	x, #0x5219
      0001BA F6               [ 1]  509 	ld	a, (x)
      0001BB 6B 02            [ 1]  510 	ld	(0x02, sp), a
                                    511 ;	ds18b20.c: 143: i2c_set_nak ();
      0001BD CDr00rA7         [ 4]  512 	call	_i2c_set_nak
                                    513 ;	ds18b20.c: 144: i2c_set_stop ();
      0001C0 CDr00rAF         [ 4]  514 	call	_i2c_set_stop
                                    515 ;	ds18b20.c: 145: i2c_read (&x);
      0001C3 96               [ 1]  516 	ldw	x, sp
      0001C4 5C               [ 2]  517 	incw	x
      0001C5 89               [ 2]  518 	pushw	x
      0001C6 CDr00r96         [ 4]  519 	call	_i2c_read
      0001C9 5B 02            [ 2]  520 	addw	sp, #2
                                    521 ;	ds18b20.c: 146: return (x);
      0001CB 7B 01            [ 1]  522 	ld	a, (0x01, sp)
      0001CD 5B 02            [ 2]  523 	addw	sp, #2
      0001CF 81               [ 4]  524 	ret
                                    525 ;	ds18b20.c: 149: void InitializeI2C (void) {
                                    526 ;	-----------------------------------------
                                    527 ;	 function InitializeI2C
                                    528 ;	-----------------------------------------
      0001D0                        529 _InitializeI2C:
                                    530 ;	ds18b20.c: 150: I2C_CR1 = 0;   //  Disable I2C before configuration starts. PE bit is bit 0
      0001D0 35 00 52 10      [ 1]  531 	mov	0x5210+0, #0x00
                                    532 ;	ds18b20.c: 154: I2C_FREQR = 16;                     //  Set the internal clock frequency (MHz).
      0001D4 35 10 52 12      [ 1]  533 	mov	0x5212+0, #0x10
                                    534 ;	ds18b20.c: 155: UNSET (I2C_CCRH, I2C_FS);           //  I2C running is standard mode.
      0001D8 72 1F 52 1C      [ 1]  535 	bres	0x521c, #7
                                    536 ;	ds18b20.c: 157: I2C_CCRL = 0xa0;                    //  SCL clock speed is 50 kHz.
      0001DC 35 A0 52 1B      [ 1]  537 	mov	0x521b+0, #0xa0
                                    538 ;	ds18b20.c: 159: I2C_CCRH &= 0x00;	// Clears lower 4 bits "CCR"
      0001E0 35 00 52 1C      [ 1]  539 	mov	0x521c+0, #0x00
                                    540 ;	ds18b20.c: 163: UNSET (I2C_OARH, I2C_ADDMODE);      //  7 bit address mode.
      0001E4 72 1F 52 14      [ 1]  541 	bres	0x5214, #7
                                    542 ;	ds18b20.c: 164: SET (I2C_OARH, I2C_ADDCONF);        //  Docs say this must always be 1.
      0001E8 AE 52 14         [ 2]  543 	ldw	x, #0x5214
      0001EB F6               [ 1]  544 	ld	a, (x)
      0001EC AA 40            [ 1]  545 	or	a, #0x40
      0001EE F7               [ 1]  546 	ld	(x), a
                                    547 ;	ds18b20.c: 168: I2C_TRISER = 17;
      0001EF 35 11 52 1D      [ 1]  548 	mov	0x521d+0, #0x11
                                    549 ;	ds18b20.c: 176: I2C_CR1 = I2C_PE;	// Enables port
      0001F3 35 01 52 10      [ 1]  550 	mov	0x5210+0, #0x01
      0001F7 81               [ 4]  551 	ret
                                    552 ;	ds18b20.c: 182: void InitializeUART() {
                                    553 ;	-----------------------------------------
                                    554 ;	 function InitializeUART
                                    555 ;	-----------------------------------------
      0001F8                        556 _InitializeUART:
                                    557 ;	ds18b20.c: 192: UART1_CR1 = 0;
      0001F8 35 00 52 34      [ 1]  558 	mov	0x5234+0, #0x00
                                    559 ;	ds18b20.c: 193: UART1_CR2 = 0;
      0001FC 35 00 52 35      [ 1]  560 	mov	0x5235+0, #0x00
                                    561 ;	ds18b20.c: 194: UART1_CR4 = 0;
      000200 35 00 52 37      [ 1]  562 	mov	0x5237+0, #0x00
                                    563 ;	ds18b20.c: 195: UART1_CR3 = 0;
      000204 35 00 52 36      [ 1]  564 	mov	0x5236+0, #0x00
                                    565 ;	ds18b20.c: 196: UART1_CR5 = 0;
      000208 35 00 52 38      [ 1]  566 	mov	0x5238+0, #0x00
                                    567 ;	ds18b20.c: 197: UART1_GTR = 0;
      00020C 35 00 52 39      [ 1]  568 	mov	0x5239+0, #0x00
                                    569 ;	ds18b20.c: 198: UART1_PSCR = 0;
      000210 35 00 52 3A      [ 1]  570 	mov	0x523a+0, #0x00
                                    571 ;	ds18b20.c: 202: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      000214 AE 52 34         [ 2]  572 	ldw	x, #0x5234
      000217 F6               [ 1]  573 	ld	a, (x)
      000218 A4 EF            [ 1]  574 	and	a, #0xef
      00021A F7               [ 1]  575 	ld	(x), a
                                    576 ;	ds18b20.c: 203: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      00021B AE 52 34         [ 2]  577 	ldw	x, #0x5234
      00021E F6               [ 1]  578 	ld	a, (x)
      00021F A4 FB            [ 1]  579 	and	a, #0xfb
      000221 F7               [ 1]  580 	ld	(x), a
                                    581 ;	ds18b20.c: 204: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000222 AE 52 36         [ 2]  582 	ldw	x, #0x5236
      000225 F6               [ 1]  583 	ld	a, (x)
      000226 A4 DF            [ 1]  584 	and	a, #0xdf
      000228 F7               [ 1]  585 	ld	(x), a
                                    586 ;	ds18b20.c: 205: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      000229 AE 52 36         [ 2]  587 	ldw	x, #0x5236
      00022C F6               [ 1]  588 	ld	a, (x)
      00022D A4 EF            [ 1]  589 	and	a, #0xef
      00022F F7               [ 1]  590 	ld	(x), a
                                    591 ;	ds18b20.c: 206: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      000230 35 0A 52 33      [ 1]  592 	mov	0x5233+0, #0x0a
                                    593 ;	ds18b20.c: 207: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      000234 35 08 52 32      [ 1]  594 	mov	0x5232+0, #0x08
                                    595 ;	ds18b20.c: 211: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      000238 AE 52 35         [ 2]  596 	ldw	x, #0x5235
      00023B F6               [ 1]  597 	ld	a, (x)
      00023C A4 F7            [ 1]  598 	and	a, #0xf7
      00023E F7               [ 1]  599 	ld	(x), a
                                    600 ;	ds18b20.c: 212: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      00023F AE 52 35         [ 2]  601 	ldw	x, #0x5235
      000242 F6               [ 1]  602 	ld	a, (x)
      000243 A4 FB            [ 1]  603 	and	a, #0xfb
      000245 F7               [ 1]  604 	ld	(x), a
                                    605 ;	ds18b20.c: 216: SET (UART1_CR3, CR3_CPOL);
      000246 AE 52 36         [ 2]  606 	ldw	x, #0x5236
      000249 F6               [ 1]  607 	ld	a, (x)
      00024A AA 04            [ 1]  608 	or	a, #0x04
      00024C F7               [ 1]  609 	ld	(x), a
                                    610 ;	ds18b20.c: 217: SET (UART1_CR3, CR3_CPHA);
      00024D AE 52 36         [ 2]  611 	ldw	x, #0x5236
      000250 F6               [ 1]  612 	ld	a, (x)
      000251 AA 02            [ 1]  613 	or	a, #0x02
      000253 F7               [ 1]  614 	ld	(x), a
                                    615 ;	ds18b20.c: 218: SET (UART1_CR3, CR3_LBCL);
      000254 72 10 52 36      [ 1]  616 	bset	0x5236, #0
                                    617 ;	ds18b20.c: 222: SET (UART1_CR2, CR2_TEN);
      000258 AE 52 35         [ 2]  618 	ldw	x, #0x5235
      00025B F6               [ 1]  619 	ld	a, (x)
      00025C AA 08            [ 1]  620 	or	a, #0x08
      00025E F7               [ 1]  621 	ld	(x), a
                                    622 ;	ds18b20.c: 223: SET (UART1_CR2, CR2_REN);
      00025F AE 52 35         [ 2]  623 	ldw	x, #0x5235
      000262 F6               [ 1]  624 	ld	a, (x)
      000263 AA 04            [ 1]  625 	or	a, #0x04
      000265 F7               [ 1]  626 	ld	(x), a
                                    627 ;	ds18b20.c: 224: UART1_CR3 = CR3_CLKEN;
      000266 35 08 52 36      [ 1]  628 	mov	0x5236+0, #0x08
      00026A 81               [ 4]  629 	ret
                                    630 ;	ds18b20.c: 252: void tm1637Init(void)
                                    631 ;	-----------------------------------------
                                    632 ;	 function tm1637Init
                                    633 ;	-----------------------------------------
      00026B                        634 _tm1637Init:
                                    635 ;	ds18b20.c: 254: tm1637SetBrightness(8);
      00026B 4B 08            [ 1]  636 	push	#0x08
      00026D CDr03r08         [ 4]  637 	call	_tm1637SetBrightness
      000270 84               [ 1]  638 	pop	a
      000271 81               [ 4]  639 	ret
                                    640 ;	ds18b20.c: 259: void tm1637DisplayDecimal(long TT,unsigned int displaySeparator)
                                    641 ;	-----------------------------------------
                                    642 ;	 function tm1637DisplayDecimal
                                    643 ;	-----------------------------------------
      000272                        644 _tm1637DisplayDecimal:
      000272 52 0D            [ 2]  645 	sub	sp, #13
                                    646 ;	ds18b20.c: 261: unsigned int v = TT & 0x0000FFFF;
      000274 16 12            [ 2]  647 	ldw	y, (0x12, sp)
      000276 5F               [ 1]  648 	clrw	x
      000277 17 01            [ 2]  649 	ldw	(0x01, sp), y
                                    650 ;	ds18b20.c: 267: for (ii = 0; ii < 4; ++ii) {
      000279 96               [ 1]  651 	ldw	x, sp
      00027A 1C 00 05         [ 2]  652 	addw	x, #5
      00027D 1F 0A            [ 2]  653 	ldw	(0x0a, sp), x
      00027F AEr06r96         [ 2]  654 	ldw	x, #_segmentMap+0
      000282 1F 0C            [ 2]  655 	ldw	(0x0c, sp), x
      000284 5F               [ 1]  656 	clrw	x
      000285 1F 03            [ 2]  657 	ldw	(0x03, sp), x
      000287                        658 00106$:
                                    659 ;	ds18b20.c: 268: digitArr[ii] = segmentMap[v % 10];
      000287 1E 0A            [ 2]  660 	ldw	x, (0x0a, sp)
      000289 72 FB 03         [ 2]  661 	addw	x, (0x03, sp)
      00028C 89               [ 2]  662 	pushw	x
      00028D 1E 03            [ 2]  663 	ldw	x, (0x03, sp)
      00028F 90 AE 00 0A      [ 2]  664 	ldw	y, #0x000a
      000293 65               [ 2]  665 	divw	x, y
      000294 90 9F            [ 1]  666 	ld	a, yl
      000296 85               [ 2]  667 	popw	x
      000297 90 97            [ 1]  668 	ld	yl, a
      000299 72 F9 0C         [ 2]  669 	addw	y, (0x0c, sp)
      00029C 90 F6            [ 1]  670 	ld	a, (y)
      00029E F7               [ 1]  671 	ld	(x), a
                                    672 ;	ds18b20.c: 269: if (ii == 2 && displaySeparator) {
      00029F 89               [ 2]  673 	pushw	x
      0002A0 1E 05            [ 2]  674 	ldw	x, (0x05, sp)
      0002A2 A3 00 02         [ 2]  675 	cpw	x, #0x0002
      0002A5 85               [ 2]  676 	popw	x
      0002A6 26 08            [ 1]  677 	jrne	00102$
      0002A8 16 14            [ 2]  678 	ldw	y, (0x14, sp)
      0002AA 27 04            [ 1]  679 	jreq	00102$
                                    680 ;	ds18b20.c: 270: digitArr[ii] |= 1 << 7;
      0002AC F6               [ 1]  681 	ld	a, (x)
      0002AD AA 80            [ 1]  682 	or	a, #0x80
      0002AF F7               [ 1]  683 	ld	(x), a
      0002B0                        684 00102$:
                                    685 ;	ds18b20.c: 272: v /= 10;
      0002B0 1E 01            [ 2]  686 	ldw	x, (0x01, sp)
      0002B2 90 AE 00 0A      [ 2]  687 	ldw	y, #0x000a
      0002B6 65               [ 2]  688 	divw	x, y
      0002B7 1F 01            [ 2]  689 	ldw	(0x01, sp), x
                                    690 ;	ds18b20.c: 267: for (ii = 0; ii < 4; ++ii) {
      0002B9 1E 03            [ 2]  691 	ldw	x, (0x03, sp)
      0002BB 5C               [ 2]  692 	incw	x
      0002BC 1F 03            [ 2]  693 	ldw	(0x03, sp), x
      0002BE 1E 03            [ 2]  694 	ldw	x, (0x03, sp)
      0002C0 A3 00 04         [ 2]  695 	cpw	x, #0x0004
      0002C3 25 C2            [ 1]  696 	jrc	00106$
                                    697 ;	ds18b20.c: 275: _tm1637Start();
      0002C5 CDr03r1A         [ 4]  698 	call	__tm1637Start
                                    699 ;	ds18b20.c: 276: _tm1637WriteByte(0x40);
      0002C8 4B 40            [ 1]  700 	push	#0x40
      0002CA CDr03r6E         [ 4]  701 	call	__tm1637WriteByte
      0002CD 84               [ 1]  702 	pop	a
                                    703 ;	ds18b20.c: 277: _tm1637ReadResult();
      0002CE CDr03r53         [ 4]  704 	call	__tm1637ReadResult
                                    705 ;	ds18b20.c: 278: _tm1637Stop();
      0002D1 CDr03r2C         [ 4]  706 	call	__tm1637Stop
                                    707 ;	ds18b20.c: 280: _tm1637Start();
      0002D4 CDr03r1A         [ 4]  708 	call	__tm1637Start
                                    709 ;	ds18b20.c: 281: _tm1637WriteByte(0xc0);
      0002D7 4B C0            [ 1]  710 	push	#0xc0
      0002D9 CDr03r6E         [ 4]  711 	call	__tm1637WriteByte
      0002DC 84               [ 1]  712 	pop	a
                                    713 ;	ds18b20.c: 282: _tm1637ReadResult();
      0002DD CDr03r53         [ 4]  714 	call	__tm1637ReadResult
                                    715 ;	ds18b20.c: 284: for (ii = 0; ii < 4; ++ii) {
      0002E0 5F               [ 1]  716 	clrw	x
      0002E1                        717 00108$:
                                    718 ;	ds18b20.c: 285: _tm1637WriteByte(digitArr[3 - ii]);
      0002E1 41               [ 1]  719 	exg	a, xl
      0002E2 6B 09            [ 1]  720 	ld	(0x09, sp), a
      0002E4 41               [ 1]  721 	exg	a, xl
      0002E5 A6 03            [ 1]  722 	ld	a, #0x03
      0002E7 10 09            [ 1]  723 	sub	a, (0x09, sp)
      0002E9 90 5F            [ 1]  724 	clrw	y
      0002EB 90 97            [ 1]  725 	ld	yl, a
      0002ED 72 F9 0A         [ 2]  726 	addw	y, (0x0a, sp)
      0002F0 90 F6            [ 1]  727 	ld	a, (y)
      0002F2 89               [ 2]  728 	pushw	x
      0002F3 88               [ 1]  729 	push	a
      0002F4 CDr03r6E         [ 4]  730 	call	__tm1637WriteByte
      0002F7 84               [ 1]  731 	pop	a
      0002F8 CDr03r53         [ 4]  732 	call	__tm1637ReadResult
      0002FB 85               [ 2]  733 	popw	x
                                    734 ;	ds18b20.c: 284: for (ii = 0; ii < 4; ++ii) {
      0002FC 5C               [ 2]  735 	incw	x
      0002FD A3 00 04         [ 2]  736 	cpw	x, #0x0004
      000300 25 DF            [ 1]  737 	jrc	00108$
                                    738 ;	ds18b20.c: 289: _tm1637Stop();
      000302 CDr03r2C         [ 4]  739 	call	__tm1637Stop
      000305 5B 0D            [ 2]  740 	addw	sp, #13
      000307 81               [ 4]  741 	ret
                                    742 ;	ds18b20.c: 294: void tm1637SetBrightness(char brightness)
                                    743 ;	-----------------------------------------
                                    744 ;	 function tm1637SetBrightness
                                    745 ;	-----------------------------------------
      000308                        746 _tm1637SetBrightness:
                                    747 ;	ds18b20.c: 301: _tm1637Start();
      000308 CDr03r1A         [ 4]  748 	call	__tm1637Start
                                    749 ;	ds18b20.c: 302: _tm1637WriteByte(0x87 + brightness);
      00030B 7B 03            [ 1]  750 	ld	a, (0x03, sp)
      00030D AB 87            [ 1]  751 	add	a, #0x87
      00030F 88               [ 1]  752 	push	a
      000310 CDr03r6E         [ 4]  753 	call	__tm1637WriteByte
      000313 84               [ 1]  754 	pop	a
                                    755 ;	ds18b20.c: 303: _tm1637ReadResult();
      000314 CDr03r53         [ 4]  756 	call	__tm1637ReadResult
                                    757 ;	ds18b20.c: 304: _tm1637Stop();
      000317 CCr03r2C         [ 2]  758 	jp	__tm1637Stop
                                    759 ;	ds18b20.c: 307: void _tm1637Start(void)
                                    760 ;	-----------------------------------------
                                    761 ;	 function _tm1637Start
                                    762 ;	-----------------------------------------
      00031A                        763 __tm1637Start:
                                    764 ;	ds18b20.c: 309: _tm1637ClkHigh();
      00031A CDr03rAC         [ 4]  765 	call	__tm1637ClkHigh
                                    766 ;	ds18b20.c: 310: _tm1637DioHigh();
      00031D CDr03rBC         [ 4]  767 	call	__tm1637DioHigh
                                    768 ;	ds18b20.c: 311: delay(5);
      000320 4B 05            [ 1]  769 	push	#0x05
      000322 4B 00            [ 1]  770 	push	#0x00
      000324 CDr00r4B         [ 4]  771 	call	_delay
      000327 5B 02            [ 2]  772 	addw	sp, #2
                                    773 ;	ds18b20.c: 312: _tm1637DioLow();
      000329 CCr03rC4         [ 2]  774 	jp	__tm1637DioLow
                                    775 ;	ds18b20.c: 315: void _tm1637Stop(void)
                                    776 ;	-----------------------------------------
                                    777 ;	 function _tm1637Stop
                                    778 ;	-----------------------------------------
      00032C                        779 __tm1637Stop:
                                    780 ;	ds18b20.c: 317: _tm1637ClkLow();
      00032C CDr03rB4         [ 4]  781 	call	__tm1637ClkLow
                                    782 ;	ds18b20.c: 318: delay(5);
      00032F 4B 05            [ 1]  783 	push	#0x05
      000331 4B 00            [ 1]  784 	push	#0x00
      000333 CDr00r4B         [ 4]  785 	call	_delay
      000336 5B 02            [ 2]  786 	addw	sp, #2
                                    787 ;	ds18b20.c: 319: _tm1637DioLow();
      000338 CDr03rC4         [ 4]  788 	call	__tm1637DioLow
                                    789 ;	ds18b20.c: 320: delay(5);
      00033B 4B 05            [ 1]  790 	push	#0x05
      00033D 4B 00            [ 1]  791 	push	#0x00
      00033F CDr00r4B         [ 4]  792 	call	_delay
      000342 5B 02            [ 2]  793 	addw	sp, #2
                                    794 ;	ds18b20.c: 321: _tm1637ClkHigh();
      000344 CDr03rAC         [ 4]  795 	call	__tm1637ClkHigh
                                    796 ;	ds18b20.c: 322: delay(5);
      000347 4B 05            [ 1]  797 	push	#0x05
      000349 4B 00            [ 1]  798 	push	#0x00
      00034B CDr00r4B         [ 4]  799 	call	_delay
      00034E 5B 02            [ 2]  800 	addw	sp, #2
                                    801 ;	ds18b20.c: 323: _tm1637DioHigh();
      000350 CCr03rBC         [ 2]  802 	jp	__tm1637DioHigh
                                    803 ;	ds18b20.c: 326: void _tm1637ReadResult(void)
                                    804 ;	-----------------------------------------
                                    805 ;	 function _tm1637ReadResult
                                    806 ;	-----------------------------------------
      000353                        807 __tm1637ReadResult:
                                    808 ;	ds18b20.c: 328: _tm1637ClkLow();
      000353 CDr03rB4         [ 4]  809 	call	__tm1637ClkLow
                                    810 ;	ds18b20.c: 329: delay(5);
      000356 4B 05            [ 1]  811 	push	#0x05
      000358 4B 00            [ 1]  812 	push	#0x00
      00035A CDr00r4B         [ 4]  813 	call	_delay
      00035D 5B 02            [ 2]  814 	addw	sp, #2
                                    815 ;	ds18b20.c: 331: _tm1637ClkHigh();
      00035F CDr03rAC         [ 4]  816 	call	__tm1637ClkHigh
                                    817 ;	ds18b20.c: 332: delay(5);
      000362 4B 05            [ 1]  818 	push	#0x05
      000364 4B 00            [ 1]  819 	push	#0x00
      000366 CDr00r4B         [ 4]  820 	call	_delay
      000369 5B 02            [ 2]  821 	addw	sp, #2
                                    822 ;	ds18b20.c: 333: _tm1637ClkLow();
      00036B CCr03rB4         [ 2]  823 	jp	__tm1637ClkLow
                                    824 ;	ds18b20.c: 336: void _tm1637WriteByte(unsigned char b)
                                    825 ;	-----------------------------------------
                                    826 ;	 function _tm1637WriteByte
                                    827 ;	-----------------------------------------
      00036E                        828 __tm1637WriteByte:
      00036E 52 02            [ 2]  829 	sub	sp, #2
                                    830 ;	ds18b20.c: 338: for (ii = 0; ii < 8; ++ii) {
      000370 5F               [ 1]  831 	clrw	x
      000371 1F 01            [ 2]  832 	ldw	(0x01, sp), x
      000373                        833 00105$:
                                    834 ;	ds18b20.c: 339: _tm1637ClkLow();
      000373 CDr03rB4         [ 4]  835 	call	__tm1637ClkLow
                                    836 ;	ds18b20.c: 340: if (b & 0x01) {
      000376 7B 05            [ 1]  837 	ld	a, (0x05, sp)
      000378 44               [ 1]  838 	srl	a
      000379 24 05            [ 1]  839 	jrnc	00102$
                                    840 ;	ds18b20.c: 341: _tm1637DioHigh();
      00037B CDr03rBC         [ 4]  841 	call	__tm1637DioHigh
      00037E 20 03            [ 2]  842 	jra	00103$
      000380                        843 00102$:
                                    844 ;	ds18b20.c: 344: _tm1637DioLow();
      000380 CDr03rC4         [ 4]  845 	call	__tm1637DioLow
      000383                        846 00103$:
                                    847 ;	ds18b20.c: 346: delay(15);
      000383 4B 0F            [ 1]  848 	push	#0x0f
      000385 4B 00            [ 1]  849 	push	#0x00
      000387 CDr00r4B         [ 4]  850 	call	_delay
      00038A 5B 02            [ 2]  851 	addw	sp, #2
                                    852 ;	ds18b20.c: 347: b >>= 1;
      00038C 7B 05            [ 1]  853 	ld	a, (0x05, sp)
      00038E 44               [ 1]  854 	srl	a
      00038F 6B 05            [ 1]  855 	ld	(0x05, sp), a
                                    856 ;	ds18b20.c: 348: _tm1637ClkHigh();
      000391 CDr03rAC         [ 4]  857 	call	__tm1637ClkHigh
                                    858 ;	ds18b20.c: 349: delay(15);
      000394 4B 0F            [ 1]  859 	push	#0x0f
      000396 4B 00            [ 1]  860 	push	#0x00
      000398 CDr00r4B         [ 4]  861 	call	_delay
      00039B 5B 02            [ 2]  862 	addw	sp, #2
                                    863 ;	ds18b20.c: 338: for (ii = 0; ii < 8; ++ii) {
      00039D 1E 01            [ 2]  864 	ldw	x, (0x01, sp)
      00039F 5C               [ 2]  865 	incw	x
      0003A0 1F 01            [ 2]  866 	ldw	(0x01, sp), x
      0003A2 1E 01            [ 2]  867 	ldw	x, (0x01, sp)
      0003A4 A3 00 08         [ 2]  868 	cpw	x, #0x0008
      0003A7 2F CA            [ 1]  869 	jrslt	00105$
      0003A9 5B 02            [ 2]  870 	addw	sp, #2
      0003AB 81               [ 4]  871 	ret
                                    872 ;	ds18b20.c: 355: void _tm1637ClkHigh(void)
                                    873 ;	-----------------------------------------
                                    874 ;	 function _tm1637ClkHigh
                                    875 ;	-----------------------------------------
      0003AC                        876 __tm1637ClkHigh:
                                    877 ;	ds18b20.c: 360: PD_ODR |= 1 << 2;
      0003AC AE 50 0F         [ 2]  878 	ldw	x, #0x500f
      0003AF F6               [ 1]  879 	ld	a, (x)
      0003B0 AA 04            [ 1]  880 	or	a, #0x04
      0003B2 F7               [ 1]  881 	ld	(x), a
      0003B3 81               [ 4]  882 	ret
                                    883 ;	ds18b20.c: 363: void _tm1637ClkLow(void)
                                    884 ;	-----------------------------------------
                                    885 ;	 function _tm1637ClkLow
                                    886 ;	-----------------------------------------
      0003B4                        887 __tm1637ClkLow:
                                    888 ;	ds18b20.c: 367: PD_ODR &= ~(1 << 2);
      0003B4 AE 50 0F         [ 2]  889 	ldw	x, #0x500f
      0003B7 F6               [ 1]  890 	ld	a, (x)
      0003B8 A4 FB            [ 1]  891 	and	a, #0xfb
      0003BA F7               [ 1]  892 	ld	(x), a
      0003BB 81               [ 4]  893 	ret
                                    894 ;	ds18b20.c: 373: void _tm1637DioHigh(void)
                                    895 ;	-----------------------------------------
                                    896 ;	 function _tm1637DioHigh
                                    897 ;	-----------------------------------------
      0003BC                        898 __tm1637DioHigh:
                                    899 ;	ds18b20.c: 377: PD_ODR |= 1 << 3;
      0003BC AE 50 0F         [ 2]  900 	ldw	x, #0x500f
      0003BF F6               [ 1]  901 	ld	a, (x)
      0003C0 AA 08            [ 1]  902 	or	a, #0x08
      0003C2 F7               [ 1]  903 	ld	(x), a
      0003C3 81               [ 4]  904 	ret
                                    905 ;	ds18b20.c: 381: void _tm1637DioLow(void)
                                    906 ;	-----------------------------------------
                                    907 ;	 function _tm1637DioLow
                                    908 ;	-----------------------------------------
      0003C4                        909 __tm1637DioLow:
                                    910 ;	ds18b20.c: 383: PD_ODR &= ~(1 << 3);
      0003C4 AE 50 0F         [ 2]  911 	ldw	x, #0x500f
      0003C7 F6               [ 1]  912 	ld	a, (x)
      0003C8 A4 F7            [ 1]  913 	and	a, #0xf7
      0003CA F7               [ 1]  914 	ld	(x), a
      0003CB 81               [ 4]  915 	ret
                                    916 ;	ds18b20.c: 391: void _delay_us(unsigned int i)
                                    917 ;	-----------------------------------------
                                    918 ;	 function _delay_us
                                    919 ;	-----------------------------------------
      0003CC                        920 __delay_us:
                                    921 ;	ds18b20.c: 393: i *= 3; 
      0003CC 1E 03            [ 2]  922 	ldw	x, (0x03, sp)
      0003CE 89               [ 2]  923 	pushw	x
      0003CF 4B 03            [ 1]  924 	push	#0x03
      0003D1 4B 00            [ 1]  925 	push	#0x00
      0003D3 CDr00r00         [ 4]  926 	call	__mulint
      0003D6 5B 04            [ 2]  927 	addw	sp, #4
      0003D8 1F 03            [ 2]  928 	ldw	(0x03, sp), x
                                    929 ;	ds18b20.c: 394: while(--i);
      0003DA 1E 03            [ 2]  930 	ldw	x, (0x03, sp)
      0003DC                        931 00101$:
      0003DC 5A               [ 2]  932 	decw	x
      0003DD 5D               [ 2]  933 	tnzw	x
      0003DE 26 FC            [ 1]  934 	jrne	00101$
      0003E0 81               [ 4]  935 	ret
                                    936 ;	ds18b20.c: 397: void _delay_ms(unsigned int i)
                                    937 ;	-----------------------------------------
                                    938 ;	 function _delay_ms
                                    939 ;	-----------------------------------------
      0003E1                        940 __delay_ms:
      0003E1 52 02            [ 2]  941 	sub	sp, #2
                                    942 ;	ds18b20.c: 399: while(i--)
      0003E3 1E 05            [ 2]  943 	ldw	x, (0x05, sp)
      0003E5                        944 00101$:
      0003E5 1F 01            [ 2]  945 	ldw	(0x01, sp), x
      0003E7 5A               [ 2]  946 	decw	x
      0003E8 16 01            [ 2]  947 	ldw	y, (0x01, sp)
      0003EA 27 0D            [ 1]  948 	jreq	00104$
                                    949 ;	ds18b20.c: 401: _delay_us(1000);
      0003EC 89               [ 2]  950 	pushw	x
      0003ED 4B E8            [ 1]  951 	push	#0xe8
      0003EF 4B 03            [ 1]  952 	push	#0x03
      0003F1 CDr03rCC         [ 4]  953 	call	__delay_us
      0003F4 5B 02            [ 2]  954 	addw	sp, #2
      0003F6 85               [ 2]  955 	popw	x
      0003F7 20 EC            [ 2]  956 	jra	00101$
      0003F9                        957 00104$:
      0003F9 5B 02            [ 2]  958 	addw	sp, #2
      0003FB 81               [ 4]  959 	ret
                                    960 ;	ds18b20.c: 407: void DS18B20_Init(void)
                                    961 ;	-----------------------------------------
                                    962 ;	 function DS18B20_Init
                                    963 ;	-----------------------------------------
      0003FC                        964 _DS18B20_Init:
                                    965 ;	ds18b20.c: 409: DS18B20_DQ_OUT;   
      0003FC AE 50 02         [ 2]  966 	ldw	x, #0x5002
      0003FF F6               [ 1]  967 	ld	a, (x)
      000400 AA 08            [ 1]  968 	or	a, #0x08
      000402 F7               [ 1]  969 	ld	(x), a
                                    970 ;	ds18b20.c: 410: DS18B20_DQ_PUSH_PULL;    
      000403 AE 50 03         [ 2]  971 	ldw	x, #0x5003
      000406 F6               [ 1]  972 	ld	a, (x)
      000407 AA 08            [ 1]  973 	or	a, #0x08
      000409 F7               [ 1]  974 	ld	(x), a
                                    975 ;	ds18b20.c: 411: DS18B20_DQ_HIGH;   
      00040A AE 50 00         [ 2]  976 	ldw	x, #0x5000
      00040D F6               [ 1]  977 	ld	a, (x)
      00040E AA 08            [ 1]  978 	or	a, #0x08
      000410 F7               [ 1]  979 	ld	(x), a
                                    980 ;	ds18b20.c: 412: _delay_us(10);
      000411 4B 0A            [ 1]  981 	push	#0x0a
      000413 4B 00            [ 1]  982 	push	#0x00
      000415 CDr03rCC         [ 4]  983 	call	__delay_us
      000418 5B 02            [ 2]  984 	addw	sp, #2
                                    985 ;	ds18b20.c: 413: DS18B20_DQ_LOW;   
      00041A AE 50 00         [ 2]  986 	ldw	x, #0x5000
      00041D F6               [ 1]  987 	ld	a, (x)
      00041E A4 F7            [ 1]  988 	and	a, #0xf7
      000420 F7               [ 1]  989 	ld	(x), a
                                    990 ;	ds18b20.c: 414: _delay_us(600);     //????
      000421 4B 58            [ 1]  991 	push	#0x58
      000423 4B 02            [ 1]  992 	push	#0x02
      000425 CDr03rCC         [ 4]  993 	call	__delay_us
      000428 5B 02            [ 2]  994 	addw	sp, #2
                                    995 ;	ds18b20.c: 416: DS18B20_DQ_IN;   
      00042A AE 50 02         [ 2]  996 	ldw	x, #0x5002
      00042D F6               [ 1]  997 	ld	a, (x)
      00042E A4 F7            [ 1]  998 	and	a, #0xf7
      000430 F7               [ 1]  999 	ld	(x), a
                                   1000 ;	ds18b20.c: 417: DS18B20_DQ_PULL_UP;    
      000431 AE 50 03         [ 2] 1001 	ldw	x, #0x5003
      000434 F6               [ 1] 1002 	ld	a, (x)
      000435 AA 08            [ 1] 1003 	or	a, #0x08
      000437 F7               [ 1] 1004 	ld	(x), a
                                   1005 ;	ds18b20.c: 418: _delay_us(100);     
      000438 4B 64            [ 1] 1006 	push	#0x64
      00043A 4B 00            [ 1] 1007 	push	#0x00
      00043C CDr03rCC         [ 4] 1008 	call	__delay_us
      00043F 5B 02            [ 2] 1009 	addw	sp, #2
                                   1010 ;	ds18b20.c: 419: while(DS18B20_DQ_VALUE == 1);
      000441                       1011 00101$:
      000441 AE 50 01         [ 2] 1012 	ldw	x, #0x5001
      000444 F6               [ 1] 1013 	ld	a, (x)
      000445 A1 01            [ 1] 1014 	cp	a, #0x01
      000447 27 F8            [ 1] 1015 	jreq	00101$
                                   1016 ;	ds18b20.c: 420: _delay_us(400);
      000449 4B 90            [ 1] 1017 	push	#0x90
      00044B 4B 01            [ 1] 1018 	push	#0x01
      00044D CDr03rCC         [ 4] 1019 	call	__delay_us
      000450 5B 02            [ 2] 1020 	addw	sp, #2
      000452 81               [ 4] 1021 	ret
                                   1022 ;	ds18b20.c: 424: void DS18B20_WriteByte(unsigned char _data)
                                   1023 ;	-----------------------------------------
                                   1024 ;	 function DS18B20_WriteByte
                                   1025 ;	-----------------------------------------
      000453                       1026 _DS18B20_WriteByte:
      000453 88               [ 1] 1027 	push	a
                                   1028 ;	ds18b20.c: 428: DS18B20_DQ_OUT;
      000454 AE 50 02         [ 2] 1029 	ldw	x, #0x5002
      000457 F6               [ 1] 1030 	ld	a, (x)
      000458 AA 08            [ 1] 1031 	or	a, #0x08
      00045A F7               [ 1] 1032 	ld	(x), a
                                   1033 ;	ds18b20.c: 429: for (i = 0; i < 8; i++)
      00045B 0F 01            [ 1] 1034 	clr	(0x01, sp)
      00045D                       1035 00104$:
                                   1036 ;	ds18b20.c: 431: DS18B20_DQ_LOW;
      00045D AE 50 00         [ 2] 1037 	ldw	x, #0x5000
      000460 F6               [ 1] 1038 	ld	a, (x)
      000461 A4 F7            [ 1] 1039 	and	a, #0xf7
      000463 F7               [ 1] 1040 	ld	(x), a
                                   1041 ;	ds18b20.c: 432: _delay_us(2);
      000464 4B 02            [ 1] 1042 	push	#0x02
      000466 4B 00            [ 1] 1043 	push	#0x00
      000468 CDr03rCC         [ 4] 1044 	call	__delay_us
      00046B 5B 02            [ 2] 1045 	addw	sp, #2
                                   1046 ;	ds18b20.c: 433: if (_data & 0x01)
      00046D 7B 04            [ 1] 1047 	ld	a, (0x04, sp)
      00046F 44               [ 1] 1048 	srl	a
      000470 24 07            [ 1] 1049 	jrnc	00102$
                                   1050 ;	ds18b20.c: 435: DS18B20_DQ_HIGH;
      000472 AE 50 00         [ 2] 1051 	ldw	x, #0x5000
      000475 F6               [ 1] 1052 	ld	a, (x)
      000476 AA 08            [ 1] 1053 	or	a, #0x08
      000478 F7               [ 1] 1054 	ld	(x), a
      000479                       1055 00102$:
                                   1056 ;	ds18b20.c: 437: _data >>= 1;
      000479 7B 04            [ 1] 1057 	ld	a, (0x04, sp)
      00047B 44               [ 1] 1058 	srl	a
      00047C 6B 04            [ 1] 1059 	ld	(0x04, sp), a
                                   1060 ;	ds18b20.c: 438: _delay_us(60);
      00047E 4B 3C            [ 1] 1061 	push	#0x3c
      000480 4B 00            [ 1] 1062 	push	#0x00
      000482 CDr03rCC         [ 4] 1063 	call	__delay_us
      000485 5B 02            [ 2] 1064 	addw	sp, #2
                                   1065 ;	ds18b20.c: 439: DS18B20_DQ_HIGH;
      000487 AE 50 00         [ 2] 1066 	ldw	x, #0x5000
      00048A F6               [ 1] 1067 	ld	a, (x)
      00048B AA 08            [ 1] 1068 	or	a, #0x08
      00048D F7               [ 1] 1069 	ld	(x), a
                                   1070 ;	ds18b20.c: 429: for (i = 0; i < 8; i++)
      00048E 0C 01            [ 1] 1071 	inc	(0x01, sp)
      000490 7B 01            [ 1] 1072 	ld	a, (0x01, sp)
      000492 A1 08            [ 1] 1073 	cp	a, #0x08
      000494 25 C7            [ 1] 1074 	jrc	00104$
      000496 84               [ 1] 1075 	pop	a
      000497 81               [ 4] 1076 	ret
                                   1077 ;	ds18b20.c: 443: unsigned char DS18B20_ReadByte(void)
                                   1078 ;	-----------------------------------------
                                   1079 ;	 function DS18B20_ReadByte
                                   1080 ;	-----------------------------------------
      000498                       1081 _DS18B20_ReadByte:
      000498 52 02            [ 2] 1082 	sub	sp, #2
                                   1083 ;	ds18b20.c: 445: unsigned char i = 0, _data = 0;
      00049A 0F 01            [ 1] 1084 	clr	(0x01, sp)
                                   1085 ;	ds18b20.c: 447: for (i = 0; i < 8; i++)
      00049C 0F 02            [ 1] 1086 	clr	(0x02, sp)
      00049E                       1087 00104$:
                                   1088 ;	ds18b20.c: 449: DS18B20_DQ_OUT;
      00049E AE 50 02         [ 2] 1089 	ldw	x, #0x5002
      0004A1 F6               [ 1] 1090 	ld	a, (x)
      0004A2 AA 08            [ 1] 1091 	or	a, #0x08
      0004A4 F7               [ 1] 1092 	ld	(x), a
                                   1093 ;	ds18b20.c: 450: DS18B20_DQ_LOW;
      0004A5 AE 50 00         [ 2] 1094 	ldw	x, #0x5000
      0004A8 F6               [ 1] 1095 	ld	a, (x)
      0004A9 A4 F7            [ 1] 1096 	and	a, #0xf7
      0004AB F7               [ 1] 1097 	ld	(x), a
                                   1098 ;	ds18b20.c: 451: _delay_us(5);
      0004AC 4B 05            [ 1] 1099 	push	#0x05
      0004AE 4B 00            [ 1] 1100 	push	#0x00
      0004B0 CDr03rCC         [ 4] 1101 	call	__delay_us
      0004B3 5B 02            [ 2] 1102 	addw	sp, #2
                                   1103 ;	ds18b20.c: 452: _data >>= 1;
      0004B5 04 01            [ 1] 1104 	srl	(0x01, sp)
                                   1105 ;	ds18b20.c: 453: DS18B20_DQ_HIGH;
      0004B7 AE 50 00         [ 2] 1106 	ldw	x, #0x5000
      0004BA F6               [ 1] 1107 	ld	a, (x)
      0004BB AA 08            [ 1] 1108 	or	a, #0x08
      0004BD F7               [ 1] 1109 	ld	(x), a
                                   1110 ;	ds18b20.c: 454: DS18B20_DQ_IN;
      0004BE AE 50 02         [ 2] 1111 	ldw	x, #0x5002
      0004C1 F6               [ 1] 1112 	ld	a, (x)
      0004C2 A4 F7            [ 1] 1113 	and	a, #0xf7
      0004C4 F7               [ 1] 1114 	ld	(x), a
                                   1115 ;	ds18b20.c: 455: if (DS18B20_DQ_VALUE)
      0004C5 AE 50 01         [ 2] 1116 	ldw	x, #0x5001
      0004C8 F6               [ 1] 1117 	ld	a, (x)
      0004C9 4D               [ 1] 1118 	tnz	a
      0004CA 27 06            [ 1] 1119 	jreq	00102$
                                   1120 ;	ds18b20.c: 457: _data |= 0x80;
      0004CC 7B 01            [ 1] 1121 	ld	a, (0x01, sp)
      0004CE AA 80            [ 1] 1122 	or	a, #0x80
      0004D0 6B 01            [ 1] 1123 	ld	(0x01, sp), a
      0004D2                       1124 00102$:
                                   1125 ;	ds18b20.c: 459: DS18B20_DQ_OUT; 
      0004D2 AE 50 02         [ 2] 1126 	ldw	x, #0x5002
      0004D5 F6               [ 1] 1127 	ld	a, (x)
      0004D6 AA 08            [ 1] 1128 	or	a, #0x08
      0004D8 F7               [ 1] 1129 	ld	(x), a
                                   1130 ;	ds18b20.c: 460: DS18B20_DQ_HIGH;
      0004D9 AE 50 00         [ 2] 1131 	ldw	x, #0x5000
      0004DC F6               [ 1] 1132 	ld	a, (x)
      0004DD AA 08            [ 1] 1133 	or	a, #0x08
      0004DF F7               [ 1] 1134 	ld	(x), a
                                   1135 ;	ds18b20.c: 461: _delay_us(60);
      0004E0 4B 3C            [ 1] 1136 	push	#0x3c
      0004E2 4B 00            [ 1] 1137 	push	#0x00
      0004E4 CDr03rCC         [ 4] 1138 	call	__delay_us
      0004E7 5B 02            [ 2] 1139 	addw	sp, #2
                                   1140 ;	ds18b20.c: 447: for (i = 0; i < 8; i++)
      0004E9 0C 02            [ 1] 1141 	inc	(0x02, sp)
      0004EB 7B 02            [ 1] 1142 	ld	a, (0x02, sp)
      0004ED A1 08            [ 1] 1143 	cp	a, #0x08
      0004EF 25 AD            [ 1] 1144 	jrc	00104$
                                   1145 ;	ds18b20.c: 464: return _data;
      0004F1 7B 01            [ 1] 1146 	ld	a, (0x01, sp)
      0004F3 5B 02            [ 2] 1147 	addw	sp, #2
      0004F5 81               [ 4] 1148 	ret
                                   1149 ;	ds18b20.c: 467: float DS18B20_ReadTemperature(void)
                                   1150 ;	-----------------------------------------
                                   1151 ;	 function DS18B20_ReadTemperature
                                   1152 ;	-----------------------------------------
      0004F6                       1153 _DS18B20_ReadTemperature:
      0004F6 52 0A            [ 2] 1154 	sub	sp, #10
                                   1155 ;	ds18b20.c: 481: DS18B20_Init();
      0004F8 CDr03rFC         [ 4] 1156 	call	_DS18B20_Init
                                   1157 ;	ds18b20.c: 482: DS18B20_WriteByte(0xcc);
      0004FB 4B CC            [ 1] 1158 	push	#0xcc
      0004FD CDr04r53         [ 4] 1159 	call	_DS18B20_WriteByte
      000500 84               [ 1] 1160 	pop	a
                                   1161 ;	ds18b20.c: 483: DS18B20_WriteByte(0x44);
      000501 4B 44            [ 1] 1162 	push	#0x44
      000503 CDr04r53         [ 4] 1163 	call	_DS18B20_WriteByte
      000506 84               [ 1] 1164 	pop	a
                                   1165 ;	ds18b20.c: 485: DS18B20_Init();
      000507 CDr03rFC         [ 4] 1166 	call	_DS18B20_Init
                                   1167 ;	ds18b20.c: 486: DS18B20_WriteByte(0xcc);
      00050A 4B CC            [ 1] 1168 	push	#0xcc
      00050C CDr04r53         [ 4] 1169 	call	_DS18B20_WriteByte
      00050F 84               [ 1] 1170 	pop	a
                                   1171 ;	ds18b20.c: 487: DS18B20_WriteByte(0xbe);
      000510 4B BE            [ 1] 1172 	push	#0xbe
      000512 CDr04r53         [ 4] 1173 	call	_DS18B20_WriteByte
      000515 84               [ 1] 1174 	pop	a
                                   1175 ;	ds18b20.c: 489: temp = DS18B20_ReadByte();
      000516 CDr04r98         [ 4] 1176 	call	_DS18B20_ReadByte
                                   1177 ;	ds18b20.c: 490: t = (((temp & 0xf0) >> 4) + (temp & 0x07) * 0.125); 
      000519 95               [ 1] 1178 	ld	xh, a
      00051A A4 F0            [ 1] 1179 	and	a, #0xf0
      00051C 4E               [ 1] 1180 	swap	a
      00051D A4 0F            [ 1] 1181 	and	a, #0x0f
      00051F 6B 0A            [ 1] 1182 	ld	(0x0a, sp), a
      000521 0F 09            [ 1] 1183 	clr	(0x09, sp)
      000523 9E               [ 1] 1184 	ld	a, xh
      000524 A4 07            [ 1] 1185 	and	a, #0x07
      000526 88               [ 1] 1186 	push	a
      000527 CDr00r00         [ 4] 1187 	call	___uchar2fs
      00052A 84               [ 1] 1188 	pop	a
      00052B 89               [ 2] 1189 	pushw	x
      00052C 90 89            [ 2] 1190 	pushw	y
      00052E 5F               [ 1] 1191 	clrw	x
      00052F 89               [ 2] 1192 	pushw	x
      000530 4B 00            [ 1] 1193 	push	#0x00
      000532 4B 3E            [ 1] 1194 	push	#0x3e
      000534 CDr00r00         [ 4] 1195 	call	___fsmul
      000537 5B 08            [ 2] 1196 	addw	sp, #8
      000539 17 05            [ 2] 1197 	ldw	(0x05, sp), y
      00053B 89               [ 2] 1198 	pushw	x
      00053C 16 0B            [ 2] 1199 	ldw	y, (0x0b, sp)
      00053E 90 89            [ 2] 1200 	pushw	y
      000540 CDr00r00         [ 4] 1201 	call	___sint2fs
      000543 5B 02            [ 2] 1202 	addw	sp, #2
      000545 1F 05            [ 2] 1203 	ldw	(0x05, sp), x
      000547 1E 07            [ 2] 1204 	ldw	x, (0x07, sp)
      000549 89               [ 2] 1205 	pushw	x
      00054A 1E 07            [ 2] 1206 	ldw	x, (0x07, sp)
      00054C 89               [ 2] 1207 	pushw	x
      00054D 90 89            [ 2] 1208 	pushw	y
      00054F CDr00r00         [ 4] 1209 	call	___fsadd
                                   1210 ;	ds18b20.c: 494: return t;
      000552 5B 12            [ 2] 1211 	addw	sp, #18
      000554 81               [ 4] 1212 	ret
                                   1213 ;	ds18b20.c: 500: int main () {
                                   1214 ;	-----------------------------------------
                                   1215 ;	 function main
                                   1216 ;	-----------------------------------------
      000555                       1217 _main:
      000555 52 16            [ 2] 1218 	sub	sp, #22
                                   1219 ;	ds18b20.c: 504: InitializeSystemClock();
      000557 CDr00r0B         [ 4] 1220 	call	_InitializeSystemClock
                                   1221 ;	ds18b20.c: 507: PD_DDR = (1 << 3) | (1 << 2); // output mode
      00055A 35 0C 50 11      [ 1] 1222 	mov	0x5011+0, #0x0c
                                   1223 ;	ds18b20.c: 508: PD_CR1 = (1 << 3) | (1 << 2); // push-pull
      00055E 35 0C 50 12      [ 1] 1224 	mov	0x5012+0, #0x0c
                                   1225 ;	ds18b20.c: 509: PD_CR2 = (1 << 3) | (1 << 2); // up to 10MHz speed
      000562 35 0C 50 13      [ 1] 1226 	mov	0x5013+0, #0x0c
                                   1227 ;	ds18b20.c: 510: tm1637Init();
      000566 CDr02r6B         [ 4] 1228 	call	_tm1637Init
                                   1229 ;	ds18b20.c: 512: InitializeUART();
      000569 CDr01rF8         [ 4] 1230 	call	_InitializeUART
                                   1231 ;	ds18b20.c: 516: while (1) {
      00056C                       1232 00114$:
                                   1233 ;	ds18b20.c: 519: objTemp = DS18B20_ReadTemperature(); 
      00056C CDr04rF6         [ 4] 1234 	call	_DS18B20_ReadTemperature
      00056F 1F 07            [ 2] 1235 	ldw	(0x07, sp), x
      000571 17 05            [ 2] 1236 	ldw	(0x05, sp), y
                                   1237 ;	ds18b20.c: 522: while (objTemp > 1000) {
      000573 5F               [ 1] 1238 	clrw	x
      000574 1F 03            [ 2] 1239 	ldw	(0x03, sp), x
      000576                       1240 00101$:
      000576 5F               [ 1] 1241 	clrw	x
      000577 89               [ 2] 1242 	pushw	x
      000578 4B 7A            [ 1] 1243 	push	#0x7a
      00057A 4B 44            [ 1] 1244 	push	#0x44
      00057C 1E 0B            [ 2] 1245 	ldw	x, (0x0b, sp)
      00057E 89               [ 2] 1246 	pushw	x
      00057F 1E 0B            [ 2] 1247 	ldw	x, (0x0b, sp)
      000581 89               [ 2] 1248 	pushw	x
      000582 CDr00r00         [ 4] 1249 	call	___fsgt
      000585 5B 08            [ 2] 1250 	addw	sp, #8
      000587 4D               [ 1] 1251 	tnz	a
      000588 27 1C            [ 1] 1252 	jreq	00127$
                                   1253 ;	ds18b20.c: 523: vierde+=1;
      00058A 1E 03            [ 2] 1254 	ldw	x, (0x03, sp)
      00058C 5C               [ 2] 1255 	incw	x
      00058D 1F 03            [ 2] 1256 	ldw	(0x03, sp), x
                                   1257 ;	ds18b20.c: 524: objTemp-=1000;
      00058F 5F               [ 1] 1258 	clrw	x
      000590 89               [ 2] 1259 	pushw	x
      000591 4B 7A            [ 1] 1260 	push	#0x7a
      000593 4B 44            [ 1] 1261 	push	#0x44
      000595 1E 0B            [ 2] 1262 	ldw	x, (0x0b, sp)
      000597 89               [ 2] 1263 	pushw	x
      000598 1E 0B            [ 2] 1264 	ldw	x, (0x0b, sp)
      00059A 89               [ 2] 1265 	pushw	x
      00059B CDr00r00         [ 4] 1266 	call	___fssub
      00059E 5B 08            [ 2] 1267 	addw	sp, #8
      0005A0 1F 07            [ 2] 1268 	ldw	(0x07, sp), x
      0005A2 17 05            [ 2] 1269 	ldw	(0x05, sp), y
      0005A4 20 D0            [ 2] 1270 	jra	00101$
                                   1271 ;	ds18b20.c: 526: while (objTemp > 100) {
      0005A6                       1272 00127$:
      0005A6 16 03            [ 2] 1273 	ldw	y, (0x03, sp)
      0005A8 17 13            [ 2] 1274 	ldw	(0x13, sp), y
      0005AA 5F               [ 1] 1275 	clrw	x
      0005AB 1F 09            [ 2] 1276 	ldw	(0x09, sp), x
      0005AD                       1277 00104$:
      0005AD 5F               [ 1] 1278 	clrw	x
      0005AE 89               [ 2] 1279 	pushw	x
      0005AF 4B C8            [ 1] 1280 	push	#0xc8
      0005B1 4B 42            [ 1] 1281 	push	#0x42
      0005B3 1E 0B            [ 2] 1282 	ldw	x, (0x0b, sp)
      0005B5 89               [ 2] 1283 	pushw	x
      0005B6 1E 0B            [ 2] 1284 	ldw	x, (0x0b, sp)
      0005B8 89               [ 2] 1285 	pushw	x
      0005B9 CDr00r00         [ 4] 1286 	call	___fsgt
      0005BC 5B 08            [ 2] 1287 	addw	sp, #8
      0005BE 4D               [ 1] 1288 	tnz	a
      0005BF 27 1C            [ 1] 1289 	jreq	00128$
                                   1290 ;	ds18b20.c: 527: derde+=1;
      0005C1 1E 09            [ 2] 1291 	ldw	x, (0x09, sp)
      0005C3 5C               [ 2] 1292 	incw	x
      0005C4 1F 09            [ 2] 1293 	ldw	(0x09, sp), x
                                   1294 ;	ds18b20.c: 528: objTemp-=100;
      0005C6 5F               [ 1] 1295 	clrw	x
      0005C7 89               [ 2] 1296 	pushw	x
      0005C8 4B C8            [ 1] 1297 	push	#0xc8
      0005CA 4B 42            [ 1] 1298 	push	#0x42
      0005CC 1E 0B            [ 2] 1299 	ldw	x, (0x0b, sp)
      0005CE 89               [ 2] 1300 	pushw	x
      0005CF 1E 0B            [ 2] 1301 	ldw	x, (0x0b, sp)
      0005D1 89               [ 2] 1302 	pushw	x
      0005D2 CDr00r00         [ 4] 1303 	call	___fssub
      0005D5 5B 08            [ 2] 1304 	addw	sp, #8
      0005D7 1F 07            [ 2] 1305 	ldw	(0x07, sp), x
      0005D9 17 05            [ 2] 1306 	ldw	(0x05, sp), y
      0005DB 20 D0            [ 2] 1307 	jra	00104$
                                   1308 ;	ds18b20.c: 530: while (objTemp > 10) {
      0005DD                       1309 00128$:
      0005DD 16 09            [ 2] 1310 	ldw	y, (0x09, sp)
      0005DF 17 11            [ 2] 1311 	ldw	(0x11, sp), y
      0005E1 5F               [ 1] 1312 	clrw	x
      0005E2 1F 01            [ 2] 1313 	ldw	(0x01, sp), x
      0005E4                       1314 00107$:
      0005E4 5F               [ 1] 1315 	clrw	x
      0005E5 89               [ 2] 1316 	pushw	x
      0005E6 4B 20            [ 1] 1317 	push	#0x20
      0005E8 4B 41            [ 1] 1318 	push	#0x41
      0005EA 1E 0B            [ 2] 1319 	ldw	x, (0x0b, sp)
      0005EC 89               [ 2] 1320 	pushw	x
      0005ED 1E 0B            [ 2] 1321 	ldw	x, (0x0b, sp)
      0005EF 89               [ 2] 1322 	pushw	x
      0005F0 CDr00r00         [ 4] 1323 	call	___fsgt
      0005F3 5B 08            [ 2] 1324 	addw	sp, #8
      0005F5 4D               [ 1] 1325 	tnz	a
      0005F6 27 1C            [ 1] 1326 	jreq	00129$
                                   1327 ;	ds18b20.c: 531: tweede+=1;
      0005F8 1E 01            [ 2] 1328 	ldw	x, (0x01, sp)
      0005FA 5C               [ 2] 1329 	incw	x
      0005FB 1F 01            [ 2] 1330 	ldw	(0x01, sp), x
                                   1331 ;	ds18b20.c: 532: objTemp-=10;
      0005FD 5F               [ 1] 1332 	clrw	x
      0005FE 89               [ 2] 1333 	pushw	x
      0005FF 4B 20            [ 1] 1334 	push	#0x20
      000601 4B 41            [ 1] 1335 	push	#0x41
      000603 1E 0B            [ 2] 1336 	ldw	x, (0x0b, sp)
      000605 89               [ 2] 1337 	pushw	x
      000606 1E 0B            [ 2] 1338 	ldw	x, (0x0b, sp)
      000608 89               [ 2] 1339 	pushw	x
      000609 CDr00r00         [ 4] 1340 	call	___fssub
      00060C 5B 08            [ 2] 1341 	addw	sp, #8
      00060E 1F 07            [ 2] 1342 	ldw	(0x07, sp), x
      000610 17 05            [ 2] 1343 	ldw	(0x05, sp), y
      000612 20 D0            [ 2] 1344 	jra	00107$
                                   1345 ;	ds18b20.c: 534: while (objTemp > 0)
      000614                       1346 00129$:
      000614 16 01            [ 2] 1347 	ldw	y, (0x01, sp)
      000616 17 0F            [ 2] 1348 	ldw	(0x0f, sp), y
      000618 5F               [ 1] 1349 	clrw	x
      000619 1F 0B            [ 2] 1350 	ldw	(0x0b, sp), x
      00061B                       1351 00110$:
      00061B 5F               [ 1] 1352 	clrw	x
      00061C 89               [ 2] 1353 	pushw	x
      00061D 5F               [ 1] 1354 	clrw	x
      00061E 89               [ 2] 1355 	pushw	x
      00061F 1E 0B            [ 2] 1356 	ldw	x, (0x0b, sp)
      000621 89               [ 2] 1357 	pushw	x
      000622 1E 0B            [ 2] 1358 	ldw	x, (0x0b, sp)
      000624 89               [ 2] 1359 	pushw	x
      000625 CDr00r00         [ 4] 1360 	call	___fsgt
      000628 5B 08            [ 2] 1361 	addw	sp, #8
      00062A 4D               [ 1] 1362 	tnz	a
      00062B 27 1C            [ 1] 1363 	jreq	00112$
                                   1364 ;	ds18b20.c: 536: eerste+=1;
      00062D 1E 0B            [ 2] 1365 	ldw	x, (0x0b, sp)
      00062F 5C               [ 2] 1366 	incw	x
      000630 1F 0B            [ 2] 1367 	ldw	(0x0b, sp), x
                                   1368 ;	ds18b20.c: 537: objTemp-=1;
      000632 5F               [ 1] 1369 	clrw	x
      000633 89               [ 2] 1370 	pushw	x
      000634 4B 80            [ 1] 1371 	push	#0x80
      000636 4B 3F            [ 1] 1372 	push	#0x3f
      000638 1E 0B            [ 2] 1373 	ldw	x, (0x0b, sp)
      00063A 89               [ 2] 1374 	pushw	x
      00063B 1E 0B            [ 2] 1375 	ldw	x, (0x0b, sp)
      00063D 89               [ 2] 1376 	pushw	x
      00063E CDr00r00         [ 4] 1377 	call	___fssub
      000641 5B 08            [ 2] 1378 	addw	sp, #8
      000643 1F 07            [ 2] 1379 	ldw	(0x07, sp), x
      000645 17 05            [ 2] 1380 	ldw	(0x05, sp), y
      000647 20 D2            [ 2] 1381 	jra	00110$
      000649                       1382 00112$:
                                   1383 ;	ds18b20.c: 540: utemp=vierde*1000+derde*100+tweede*10+eerste;
      000649 1E 13            [ 2] 1384 	ldw	x, (0x13, sp)
      00064B 89               [ 2] 1385 	pushw	x
      00064C 4B E8            [ 1] 1386 	push	#0xe8
      00064E 4B 03            [ 1] 1387 	push	#0x03
      000650 CDr00r00         [ 4] 1388 	call	__mulint
      000653 5B 04            [ 2] 1389 	addw	sp, #4
      000655 1F 0D            [ 2] 1390 	ldw	(0x0d, sp), x
      000657 1E 11            [ 2] 1391 	ldw	x, (0x11, sp)
      000659 89               [ 2] 1392 	pushw	x
      00065A 4B 64            [ 1] 1393 	push	#0x64
      00065C 4B 00            [ 1] 1394 	push	#0x00
      00065E CDr00r00         [ 4] 1395 	call	__mulint
      000661 5B 04            [ 2] 1396 	addw	sp, #4
      000663 72 FB 0D         [ 2] 1397 	addw	x, (0x0d, sp)
      000666 1F 15            [ 2] 1398 	ldw	(0x15, sp), x
      000668 1E 0F            [ 2] 1399 	ldw	x, (0x0f, sp)
      00066A 89               [ 2] 1400 	pushw	x
      00066B 4B 0A            [ 1] 1401 	push	#0x0a
      00066D 4B 00            [ 1] 1402 	push	#0x00
      00066F CDr00r00         [ 4] 1403 	call	__mulint
      000672 5B 04            [ 2] 1404 	addw	sp, #4
      000674 72 FB 15         [ 2] 1405 	addw	x, (0x15, sp)
      000677 72 FB 0B         [ 2] 1406 	addw	x, (0x0b, sp)
      00067A 90 5F            [ 1] 1407 	clrw	y
      00067C 5D               [ 2] 1408 	tnzw	x
      00067D 2A 02            [ 1] 1409 	jrpl	00162$
      00067F 90 5A            [ 2] 1410 	decw	y
      000681                       1411 00162$:
                                   1412 ;	ds18b20.c: 543: tm1637DisplayDecimal(utemp, 1); // eg 37:12
      000681 4B 01            [ 1] 1413 	push	#0x01
      000683 4B 00            [ 1] 1414 	push	#0x00
      000685 89               [ 2] 1415 	pushw	x
      000686 90 89            [ 2] 1416 	pushw	y
      000688 CDr02r72         [ 4] 1417 	call	_tm1637DisplayDecimal
      00068B 5B 06            [ 2] 1418 	addw	sp, #6
                                   1419 ;	ds18b20.c: 546: delayTenMicro();
      00068D CDr00r00         [ 4] 1420 	call	_delayTenMicro
      000690 CCr05r6C         [ 2] 1421 	jp	00114$
      000693 5B 16            [ 2] 1422 	addw	sp, #22
      000695 81               [ 4] 1423 	ret
                                   1424 	.area CODE
      000696                       1425 _segmentMap:
      000696 3F                    1426 	.db #0x3F	;  63
      000697 06                    1427 	.db #0x06	;  6
      000698 5B                    1428 	.db #0x5B	;  91
      000699 4F                    1429 	.db #0x4F	;  79	'O'
      00069A 66                    1430 	.db #0x66	;  102	'f'
      00069B 6D                    1431 	.db #0x6D	;  109	'm'
      00069C 7D                    1432 	.db #0x7D	;  125
      00069D 07                    1433 	.db #0x07	;  7
      00069E 7F                    1434 	.db #0x7F	;  127
      00069F 6F                    1435 	.db #0x6F	;  111	'o'
      0006A0 77                    1436 	.db #0x77	;  119	'w'
      0006A1 7C                    1437 	.db #0x7C	;  124
      0006A2 39                    1438 	.db #0x39	;  57	'9'
      0006A3 5E                    1439 	.db #0x5E	;  94
      0006A4 79                    1440 	.db #0x79	;  121	'y'
      0006A5 71                    1441 	.db #0x71	;  113	'q'
      0006A6 00                    1442 	.db #0x00	;  0
                                   1443 	.area INITIALIZER
                                   1444 	.area CABS (ABS)
