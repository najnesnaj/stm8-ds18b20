                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul 11 2014) (Linux)
                                      4 ; This file was generated Wed Jul 19 15:02:31 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module ds18b20
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _segmentMap
                                     13 	.globl _main
                                     14 	.globl _DS18B20_ReadTemperature
                                     15 	.globl _DS18B20_ReadByte
                                     16 	.globl _DS18B20_WriteByte
                                     17 	.globl _DS18B20_Init
                                     18 	.globl __delay_ms
                                     19 	.globl __delay_us
                                     20 	.globl _tm1637DisplayDecimal
                                     21 	.globl _tm1637Init
                                     22 	.globl _InitializeUART
                                     23 	.globl _InitializeI2C
                                     24 	.globl _i2c_read_register
                                     25 	.globl _print_byte_hex
                                     26 	.globl _i2c_set_start_ack
                                     27 	.globl _i2c_send_address
                                     28 	.globl _UARTPrintF
                                     29 	.globl _i2c_send_reg
                                     30 	.globl _i2c_set_stop
                                     31 	.globl _i2c_set_nak
                                     32 	.globl _i2c_read
                                     33 	.globl _delay
                                     34 	.globl _InitializeSystemClock
                                     35 	.globl _delayTenMicro
                                     36 	.globl _tm1637SetBrightness
                                     37 	.globl __tm1637Start
                                     38 	.globl __tm1637Stop
                                     39 	.globl __tm1637ReadResult
                                     40 	.globl __tm1637WriteByte
                                     41 	.globl __tm1637ClkHigh
                                     42 	.globl __tm1637ClkLow
                                     43 	.globl __tm1637DioHigh
                                     44 	.globl __tm1637DioLow
                                     45 ;--------------------------------------------------------
                                     46 ; ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DATA
                                     49 ;--------------------------------------------------------
                                     50 ; ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area INITIALIZED
                                     53 ;--------------------------------------------------------
                                     54 ; Stack segment in internal ram 
                                     55 ;--------------------------------------------------------
                                     56 	.area	SSEG
      000000                         57 __start__stack:
      000000                         58 	.ds	1
                                     59 
                                     60 ;--------------------------------------------------------
                                     61 ; absolute external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area DABS (ABS)
                                     64 ;--------------------------------------------------------
                                     65 ; interrupt vector 
                                     66 ;--------------------------------------------------------
                                     67 	.area HOME
      000000                         68 __interrupt_vect:
      000000 82v00u00u00             69 	int s_GSINIT ;reset
      000004 82 00 00 00             70 	int 0x0000 ;trap
      000008 82 00 00 00             71 	int 0x0000 ;int0
      00000C 82 00 00 00             72 	int 0x0000 ;int1
      000010 82 00 00 00             73 	int 0x0000 ;int2
      000014 82 00 00 00             74 	int 0x0000 ;int3
      000018 82 00 00 00             75 	int 0x0000 ;int4
      00001C 82 00 00 00             76 	int 0x0000 ;int5
      000020 82 00 00 00             77 	int 0x0000 ;int6
      000024 82 00 00 00             78 	int 0x0000 ;int7
      000028 82 00 00 00             79 	int 0x0000 ;int8
      00002C 82 00 00 00             80 	int 0x0000 ;int9
      000030 82 00 00 00             81 	int 0x0000 ;int10
      000034 82 00 00 00             82 	int 0x0000 ;int11
      000038 82 00 00 00             83 	int 0x0000 ;int12
      00003C 82 00 00 00             84 	int 0x0000 ;int13
      000040 82 00 00 00             85 	int 0x0000 ;int14
      000044 82 00 00 00             86 	int 0x0000 ;int15
      000048 82 00 00 00             87 	int 0x0000 ;int16
      00004C 82 00 00 00             88 	int 0x0000 ;int17
      000050 82 00 00 00             89 	int 0x0000 ;int18
      000054 82 00 00 00             90 	int 0x0000 ;int19
      000058 82 00 00 00             91 	int 0x0000 ;int20
      00005C 82 00 00 00             92 	int 0x0000 ;int21
      000060 82 00 00 00             93 	int 0x0000 ;int22
      000064 82 00 00 00             94 	int 0x0000 ;int23
      000068 82 00 00 00             95 	int 0x0000 ;int24
      00006C 82 00 00 00             96 	int 0x0000 ;int25
      000070 82 00 00 00             97 	int 0x0000 ;int26
      000074 82 00 00 00             98 	int 0x0000 ;int27
      000078 82 00 00 00             99 	int 0x0000 ;int28
      00007C 82 00 00 00            100 	int 0x0000 ;int29
                                    101 ;--------------------------------------------------------
                                    102 ; global & static initialisations
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME
                                    105 	.area GSINIT
                                    106 	.area GSFINAL
                                    107 	.area GSINIT
      000000                        108 __sdcc_gs_init_startup:
      000000                        109 __sdcc_init_data:
                                    110 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  111 	ldw x, #l_DATA
      000003 27 07            [ 1]  112 	jreq	00002$
      000005                        113 00001$:
      000005 72 4FuFFuFF      [ 1]  114 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  115 	decw x
      00000A 26 F9            [ 1]  116 	jrne	00001$
      00000C                        117 00002$:
      00000C AEr00r00         [ 2]  118 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  119 	jreq	00004$
      000011                        120 00003$:
      000011 D6uFFuFF         [ 1]  121 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  122 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  123 	decw	x
      000018 26 F7            [ 1]  124 	jrne	00003$
      00001A                        125 00004$:
                                    126 ; stm8_genXINIT() end
                                    127 	.area GSFINAL
      000000 CCr00r80         [ 2]  128 	jp	__sdcc_program_startup
                                    129 ;--------------------------------------------------------
                                    130 ; Home
                                    131 ;--------------------------------------------------------
                                    132 	.area HOME
                                    133 	.area HOME
      000080                        134 __sdcc_program_startup:
      000080 CCr05r94         [ 2]  135 	jp	_main
                                    136 ;	return from main will return to caller
                                    137 ;--------------------------------------------------------
                                    138 ; code
                                    139 ;--------------------------------------------------------
                                    140 	.area CODE
                                    141 ;	ds18b20.c: 33: void delayTenMicro (void) {
                                    142 ;	-----------------------------------------
                                    143 ;	 function delayTenMicro
                                    144 ;	-----------------------------------------
      000000                        145 _delayTenMicro:
                                    146 ;	ds18b20.c: 35: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  147 	ld	a, #0x32
      000002                        148 00104$:
                                    149 ;	ds18b20.c: 36: __asm__("nop");
      000002 9D               [ 1]  150 	nop
      000003 4A               [ 1]  151 	dec	a
                                    152 ;	ds18b20.c: 35: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  153 	tnz	a
      000005 26 FB            [ 1]  154 	jrne	00104$
      000007 81               [ 4]  155 	ret
                                    156 ;	ds18b20.c: 39: void InitializeSystemClock() {
                                    157 ;	-----------------------------------------
                                    158 ;	 function InitializeSystemClock
                                    159 ;	-----------------------------------------
      000008                        160 _InitializeSystemClock:
                                    161 ;	ds18b20.c: 40: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000008 AE 50 C0         [ 2]  162 	ldw	x, #0x50c0
      00000B 7F               [ 1]  163 	clr	(x)
                                    164 ;	ds18b20.c: 41: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      00000C AE 50 C0         [ 2]  165 	ldw	x, #0x50c0
      00000F A6 01            [ 1]  166 	ld	a, #0x01
      000011 F7               [ 1]  167 	ld	(x), a
                                    168 ;	ds18b20.c: 42: CLK_ECKR = 0;                       //  Disable the external clock.
      000012 AE 50 C1         [ 2]  169 	ldw	x, #0x50c1
      000015 7F               [ 1]  170 	clr	(x)
                                    171 ;	ds18b20.c: 43: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000016                        172 00101$:
      000016 AE 50 C0         [ 2]  173 	ldw	x, #0x50c0
      000019 F6               [ 1]  174 	ld	a, (x)
      00001A A5 02            [ 1]  175 	bcp	a, #0x02
      00001C 27 F8            [ 1]  176 	jreq	00101$
                                    177 ;	ds18b20.c: 44: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00001E AE 50 C6         [ 2]  178 	ldw	x, #0x50c6
      000021 7F               [ 1]  179 	clr	(x)
                                    180 ;	ds18b20.c: 45: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      000022 AE 50 C7         [ 2]  181 	ldw	x, #0x50c7
      000025 A6 FF            [ 1]  182 	ld	a, #0xff
      000027 F7               [ 1]  183 	ld	(x), a
                                    184 ;	ds18b20.c: 46: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000028 AE 50 CA         [ 2]  185 	ldw	x, #0x50ca
      00002B A6 FF            [ 1]  186 	ld	a, #0xff
      00002D F7               [ 1]  187 	ld	(x), a
                                    188 ;	ds18b20.c: 47: CLK_CCOR = 0;                       //  Turn off CCO.
      00002E AE 50 C9         [ 2]  189 	ldw	x, #0x50c9
      000031 7F               [ 1]  190 	clr	(x)
                                    191 ;	ds18b20.c: 48: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      000032 AE 50 CC         [ 2]  192 	ldw	x, #0x50cc
      000035 7F               [ 1]  193 	clr	(x)
                                    194 ;	ds18b20.c: 49: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000036 AE 50 CD         [ 2]  195 	ldw	x, #0x50cd
      000039 7F               [ 1]  196 	clr	(x)
                                    197 ;	ds18b20.c: 50: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      00003A AE 50 C4         [ 2]  198 	ldw	x, #0x50c4
      00003D A6 E1            [ 1]  199 	ld	a, #0xe1
      00003F F7               [ 1]  200 	ld	(x), a
                                    201 ;	ds18b20.c: 51: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      000040 AE 50 C5         [ 2]  202 	ldw	x, #0x50c5
      000043 7F               [ 1]  203 	clr	(x)
                                    204 ;	ds18b20.c: 52: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000044 AE 50 C5         [ 2]  205 	ldw	x, #0x50c5
      000047 A6 02            [ 1]  206 	ld	a, #0x02
      000049 F7               [ 1]  207 	ld	(x), a
                                    208 ;	ds18b20.c: 53: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      00004A                        209 00104$:
      00004A AE 50 C5         [ 2]  210 	ldw	x, #0x50c5
      00004D F6               [ 1]  211 	ld	a, (x)
      00004E 44               [ 1]  212 	srl	a
      00004F 25 F9            [ 1]  213 	jrc	00104$
      000051 81               [ 4]  214 	ret
                                    215 ;	ds18b20.c: 55: void delay (int time_ms) {
                                    216 ;	-----------------------------------------
                                    217 ;	 function delay
                                    218 ;	-----------------------------------------
      000052                        219 _delay:
      000052 52 0A            [ 2]  220 	sub	sp, #10
                                    221 ;	ds18b20.c: 57: for (x = 0; x < 1036*time_ms; ++x)
      000054 5F               [ 1]  222 	clrw	x
      000055 1F 03            [ 2]  223 	ldw	(0x03, sp), x
      000057 1F 01            [ 2]  224 	ldw	(0x01, sp), x
      000059 1E 0D            [ 2]  225 	ldw	x, (0x0d, sp)
      00005B 89               [ 2]  226 	pushw	x
      00005C 4B 0C            [ 1]  227 	push	#0x0c
      00005E 4B 04            [ 1]  228 	push	#0x04
      000060 CDr00r00         [ 4]  229 	call	__mulint
      000063 5B 04            [ 2]  230 	addw	sp, #4
      000065 1F 09            [ 2]  231 	ldw	(0x09, sp), x
      000067                        232 00103$:
      000067 16 09            [ 2]  233 	ldw	y, (0x09, sp)
      000069 17 07            [ 2]  234 	ldw	(0x07, sp), y
      00006B 7B 07            [ 1]  235 	ld	a, (0x07, sp)
      00006D 49               [ 1]  236 	rlc	a
      00006E 4F               [ 1]  237 	clr	a
      00006F A2 00            [ 1]  238 	sbc	a, #0x00
      000071 6B 06            [ 1]  239 	ld	(0x06, sp), a
      000073 6B 05            [ 1]  240 	ld	(0x05, sp), a
      000075 1E 03            [ 2]  241 	ldw	x, (0x03, sp)
      000077 13 07            [ 2]  242 	cpw	x, (0x07, sp)
      000079 7B 02            [ 1]  243 	ld	a, (0x02, sp)
      00007B 12 06            [ 1]  244 	sbc	a, (0x06, sp)
      00007D 7B 01            [ 1]  245 	ld	a, (0x01, sp)
      00007F 12 05            [ 1]  246 	sbc	a, (0x05, sp)
      000081 2E 17            [ 1]  247 	jrsge	00105$
                                    248 ;	ds18b20.c: 58: __asm__("nop");
      000083 9D               [ 1]  249 	nop
                                    250 ;	ds18b20.c: 57: for (x = 0; x < 1036*time_ms; ++x)
      000084 16 03            [ 2]  251 	ldw	y, (0x03, sp)
      000086 72 A9 00 01      [ 2]  252 	addw	y, #0x0001
      00008A 7B 02            [ 1]  253 	ld	a, (0x02, sp)
      00008C A9 00            [ 1]  254 	adc	a, #0x00
      00008E 97               [ 1]  255 	ld	xl, a
      00008F 7B 01            [ 1]  256 	ld	a, (0x01, sp)
      000091 A9 00            [ 1]  257 	adc	a, #0x00
      000093 95               [ 1]  258 	ld	xh, a
      000094 17 03            [ 2]  259 	ldw	(0x03, sp), y
      000096 1F 01            [ 2]  260 	ldw	(0x01, sp), x
      000098 20 CD            [ 2]  261 	jra	00103$
      00009A                        262 00105$:
      00009A 5B 0A            [ 2]  263 	addw	sp, #10
      00009C 81               [ 4]  264 	ret
                                    265 ;	ds18b20.c: 60: void i2c_read (unsigned char *x) {
                                    266 ;	-----------------------------------------
                                    267 ;	 function i2c_read
                                    268 ;	-----------------------------------------
      00009D                        269 _i2c_read:
                                    270 ;	ds18b20.c: 61: while ((I2C_SR1 & I2C_RXNE) == 0);
      00009D                        271 00101$:
      00009D AE 52 17         [ 2]  272 	ldw	x, #0x5217
      0000A0 F6               [ 1]  273 	ld	a, (x)
      0000A1 A5 40            [ 1]  274 	bcp	a, #0x40
      0000A3 27 F8            [ 1]  275 	jreq	00101$
                                    276 ;	ds18b20.c: 62: *x = I2C_DR;
      0000A5 16 03            [ 2]  277 	ldw	y, (0x03, sp)
      0000A7 AE 52 16         [ 2]  278 	ldw	x, #0x5216
      0000AA F6               [ 1]  279 	ld	a, (x)
      0000AB 90 F7            [ 1]  280 	ld	(y), a
      0000AD 81               [ 4]  281 	ret
                                    282 ;	ds18b20.c: 64: void i2c_set_nak (void) {
                                    283 ;	-----------------------------------------
                                    284 ;	 function i2c_set_nak
                                    285 ;	-----------------------------------------
      0000AE                        286 _i2c_set_nak:
                                    287 ;	ds18b20.c: 65: I2C_CR2 &= ~I2C_ACK;
      0000AE AE 52 11         [ 2]  288 	ldw	x, #0x5211
      0000B1 F6               [ 1]  289 	ld	a, (x)
      0000B2 A4 FB            [ 1]  290 	and	a, #0xfb
      0000B4 F7               [ 1]  291 	ld	(x), a
      0000B5 81               [ 4]  292 	ret
                                    293 ;	ds18b20.c: 67: void i2c_set_stop (void) {
                                    294 ;	-----------------------------------------
                                    295 ;	 function i2c_set_stop
                                    296 ;	-----------------------------------------
      0000B6                        297 _i2c_set_stop:
                                    298 ;	ds18b20.c: 68: I2C_CR2 |= I2C_STOP;
      0000B6 AE 52 11         [ 2]  299 	ldw	x, #0x5211
      0000B9 F6               [ 1]  300 	ld	a, (x)
      0000BA AA 02            [ 1]  301 	or	a, #0x02
      0000BC F7               [ 1]  302 	ld	(x), a
      0000BD 81               [ 4]  303 	ret
                                    304 ;	ds18b20.c: 70: void i2c_send_reg (UCHAR addr) {
                                    305 ;	-----------------------------------------
                                    306 ;	 function i2c_send_reg
                                    307 ;	-----------------------------------------
      0000BE                        308 _i2c_send_reg:
      0000BE 52 02            [ 2]  309 	sub	sp, #2
                                    310 ;	ds18b20.c: 72: reg = I2C_SR1;
      0000C0 AE 52 17         [ 2]  311 	ldw	x, #0x5217
      0000C3 F6               [ 1]  312 	ld	a, (x)
      0000C4 5F               [ 1]  313 	clrw	x
      0000C5 97               [ 1]  314 	ld	xl, a
      0000C6 1F 01            [ 2]  315 	ldw	(0x01, sp), x
                                    316 ;	ds18b20.c: 73: reg = I2C_SR3;
      0000C8 AE 52 19         [ 2]  317 	ldw	x, #0x5219
      0000CB F6               [ 1]  318 	ld	a, (x)
      0000CC 5F               [ 1]  319 	clrw	x
      0000CD 97               [ 1]  320 	ld	xl, a
      0000CE 1F 01            [ 2]  321 	ldw	(0x01, sp), x
                                    322 ;	ds18b20.c: 74: I2C_DR = addr;
      0000D0 AE 52 16         [ 2]  323 	ldw	x, #0x5216
      0000D3 7B 05            [ 1]  324 	ld	a, (0x05, sp)
      0000D5 F7               [ 1]  325 	ld	(x), a
                                    326 ;	ds18b20.c: 75: while ((I2C_SR1 & I2C_TXE) == 0);
      0000D6                        327 00101$:
      0000D6 AE 52 17         [ 2]  328 	ldw	x, #0x5217
      0000D9 F6               [ 1]  329 	ld	a, (x)
      0000DA 48               [ 1]  330 	sll	a
      0000DB 24 F9            [ 1]  331 	jrnc	00101$
      0000DD 5B 02            [ 2]  332 	addw	sp, #2
      0000DF 81               [ 4]  333 	ret
                                    334 ;	ds18b20.c: 79: void UARTPrintF (char *message) {
                                    335 ;	-----------------------------------------
                                    336 ;	 function UARTPrintF
                                    337 ;	-----------------------------------------
      0000E0                        338 _UARTPrintF:
                                    339 ;	ds18b20.c: 80: char *ch = message;
      0000E0 16 03            [ 2]  340 	ldw	y, (0x03, sp)
                                    341 ;	ds18b20.c: 81: while (*ch) {
      0000E2                        342 00104$:
      0000E2 90 F6            [ 1]  343 	ld	a, (y)
      0000E4 4D               [ 1]  344 	tnz	a
      0000E5 27 0F            [ 1]  345 	jreq	00107$
                                    346 ;	ds18b20.c: 82: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0000E7 AE 52 31         [ 2]  347 	ldw	x, #0x5231
      0000EA F7               [ 1]  348 	ld	(x), a
                                    349 ;	ds18b20.c: 83: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0000EB                        350 00101$:
      0000EB AE 52 30         [ 2]  351 	ldw	x, #0x5230
      0000EE F6               [ 1]  352 	ld	a, (x)
      0000EF 48               [ 1]  353 	sll	a
      0000F0 24 F9            [ 1]  354 	jrnc	00101$
                                    355 ;	ds18b20.c: 84: ch++;                               //  Grab the next character.
      0000F2 90 5C            [ 2]  356 	incw	y
      0000F4 20 EC            [ 2]  357 	jra	00104$
      0000F6                        358 00107$:
      0000F6 81               [ 4]  359 	ret
                                    360 ;	ds18b20.c: 90: void i2c_send_address (UCHAR addr, UCHAR mode) {
                                    361 ;	-----------------------------------------
                                    362 ;	 function i2c_send_address
                                    363 ;	-----------------------------------------
      0000F7                        364 _i2c_send_address:
      0000F7 52 03            [ 2]  365 	sub	sp, #3
                                    366 ;	ds18b20.c: 92: reg = I2C_SR1;
      0000F9 AE 52 17         [ 2]  367 	ldw	x, #0x5217
      0000FC F6               [ 1]  368 	ld	a, (x)
      0000FD 5F               [ 1]  369 	clrw	x
      0000FE 97               [ 1]  370 	ld	xl, a
      0000FF 1F 01            [ 2]  371 	ldw	(0x01, sp), x
                                    372 ;	ds18b20.c: 93: I2C_DR = (addr << 1) | mode;
      000101 7B 06            [ 1]  373 	ld	a, (0x06, sp)
      000103 48               [ 1]  374 	sll	a
      000104 1A 07            [ 1]  375 	or	a, (0x07, sp)
      000106 AE 52 16         [ 2]  376 	ldw	x, #0x5216
      000109 F7               [ 1]  377 	ld	(x), a
                                    378 ;	ds18b20.c: 94: if (mode == I2C_READ) {
      00010A 7B 07            [ 1]  379 	ld	a, (0x07, sp)
      00010C A1 01            [ 1]  380 	cp	a, #0x01
      00010E 26 06            [ 1]  381 	jrne	00127$
      000110 A6 01            [ 1]  382 	ld	a, #0x01
      000112 6B 03            [ 1]  383 	ld	(0x03, sp), a
      000114 20 02            [ 2]  384 	jra	00128$
      000116                        385 00127$:
      000116 0F 03            [ 1]  386 	clr	(0x03, sp)
      000118                        387 00128$:
      000118 0D 03            [ 1]  388 	tnz	(0x03, sp)
      00011A 27 08            [ 1]  389 	jreq	00103$
                                    390 ;	ds18b20.c: 95: I2C_OARL = 0;
      00011C AE 52 13         [ 2]  391 	ldw	x, #0x5213
      00011F 7F               [ 1]  392 	clr	(x)
                                    393 ;	ds18b20.c: 96: I2C_OARH = 0;
      000120 AE 52 14         [ 2]  394 	ldw	x, #0x5214
      000123 7F               [ 1]  395 	clr	(x)
                                    396 ;	ds18b20.c: 99: while ((I2C_SR1 & I2C_ADDR) == 0);
      000124                        397 00103$:
                                    398 ;	ds18b20.c: 92: reg = I2C_SR1;
      000124 AE 52 17         [ 2]  399 	ldw	x, #0x5217
      000127 F6               [ 1]  400 	ld	a, (x)
                                    401 ;	ds18b20.c: 99: while ((I2C_SR1 & I2C_ADDR) == 0);
      000128 A5 02            [ 1]  402 	bcp	a, #0x02
      00012A 27 F8            [ 1]  403 	jreq	00103$
                                    404 ;	ds18b20.c: 100: if (mode == I2C_READ)
      00012C 0D 03            [ 1]  405 	tnz	(0x03, sp)
      00012E 27 06            [ 1]  406 	jreq	00108$
                                    407 ;	ds18b20.c: 101: UNSET (I2C_SR1, I2C_ADDR);
      000130 A4 FD            [ 1]  408 	and	a, #0xfd
      000132 AE 52 17         [ 2]  409 	ldw	x, #0x5217
      000135 F7               [ 1]  410 	ld	(x), a
      000136                        411 00108$:
      000136 5B 03            [ 2]  412 	addw	sp, #3
      000138 81               [ 4]  413 	ret
                                    414 ;	ds18b20.c: 104: void i2c_set_start_ack (void) {
                                    415 ;	-----------------------------------------
                                    416 ;	 function i2c_set_start_ack
                                    417 ;	-----------------------------------------
      000139                        418 _i2c_set_start_ack:
                                    419 ;	ds18b20.c: 105: I2C_CR2 = I2C_ACK | I2C_START;
      000139 AE 52 11         [ 2]  420 	ldw	x, #0x5211
      00013C A6 05            [ 1]  421 	ld	a, #0x05
      00013E F7               [ 1]  422 	ld	(x), a
                                    423 ;	ds18b20.c: 106: while ((I2C_SR1 & I2C_SB) == 0);
      00013F                        424 00101$:
      00013F AE 52 17         [ 2]  425 	ldw	x, #0x5217
      000142 F6               [ 1]  426 	ld	a, (x)
      000143 44               [ 1]  427 	srl	a
      000144 24 F9            [ 1]  428 	jrnc	00101$
      000146 81               [ 4]  429 	ret
                                    430 ;	ds18b20.c: 113: void print_byte_hex (unsigned char buffer) {
                                    431 ;	-----------------------------------------
                                    432 ;	 function print_byte_hex
                                    433 ;	-----------------------------------------
      000147                        434 _print_byte_hex:
      000147 52 0C            [ 2]  435 	sub	sp, #12
                                    436 ;	ds18b20.c: 116: a = (buffer >> 4);
      000149 7B 0F            [ 1]  437 	ld	a, (0x0f, sp)
      00014B 4E               [ 1]  438 	swap	a
      00014C A4 0F            [ 1]  439 	and	a, #0x0f
      00014E 5F               [ 1]  440 	clrw	x
      00014F 97               [ 1]  441 	ld	xl, a
                                    442 ;	ds18b20.c: 117: if (a > 9)
      000150 A3 00 09         [ 2]  443 	cpw	x, #0x0009
      000153 2D 07            [ 1]  444 	jrsle	00102$
                                    445 ;	ds18b20.c: 118: a = a + 'a' - 10;
      000155 1C 00 57         [ 2]  446 	addw	x, #0x0057
      000158 1F 03            [ 2]  447 	ldw	(0x03, sp), x
      00015A 20 05            [ 2]  448 	jra	00103$
      00015C                        449 00102$:
                                    450 ;	ds18b20.c: 120: a += '0'; 
      00015C 1C 00 30         [ 2]  451 	addw	x, #0x0030
      00015F 1F 03            [ 2]  452 	ldw	(0x03, sp), x
      000161                        453 00103$:
                                    454 ;	ds18b20.c: 121: b = buffer & 0x0f;
      000161 7B 0F            [ 1]  455 	ld	a, (0x0f, sp)
      000163 A4 0F            [ 1]  456 	and	a, #0x0f
      000165 5F               [ 1]  457 	clrw	x
      000166 97               [ 1]  458 	ld	xl, a
                                    459 ;	ds18b20.c: 122: if (b > 9)
      000167 A3 00 09         [ 2]  460 	cpw	x, #0x0009
      00016A 2D 07            [ 1]  461 	jrsle	00105$
                                    462 ;	ds18b20.c: 123: b = b + 'a' - 10;
      00016C 1C 00 57         [ 2]  463 	addw	x, #0x0057
      00016F 1F 01            [ 2]  464 	ldw	(0x01, sp), x
      000171 20 05            [ 2]  465 	jra	00106$
      000173                        466 00105$:
                                    467 ;	ds18b20.c: 125: b += '0'; 
      000173 1C 00 30         [ 2]  468 	addw	x, #0x0030
      000176 1F 01            [ 2]  469 	ldw	(0x01, sp), x
      000178                        470 00106$:
                                    471 ;	ds18b20.c: 126: message[0] = a;
      000178 90 96            [ 1]  472 	ldw	y, sp
      00017A 72 A9 00 05      [ 2]  473 	addw	y, #5
      00017E 7B 04            [ 1]  474 	ld	a, (0x04, sp)
      000180 90 F7            [ 1]  475 	ld	(y), a
                                    476 ;	ds18b20.c: 127: message[1] = b;
      000182 93               [ 1]  477 	ldw	x, y
      000183 5C               [ 2]  478 	incw	x
      000184 7B 02            [ 1]  479 	ld	a, (0x02, sp)
      000186 F7               [ 1]  480 	ld	(x), a
                                    481 ;	ds18b20.c: 128: message[2] = 0;
      000187 93               [ 1]  482 	ldw	x, y
      000188 5C               [ 2]  483 	incw	x
      000189 5C               [ 2]  484 	incw	x
      00018A 7F               [ 1]  485 	clr	(x)
                                    486 ;	ds18b20.c: 129: UARTPrintF (message);
      00018B 90 89            [ 2]  487 	pushw	y
      00018D CDr00rE0         [ 4]  488 	call	_UARTPrintF
      000190 5B 02            [ 2]  489 	addw	sp, #2
      000192 5B 0C            [ 2]  490 	addw	sp, #12
      000194 81               [ 4]  491 	ret
                                    492 ;	ds18b20.c: 133: unsigned char i2c_read_register (UCHAR addr, UCHAR rg) {
                                    493 ;	-----------------------------------------
                                    494 ;	 function i2c_read_register
                                    495 ;	-----------------------------------------
      000195                        496 _i2c_read_register:
      000195 52 02            [ 2]  497 	sub	sp, #2
                                    498 ;	ds18b20.c: 136: i2c_set_start_ack ();
      000197 CDr01r39         [ 4]  499 	call	_i2c_set_start_ack
                                    500 ;	ds18b20.c: 137: i2c_send_address (addr, I2C_WRITE);
      00019A 4B 00            [ 1]  501 	push	#0x00
      00019C 7B 06            [ 1]  502 	ld	a, (0x06, sp)
      00019E 88               [ 1]  503 	push	a
      00019F CDr00rF7         [ 4]  504 	call	_i2c_send_address
      0001A2 5B 02            [ 2]  505 	addw	sp, #2
                                    506 ;	ds18b20.c: 138: i2c_send_reg (rg);
      0001A4 7B 06            [ 1]  507 	ld	a, (0x06, sp)
      0001A6 88               [ 1]  508 	push	a
      0001A7 CDr00rBE         [ 4]  509 	call	_i2c_send_reg
      0001AA 84               [ 1]  510 	pop	a
                                    511 ;	ds18b20.c: 139: i2c_set_start_ack ();
      0001AB CDr01r39         [ 4]  512 	call	_i2c_set_start_ack
                                    513 ;	ds18b20.c: 140: i2c_send_address (addr, I2C_READ);
      0001AE 4B 01            [ 1]  514 	push	#0x01
      0001B0 7B 06            [ 1]  515 	ld	a, (0x06, sp)
      0001B2 88               [ 1]  516 	push	a
      0001B3 CDr00rF7         [ 4]  517 	call	_i2c_send_address
      0001B6 5B 02            [ 2]  518 	addw	sp, #2
                                    519 ;	ds18b20.c: 141: reg = I2C_SR1;
      0001B8 AE 52 17         [ 2]  520 	ldw	x, #0x5217
      0001BB F6               [ 1]  521 	ld	a, (x)
      0001BC 6B 01            [ 1]  522 	ld	(0x01, sp), a
                                    523 ;	ds18b20.c: 142: reg = I2C_SR3;
      0001BE AE 52 19         [ 2]  524 	ldw	x, #0x5219
      0001C1 F6               [ 1]  525 	ld	a, (x)
      0001C2 6B 01            [ 1]  526 	ld	(0x01, sp), a
                                    527 ;	ds18b20.c: 143: i2c_set_nak ();
      0001C4 CDr00rAE         [ 4]  528 	call	_i2c_set_nak
                                    529 ;	ds18b20.c: 144: i2c_set_stop ();
      0001C7 CDr00rB6         [ 4]  530 	call	_i2c_set_stop
                                    531 ;	ds18b20.c: 145: i2c_read (&x);
      0001CA 96               [ 1]  532 	ldw	x, sp
      0001CB 5C               [ 2]  533 	incw	x
      0001CC 5C               [ 2]  534 	incw	x
      0001CD 89               [ 2]  535 	pushw	x
      0001CE CDr00r9D         [ 4]  536 	call	_i2c_read
      0001D1 5B 02            [ 2]  537 	addw	sp, #2
                                    538 ;	ds18b20.c: 146: return (x);
      0001D3 7B 02            [ 1]  539 	ld	a, (0x02, sp)
      0001D5 5B 02            [ 2]  540 	addw	sp, #2
      0001D7 81               [ 4]  541 	ret
                                    542 ;	ds18b20.c: 149: void InitializeI2C (void) {
                                    543 ;	-----------------------------------------
                                    544 ;	 function InitializeI2C
                                    545 ;	-----------------------------------------
      0001D8                        546 _InitializeI2C:
                                    547 ;	ds18b20.c: 150: I2C_CR1 = 0;   //  Disable I2C before configuration starts. PE bit is bit 0
      0001D8 AE 52 10         [ 2]  548 	ldw	x, #0x5210
      0001DB 7F               [ 1]  549 	clr	(x)
                                    550 ;	ds18b20.c: 154: I2C_FREQR = 16;                     //  Set the internal clock frequency (MHz).
      0001DC AE 52 12         [ 2]  551 	ldw	x, #0x5212
      0001DF A6 10            [ 1]  552 	ld	a, #0x10
      0001E1 F7               [ 1]  553 	ld	(x), a
                                    554 ;	ds18b20.c: 155: UNSET (I2C_CCRH, I2C_FS);           //  I2C running is standard mode.
      0001E2 72 17 52 1C      [ 1]  555 	bres	0x521c, #7
                                    556 ;	ds18b20.c: 157: I2C_CCRL = 0xa0;                    //  SCL clock speed is 50 kHz.
      0001E6 AE 52 1B         [ 2]  557 	ldw	x, #0x521b
      0001E9 A6 A0            [ 1]  558 	ld	a, #0xa0
      0001EB F7               [ 1]  559 	ld	(x), a
                                    560 ;	ds18b20.c: 159: I2C_CCRH &= 0x00;	// Clears lower 4 bits "CCR"
      0001EC AE 52 1C         [ 2]  561 	ldw	x, #0x521c
      0001EF 7F               [ 1]  562 	clr	(x)
                                    563 ;	ds18b20.c: 163: UNSET (I2C_OARH, I2C_ADDMODE);      //  7 bit address mode.
      0001F0 72 17 52 14      [ 1]  564 	bres	0x5214, #7
                                    565 ;	ds18b20.c: 164: SET (I2C_OARH, I2C_ADDCONF);        //  Docs say this must always be 1.
      0001F4 AE 52 14         [ 2]  566 	ldw	x, #0x5214
      0001F7 F6               [ 1]  567 	ld	a, (x)
      0001F8 AA 40            [ 1]  568 	or	a, #0x40
      0001FA F7               [ 1]  569 	ld	(x), a
                                    570 ;	ds18b20.c: 168: I2C_TRISER = 17;
      0001FB AE 52 1D         [ 2]  571 	ldw	x, #0x521d
      0001FE A6 11            [ 1]  572 	ld	a, #0x11
      000200 F7               [ 1]  573 	ld	(x), a
                                    574 ;	ds18b20.c: 176: I2C_CR1 = I2C_PE;	// Enables port
      000201 AE 52 10         [ 2]  575 	ldw	x, #0x5210
      000204 A6 01            [ 1]  576 	ld	a, #0x01
      000206 F7               [ 1]  577 	ld	(x), a
      000207 81               [ 4]  578 	ret
                                    579 ;	ds18b20.c: 182: void InitializeUART() {
                                    580 ;	-----------------------------------------
                                    581 ;	 function InitializeUART
                                    582 ;	-----------------------------------------
      000208                        583 _InitializeUART:
                                    584 ;	ds18b20.c: 192: UART1_CR1 = 0;
      000208 AE 52 34         [ 2]  585 	ldw	x, #0x5234
      00020B 7F               [ 1]  586 	clr	(x)
                                    587 ;	ds18b20.c: 193: UART1_CR2 = 0;
      00020C AE 52 35         [ 2]  588 	ldw	x, #0x5235
      00020F 7F               [ 1]  589 	clr	(x)
                                    590 ;	ds18b20.c: 194: UART1_CR4 = 0;
      000210 AE 52 37         [ 2]  591 	ldw	x, #0x5237
      000213 7F               [ 1]  592 	clr	(x)
                                    593 ;	ds18b20.c: 195: UART1_CR3 = 0;
      000214 AE 52 36         [ 2]  594 	ldw	x, #0x5236
      000217 7F               [ 1]  595 	clr	(x)
                                    596 ;	ds18b20.c: 196: UART1_CR5 = 0;
      000218 AE 52 38         [ 2]  597 	ldw	x, #0x5238
      00021B 7F               [ 1]  598 	clr	(x)
                                    599 ;	ds18b20.c: 197: UART1_GTR = 0;
      00021C AE 52 39         [ 2]  600 	ldw	x, #0x5239
      00021F 7F               [ 1]  601 	clr	(x)
                                    602 ;	ds18b20.c: 198: UART1_PSCR = 0;
      000220 AE 52 3A         [ 2]  603 	ldw	x, #0x523a
      000223 7F               [ 1]  604 	clr	(x)
                                    605 ;	ds18b20.c: 202: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      000224 AE 52 34         [ 2]  606 	ldw	x, #0x5234
      000227 F6               [ 1]  607 	ld	a, (x)
      000228 A4 EF            [ 1]  608 	and	a, #0xef
      00022A F7               [ 1]  609 	ld	(x), a
                                    610 ;	ds18b20.c: 203: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      00022B AE 52 34         [ 2]  611 	ldw	x, #0x5234
      00022E F6               [ 1]  612 	ld	a, (x)
      00022F A4 FB            [ 1]  613 	and	a, #0xfb
      000231 F7               [ 1]  614 	ld	(x), a
                                    615 ;	ds18b20.c: 204: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000232 AE 52 36         [ 2]  616 	ldw	x, #0x5236
      000235 F6               [ 1]  617 	ld	a, (x)
      000236 A4 DF            [ 1]  618 	and	a, #0xdf
      000238 F7               [ 1]  619 	ld	(x), a
                                    620 ;	ds18b20.c: 205: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      000239 AE 52 36         [ 2]  621 	ldw	x, #0x5236
      00023C F6               [ 1]  622 	ld	a, (x)
      00023D A4 EF            [ 1]  623 	and	a, #0xef
      00023F F7               [ 1]  624 	ld	(x), a
                                    625 ;	ds18b20.c: 206: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      000240 AE 52 33         [ 2]  626 	ldw	x, #0x5233
      000243 A6 0A            [ 1]  627 	ld	a, #0x0a
      000245 F7               [ 1]  628 	ld	(x), a
                                    629 ;	ds18b20.c: 207: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      000246 AE 52 32         [ 2]  630 	ldw	x, #0x5232
      000249 A6 08            [ 1]  631 	ld	a, #0x08
      00024B F7               [ 1]  632 	ld	(x), a
                                    633 ;	ds18b20.c: 211: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      00024C AE 52 35         [ 2]  634 	ldw	x, #0x5235
      00024F F6               [ 1]  635 	ld	a, (x)
      000250 A4 F7            [ 1]  636 	and	a, #0xf7
      000252 F7               [ 1]  637 	ld	(x), a
                                    638 ;	ds18b20.c: 212: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      000253 AE 52 35         [ 2]  639 	ldw	x, #0x5235
      000256 F6               [ 1]  640 	ld	a, (x)
      000257 A4 FB            [ 1]  641 	and	a, #0xfb
      000259 F7               [ 1]  642 	ld	(x), a
                                    643 ;	ds18b20.c: 216: SET (UART1_CR3, CR3_CPOL);
      00025A AE 52 36         [ 2]  644 	ldw	x, #0x5236
      00025D F6               [ 1]  645 	ld	a, (x)
      00025E AA 04            [ 1]  646 	or	a, #0x04
      000260 F7               [ 1]  647 	ld	(x), a
                                    648 ;	ds18b20.c: 217: SET (UART1_CR3, CR3_CPHA);
      000261 AE 52 36         [ 2]  649 	ldw	x, #0x5236
      000264 F6               [ 1]  650 	ld	a, (x)
      000265 AA 02            [ 1]  651 	or	a, #0x02
      000267 F7               [ 1]  652 	ld	(x), a
                                    653 ;	ds18b20.c: 218: SET (UART1_CR3, CR3_LBCL);
      000268 72 10 52 36      [ 1]  654 	bset	0x5236, #0
                                    655 ;	ds18b20.c: 222: SET (UART1_CR2, CR2_TEN);
      00026C AE 52 35         [ 2]  656 	ldw	x, #0x5235
      00026F F6               [ 1]  657 	ld	a, (x)
      000270 AA 08            [ 1]  658 	or	a, #0x08
      000272 F7               [ 1]  659 	ld	(x), a
                                    660 ;	ds18b20.c: 223: SET (UART1_CR2, CR2_REN);
      000273 AE 52 35         [ 2]  661 	ldw	x, #0x5235
      000276 F6               [ 1]  662 	ld	a, (x)
      000277 AA 04            [ 1]  663 	or	a, #0x04
      000279 F7               [ 1]  664 	ld	(x), a
                                    665 ;	ds18b20.c: 224: UART1_CR3 = CR3_CLKEN;
      00027A AE 52 36         [ 2]  666 	ldw	x, #0x5236
      00027D A6 08            [ 1]  667 	ld	a, #0x08
      00027F F7               [ 1]  668 	ld	(x), a
      000280 81               [ 4]  669 	ret
                                    670 ;	ds18b20.c: 252: void tm1637Init(void)
                                    671 ;	-----------------------------------------
                                    672 ;	 function tm1637Init
                                    673 ;	-----------------------------------------
      000281                        674 _tm1637Init:
                                    675 ;	ds18b20.c: 254: tm1637SetBrightness(8);
      000281 4B 08            [ 1]  676 	push	#0x08
      000283 CDr03r26         [ 4]  677 	call	_tm1637SetBrightness
      000286 84               [ 1]  678 	pop	a
      000287 81               [ 4]  679 	ret
                                    680 ;	ds18b20.c: 259: void tm1637DisplayDecimal(long TT,unsigned int displaySeparator)
                                    681 ;	-----------------------------------------
                                    682 ;	 function tm1637DisplayDecimal
                                    683 ;	-----------------------------------------
      000288                        684 _tm1637DisplayDecimal:
      000288 52 13            [ 2]  685 	sub	sp, #19
                                    686 ;	ds18b20.c: 261: unsigned int v = TT & 0x0000FFFF;
      00028A 7B 19            [ 1]  687 	ld	a, (0x19, sp)
      00028C 97               [ 1]  688 	ld	xl, a
      00028D 7B 18            [ 1]  689 	ld	a, (0x18, sp)
      00028F 95               [ 1]  690 	ld	xh, a
      000290 0F 11            [ 1]  691 	clr	(0x11, sp)
      000292 4F               [ 1]  692 	clr	a
      000293 1F 05            [ 2]  693 	ldw	(0x05, sp), x
                                    694 ;	ds18b20.c: 267: for (ii = 0; ii < 4; ++ii) {
      000295 96               [ 1]  695 	ldw	x, sp
      000296 5C               [ 2]  696 	incw	x
      000297 1F 0A            [ 2]  697 	ldw	(0x0a, sp), x
      000299 AEr06rDB         [ 2]  698 	ldw	x, #_segmentMap+0
      00029C 1F 0E            [ 2]  699 	ldw	(0x0e, sp), x
      00029E 90 5F            [ 1]  700 	clrw	y
      0002A0                        701 00106$:
                                    702 ;	ds18b20.c: 268: digitArr[ii] = segmentMap[v % 10];
      0002A0 93               [ 1]  703 	ldw	x, y
      0002A1 72 FB 0A         [ 2]  704 	addw	x, (0x0a, sp)
      0002A4 1F 0C            [ 2]  705 	ldw	(0x0c, sp), x
      0002A6 90 89            [ 2]  706 	pushw	y
      0002A8 1E 07            [ 2]  707 	ldw	x, (0x07, sp)
      0002AA 90 AE 00 0A      [ 2]  708 	ldw	y, #0x000a
      0002AE 65               [ 2]  709 	divw	x, y
      0002AF 93               [ 1]  710 	ldw	x, y
      0002B0 90 85            [ 2]  711 	popw	y
      0002B2 72 FB 0E         [ 2]  712 	addw	x, (0x0e, sp)
      0002B5 F6               [ 1]  713 	ld	a, (x)
      0002B6 1E 0C            [ 2]  714 	ldw	x, (0x0c, sp)
      0002B8 F7               [ 1]  715 	ld	(x), a
                                    716 ;	ds18b20.c: 269: if (ii == 2 && displaySeparator) {
      0002B9 90 A3 00 02      [ 2]  717 	cpw	y, #0x0002
      0002BD 26 0C            [ 1]  718 	jrne	00102$
      0002BF 1E 1A            [ 2]  719 	ldw	x, (0x1a, sp)
      0002C1 27 08            [ 1]  720 	jreq	00102$
                                    721 ;	ds18b20.c: 270: digitArr[ii] |= 1 << 7;
      0002C3 1E 0C            [ 2]  722 	ldw	x, (0x0c, sp)
      0002C5 F6               [ 1]  723 	ld	a, (x)
      0002C6 AA 80            [ 1]  724 	or	a, #0x80
      0002C8 1E 0C            [ 2]  725 	ldw	x, (0x0c, sp)
      0002CA F7               [ 1]  726 	ld	(x), a
      0002CB                        727 00102$:
                                    728 ;	ds18b20.c: 272: v /= 10;
      0002CB 90 89            [ 2]  729 	pushw	y
      0002CD 1E 07            [ 2]  730 	ldw	x, (0x07, sp)
      0002CF 90 AE 00 0A      [ 2]  731 	ldw	y, #0x000a
      0002D3 65               [ 2]  732 	divw	x, y
      0002D4 90 85            [ 2]  733 	popw	y
      0002D6 1F 05            [ 2]  734 	ldw	(0x05, sp), x
                                    735 ;	ds18b20.c: 267: for (ii = 0; ii < 4; ++ii) {
      0002D8 90 5C            [ 2]  736 	incw	y
      0002DA 90 A3 00 04      [ 2]  737 	cpw	y, #0x0004
      0002DE 25 C0            [ 1]  738 	jrc	00106$
                                    739 ;	ds18b20.c: 275: _tm1637Start();
      0002E0 CDr03r38         [ 4]  740 	call	__tm1637Start
                                    741 ;	ds18b20.c: 276: _tm1637WriteByte(0x40);
      0002E3 4B 40            [ 1]  742 	push	#0x40
      0002E5 CDr03r8C         [ 4]  743 	call	__tm1637WriteByte
      0002E8 84               [ 1]  744 	pop	a
                                    745 ;	ds18b20.c: 277: _tm1637ReadResult();
      0002E9 CDr03r71         [ 4]  746 	call	__tm1637ReadResult
                                    747 ;	ds18b20.c: 278: _tm1637Stop();
      0002EC CDr03r4A         [ 4]  748 	call	__tm1637Stop
                                    749 ;	ds18b20.c: 280: _tm1637Start();
      0002EF CDr03r38         [ 4]  750 	call	__tm1637Start
                                    751 ;	ds18b20.c: 281: _tm1637WriteByte(0xc0);
      0002F2 4B C0            [ 1]  752 	push	#0xc0
      0002F4 CDr03r8C         [ 4]  753 	call	__tm1637WriteByte
      0002F7 84               [ 1]  754 	pop	a
                                    755 ;	ds18b20.c: 282: _tm1637ReadResult();
      0002F8 CDr03r71         [ 4]  756 	call	__tm1637ReadResult
                                    757 ;	ds18b20.c: 284: for (ii = 0; ii < 4; ++ii) {
      0002FB 5F               [ 1]  758 	clrw	x
      0002FC 1F 07            [ 2]  759 	ldw	(0x07, sp), x
      0002FE                        760 00108$:
                                    761 ;	ds18b20.c: 285: _tm1637WriteByte(digitArr[3 - ii]);
      0002FE 7B 08            [ 1]  762 	ld	a, (0x08, sp)
      000300 6B 09            [ 1]  763 	ld	(0x09, sp), a
      000302 A6 03            [ 1]  764 	ld	a, #0x03
      000304 10 09            [ 1]  765 	sub	a, (0x09, sp)
      000306 5F               [ 1]  766 	clrw	x
      000307 97               [ 1]  767 	ld	xl, a
      000308 72 FB 0A         [ 2]  768 	addw	x, (0x0a, sp)
      00030B F6               [ 1]  769 	ld	a, (x)
      00030C 88               [ 1]  770 	push	a
      00030D CDr03r8C         [ 4]  771 	call	__tm1637WriteByte
      000310 84               [ 1]  772 	pop	a
                                    773 ;	ds18b20.c: 286: _tm1637ReadResult();
      000311 CDr03r71         [ 4]  774 	call	__tm1637ReadResult
                                    775 ;	ds18b20.c: 284: for (ii = 0; ii < 4; ++ii) {
      000314 1E 07            [ 2]  776 	ldw	x, (0x07, sp)
      000316 5C               [ 2]  777 	incw	x
      000317 1F 07            [ 2]  778 	ldw	(0x07, sp), x
      000319 1E 07            [ 2]  779 	ldw	x, (0x07, sp)
      00031B A3 00 04         [ 2]  780 	cpw	x, #0x0004
      00031E 25 DE            [ 1]  781 	jrc	00108$
                                    782 ;	ds18b20.c: 289: _tm1637Stop();
      000320 CDr03r4A         [ 4]  783 	call	__tm1637Stop
      000323 5B 13            [ 2]  784 	addw	sp, #19
      000325 81               [ 4]  785 	ret
                                    786 ;	ds18b20.c: 294: void tm1637SetBrightness(char brightness)
                                    787 ;	-----------------------------------------
                                    788 ;	 function tm1637SetBrightness
                                    789 ;	-----------------------------------------
      000326                        790 _tm1637SetBrightness:
                                    791 ;	ds18b20.c: 301: _tm1637Start();
      000326 CDr03r38         [ 4]  792 	call	__tm1637Start
                                    793 ;	ds18b20.c: 302: _tm1637WriteByte(0x87 + brightness);
      000329 7B 03            [ 1]  794 	ld	a, (0x03, sp)
      00032B AB 87            [ 1]  795 	add	a, #0x87
      00032D 88               [ 1]  796 	push	a
      00032E CDr03r8C         [ 4]  797 	call	__tm1637WriteByte
      000331 84               [ 1]  798 	pop	a
                                    799 ;	ds18b20.c: 303: _tm1637ReadResult();
      000332 CDr03r71         [ 4]  800 	call	__tm1637ReadResult
                                    801 ;	ds18b20.c: 304: _tm1637Stop();
      000335 CCr03r4A         [ 2]  802 	jp	__tm1637Stop
                                    803 ;	ds18b20.c: 307: void _tm1637Start(void)
                                    804 ;	-----------------------------------------
                                    805 ;	 function _tm1637Start
                                    806 ;	-----------------------------------------
      000338                        807 __tm1637Start:
                                    808 ;	ds18b20.c: 309: _tm1637ClkHigh();
      000338 CDr03rCA         [ 4]  809 	call	__tm1637ClkHigh
                                    810 ;	ds18b20.c: 310: _tm1637DioHigh();
      00033B CDr03rDA         [ 4]  811 	call	__tm1637DioHigh
                                    812 ;	ds18b20.c: 311: delay(5);
      00033E 4B 05            [ 1]  813 	push	#0x05
      000340 4B 00            [ 1]  814 	push	#0x00
      000342 CDr00r52         [ 4]  815 	call	_delay
      000345 5B 02            [ 2]  816 	addw	sp, #2
                                    817 ;	ds18b20.c: 312: _tm1637DioLow();
      000347 CCr03rE2         [ 2]  818 	jp	__tm1637DioLow
                                    819 ;	ds18b20.c: 315: void _tm1637Stop(void)
                                    820 ;	-----------------------------------------
                                    821 ;	 function _tm1637Stop
                                    822 ;	-----------------------------------------
      00034A                        823 __tm1637Stop:
                                    824 ;	ds18b20.c: 317: _tm1637ClkLow();
      00034A CDr03rD2         [ 4]  825 	call	__tm1637ClkLow
                                    826 ;	ds18b20.c: 318: delay(5);
      00034D 4B 05            [ 1]  827 	push	#0x05
      00034F 4B 00            [ 1]  828 	push	#0x00
      000351 CDr00r52         [ 4]  829 	call	_delay
      000354 5B 02            [ 2]  830 	addw	sp, #2
                                    831 ;	ds18b20.c: 319: _tm1637DioLow();
      000356 CDr03rE2         [ 4]  832 	call	__tm1637DioLow
                                    833 ;	ds18b20.c: 320: delay(5);
      000359 4B 05            [ 1]  834 	push	#0x05
      00035B 4B 00            [ 1]  835 	push	#0x00
      00035D CDr00r52         [ 4]  836 	call	_delay
      000360 5B 02            [ 2]  837 	addw	sp, #2
                                    838 ;	ds18b20.c: 321: _tm1637ClkHigh();
      000362 CDr03rCA         [ 4]  839 	call	__tm1637ClkHigh
                                    840 ;	ds18b20.c: 322: delay(5);
      000365 4B 05            [ 1]  841 	push	#0x05
      000367 4B 00            [ 1]  842 	push	#0x00
      000369 CDr00r52         [ 4]  843 	call	_delay
      00036C 5B 02            [ 2]  844 	addw	sp, #2
                                    845 ;	ds18b20.c: 323: _tm1637DioHigh();
      00036E CCr03rDA         [ 2]  846 	jp	__tm1637DioHigh
                                    847 ;	ds18b20.c: 326: void _tm1637ReadResult(void)
                                    848 ;	-----------------------------------------
                                    849 ;	 function _tm1637ReadResult
                                    850 ;	-----------------------------------------
      000371                        851 __tm1637ReadResult:
                                    852 ;	ds18b20.c: 328: _tm1637ClkLow();
      000371 CDr03rD2         [ 4]  853 	call	__tm1637ClkLow
                                    854 ;	ds18b20.c: 329: delay(5);
      000374 4B 05            [ 1]  855 	push	#0x05
      000376 4B 00            [ 1]  856 	push	#0x00
      000378 CDr00r52         [ 4]  857 	call	_delay
      00037B 5B 02            [ 2]  858 	addw	sp, #2
                                    859 ;	ds18b20.c: 331: _tm1637ClkHigh();
      00037D CDr03rCA         [ 4]  860 	call	__tm1637ClkHigh
                                    861 ;	ds18b20.c: 332: delay(5);
      000380 4B 05            [ 1]  862 	push	#0x05
      000382 4B 00            [ 1]  863 	push	#0x00
      000384 CDr00r52         [ 4]  864 	call	_delay
      000387 5B 02            [ 2]  865 	addw	sp, #2
                                    866 ;	ds18b20.c: 333: _tm1637ClkLow();
      000389 CCr03rD2         [ 2]  867 	jp	__tm1637ClkLow
                                    868 ;	ds18b20.c: 336: void _tm1637WriteByte(unsigned char b)
                                    869 ;	-----------------------------------------
                                    870 ;	 function _tm1637WriteByte
                                    871 ;	-----------------------------------------
      00038C                        872 __tm1637WriteByte:
      00038C 52 02            [ 2]  873 	sub	sp, #2
                                    874 ;	ds18b20.c: 338: for (ii = 0; ii < 8; ++ii) {
      00038E 5F               [ 1]  875 	clrw	x
      00038F 1F 01            [ 2]  876 	ldw	(0x01, sp), x
      000391                        877 00105$:
                                    878 ;	ds18b20.c: 339: _tm1637ClkLow();
      000391 CDr03rD2         [ 4]  879 	call	__tm1637ClkLow
                                    880 ;	ds18b20.c: 340: if (b & 0x01) {
      000394 7B 05            [ 1]  881 	ld	a, (0x05, sp)
      000396 44               [ 1]  882 	srl	a
      000397 24 05            [ 1]  883 	jrnc	00102$
                                    884 ;	ds18b20.c: 341: _tm1637DioHigh();
      000399 CDr03rDA         [ 4]  885 	call	__tm1637DioHigh
      00039C 20 03            [ 2]  886 	jra	00103$
      00039E                        887 00102$:
                                    888 ;	ds18b20.c: 344: _tm1637DioLow();
      00039E CDr03rE2         [ 4]  889 	call	__tm1637DioLow
      0003A1                        890 00103$:
                                    891 ;	ds18b20.c: 346: delay(15);
      0003A1 4B 0F            [ 1]  892 	push	#0x0f
      0003A3 4B 00            [ 1]  893 	push	#0x00
      0003A5 CDr00r52         [ 4]  894 	call	_delay
      0003A8 5B 02            [ 2]  895 	addw	sp, #2
                                    896 ;	ds18b20.c: 347: b >>= 1;
      0003AA 7B 05            [ 1]  897 	ld	a, (0x05, sp)
      0003AC 44               [ 1]  898 	srl	a
      0003AD 6B 05            [ 1]  899 	ld	(0x05, sp), a
                                    900 ;	ds18b20.c: 348: _tm1637ClkHigh();
      0003AF CDr03rCA         [ 4]  901 	call	__tm1637ClkHigh
                                    902 ;	ds18b20.c: 349: delay(15);
      0003B2 4B 0F            [ 1]  903 	push	#0x0f
      0003B4 4B 00            [ 1]  904 	push	#0x00
      0003B6 CDr00r52         [ 4]  905 	call	_delay
      0003B9 5B 02            [ 2]  906 	addw	sp, #2
                                    907 ;	ds18b20.c: 338: for (ii = 0; ii < 8; ++ii) {
      0003BB 1E 01            [ 2]  908 	ldw	x, (0x01, sp)
      0003BD 5C               [ 2]  909 	incw	x
      0003BE 1F 01            [ 2]  910 	ldw	(0x01, sp), x
      0003C0 1E 01            [ 2]  911 	ldw	x, (0x01, sp)
      0003C2 A3 00 08         [ 2]  912 	cpw	x, #0x0008
      0003C5 2F CA            [ 1]  913 	jrslt	00105$
      0003C7 5B 02            [ 2]  914 	addw	sp, #2
      0003C9 81               [ 4]  915 	ret
                                    916 ;	ds18b20.c: 355: void _tm1637ClkHigh(void)
                                    917 ;	-----------------------------------------
                                    918 ;	 function _tm1637ClkHigh
                                    919 ;	-----------------------------------------
      0003CA                        920 __tm1637ClkHigh:
                                    921 ;	ds18b20.c: 360: PD_ODR |= 1 << 2;
      0003CA AE 50 0F         [ 2]  922 	ldw	x, #0x500f
      0003CD F6               [ 1]  923 	ld	a, (x)
      0003CE AA 04            [ 1]  924 	or	a, #0x04
      0003D0 F7               [ 1]  925 	ld	(x), a
      0003D1 81               [ 4]  926 	ret
                                    927 ;	ds18b20.c: 363: void _tm1637ClkLow(void)
                                    928 ;	-----------------------------------------
                                    929 ;	 function _tm1637ClkLow
                                    930 ;	-----------------------------------------
      0003D2                        931 __tm1637ClkLow:
                                    932 ;	ds18b20.c: 367: PD_ODR &= ~(1 << 2);
      0003D2 AE 50 0F         [ 2]  933 	ldw	x, #0x500f
      0003D5 F6               [ 1]  934 	ld	a, (x)
      0003D6 A4 FB            [ 1]  935 	and	a, #0xfb
      0003D8 F7               [ 1]  936 	ld	(x), a
      0003D9 81               [ 4]  937 	ret
                                    938 ;	ds18b20.c: 373: void _tm1637DioHigh(void)
                                    939 ;	-----------------------------------------
                                    940 ;	 function _tm1637DioHigh
                                    941 ;	-----------------------------------------
      0003DA                        942 __tm1637DioHigh:
                                    943 ;	ds18b20.c: 377: PD_ODR |= 1 << 3;
      0003DA AE 50 0F         [ 2]  944 	ldw	x, #0x500f
      0003DD F6               [ 1]  945 	ld	a, (x)
      0003DE AA 08            [ 1]  946 	or	a, #0x08
      0003E0 F7               [ 1]  947 	ld	(x), a
      0003E1 81               [ 4]  948 	ret
                                    949 ;	ds18b20.c: 381: void _tm1637DioLow(void)
                                    950 ;	-----------------------------------------
                                    951 ;	 function _tm1637DioLow
                                    952 ;	-----------------------------------------
      0003E2                        953 __tm1637DioLow:
                                    954 ;	ds18b20.c: 383: PD_ODR &= ~(1 << 3);
      0003E2 AE 50 0F         [ 2]  955 	ldw	x, #0x500f
      0003E5 F6               [ 1]  956 	ld	a, (x)
      0003E6 A4 F7            [ 1]  957 	and	a, #0xf7
      0003E8 F7               [ 1]  958 	ld	(x), a
      0003E9 81               [ 4]  959 	ret
                                    960 ;	ds18b20.c: 391: void _delay_us(unsigned int i)
                                    961 ;	-----------------------------------------
                                    962 ;	 function _delay_us
                                    963 ;	-----------------------------------------
      0003EA                        964 __delay_us:
                                    965 ;	ds18b20.c: 393: i *= 3; 
      0003EA 1E 03            [ 2]  966 	ldw	x, (0x03, sp)
      0003EC 89               [ 2]  967 	pushw	x
      0003ED 4B 03            [ 1]  968 	push	#0x03
      0003EF 4B 00            [ 1]  969 	push	#0x00
      0003F1 CDr00r00         [ 4]  970 	call	__mulint
      0003F4 5B 04            [ 2]  971 	addw	sp, #4
      0003F6 1F 03            [ 2]  972 	ldw	(0x03, sp), x
                                    973 ;	ds18b20.c: 394: while(--i);
      0003F8 1E 03            [ 2]  974 	ldw	x, (0x03, sp)
      0003FA                        975 00101$:
      0003FA 5A               [ 2]  976 	decw	x
      0003FB 5D               [ 2]  977 	tnzw	x
      0003FC 26 FC            [ 1]  978 	jrne	00101$
      0003FE 81               [ 4]  979 	ret
                                    980 ;	ds18b20.c: 397: void _delay_ms(unsigned int i)
                                    981 ;	-----------------------------------------
                                    982 ;	 function _delay_ms
                                    983 ;	-----------------------------------------
      0003FF                        984 __delay_ms:
                                    985 ;	ds18b20.c: 399: while(i--)
      0003FF 1E 03            [ 2]  986 	ldw	x, (0x03, sp)
      000401                        987 00101$:
      000401 90 93            [ 1]  988 	ldw	y, x
      000403 5A               [ 2]  989 	decw	x
      000404 90 5D            [ 2]  990 	tnzw	y
      000406 27 0D            [ 1]  991 	jreq	00104$
                                    992 ;	ds18b20.c: 401: _delay_us(1000);
      000408 89               [ 2]  993 	pushw	x
      000409 4B E8            [ 1]  994 	push	#0xe8
      00040B 4B 03            [ 1]  995 	push	#0x03
      00040D CDr03rEA         [ 4]  996 	call	__delay_us
      000410 5B 02            [ 2]  997 	addw	sp, #2
      000412 85               [ 2]  998 	popw	x
      000413 20 EC            [ 2]  999 	jra	00101$
      000415                       1000 00104$:
      000415 81               [ 4] 1001 	ret
                                   1002 ;	ds18b20.c: 407: void DS18B20_Init(void)
                                   1003 ;	-----------------------------------------
                                   1004 ;	 function DS18B20_Init
                                   1005 ;	-----------------------------------------
      000416                       1006 _DS18B20_Init:
                                   1007 ;	ds18b20.c: 409: DS18B20_DQ_OUT;   
      000416 AE 50 02         [ 2] 1008 	ldw	x, #0x5002
      000419 F6               [ 1] 1009 	ld	a, (x)
      00041A AA 08            [ 1] 1010 	or	a, #0x08
      00041C F7               [ 1] 1011 	ld	(x), a
                                   1012 ;	ds18b20.c: 410: DS18B20_DQ_PUSH_PULL;    
      00041D AE 50 03         [ 2] 1013 	ldw	x, #0x5003
      000420 F6               [ 1] 1014 	ld	a, (x)
      000421 AA 08            [ 1] 1015 	or	a, #0x08
      000423 F7               [ 1] 1016 	ld	(x), a
                                   1017 ;	ds18b20.c: 411: DS18B20_DQ_HIGH;   
      000424 AE 50 00         [ 2] 1018 	ldw	x, #0x5000
      000427 F6               [ 1] 1019 	ld	a, (x)
      000428 AA 08            [ 1] 1020 	or	a, #0x08
      00042A F7               [ 1] 1021 	ld	(x), a
                                   1022 ;	ds18b20.c: 412: _delay_us(10);
      00042B 4B 0A            [ 1] 1023 	push	#0x0a
      00042D 4B 00            [ 1] 1024 	push	#0x00
      00042F CDr03rEA         [ 4] 1025 	call	__delay_us
      000432 5B 02            [ 2] 1026 	addw	sp, #2
                                   1027 ;	ds18b20.c: 413: DS18B20_DQ_LOW;   
      000434 AE 50 00         [ 2] 1028 	ldw	x, #0x5000
      000437 F6               [ 1] 1029 	ld	a, (x)
      000438 A4 F7            [ 1] 1030 	and	a, #0xf7
      00043A F7               [ 1] 1031 	ld	(x), a
                                   1032 ;	ds18b20.c: 414: _delay_us(600);     //????
      00043B 4B 58            [ 1] 1033 	push	#0x58
      00043D 4B 02            [ 1] 1034 	push	#0x02
      00043F CDr03rEA         [ 4] 1035 	call	__delay_us
      000442 5B 02            [ 2] 1036 	addw	sp, #2
                                   1037 ;	ds18b20.c: 416: DS18B20_DQ_IN;   
      000444 AE 50 02         [ 2] 1038 	ldw	x, #0x5002
      000447 F6               [ 1] 1039 	ld	a, (x)
      000448 A4 F7            [ 1] 1040 	and	a, #0xf7
      00044A F7               [ 1] 1041 	ld	(x), a
                                   1042 ;	ds18b20.c: 417: DS18B20_DQ_PULL_UP;    
      00044B AE 50 03         [ 2] 1043 	ldw	x, #0x5003
      00044E F6               [ 1] 1044 	ld	a, (x)
      00044F AA 08            [ 1] 1045 	or	a, #0x08
      000451 F7               [ 1] 1046 	ld	(x), a
                                   1047 ;	ds18b20.c: 418: _delay_us(100);     
      000452 4B 64            [ 1] 1048 	push	#0x64
      000454 4B 00            [ 1] 1049 	push	#0x00
      000456 CDr03rEA         [ 4] 1050 	call	__delay_us
      000459 5B 02            [ 2] 1051 	addw	sp, #2
                                   1052 ;	ds18b20.c: 419: while(DS18B20_DQ_VALUE == 1);
      00045B                       1053 00101$:
      00045B AE 50 01         [ 2] 1054 	ldw	x, #0x5001
      00045E F6               [ 1] 1055 	ld	a, (x)
      00045F A1 01            [ 1] 1056 	cp	a, #0x01
      000461 27 F8            [ 1] 1057 	jreq	00101$
                                   1058 ;	ds18b20.c: 420: _delay_us(400);
      000463 4B 90            [ 1] 1059 	push	#0x90
      000465 4B 01            [ 1] 1060 	push	#0x01
      000467 CDr03rEA         [ 4] 1061 	call	__delay_us
      00046A 5B 02            [ 2] 1062 	addw	sp, #2
      00046C 81               [ 4] 1063 	ret
                                   1064 ;	ds18b20.c: 424: void DS18B20_WriteByte(unsigned char _data)
                                   1065 ;	-----------------------------------------
                                   1066 ;	 function DS18B20_WriteByte
                                   1067 ;	-----------------------------------------
      00046D                       1068 _DS18B20_WriteByte:
      00046D 88               [ 1] 1069 	push	a
                                   1070 ;	ds18b20.c: 428: DS18B20_DQ_OUT;
      00046E AE 50 02         [ 2] 1071 	ldw	x, #0x5002
      000471 F6               [ 1] 1072 	ld	a, (x)
      000472 AA 08            [ 1] 1073 	or	a, #0x08
      000474 F7               [ 1] 1074 	ld	(x), a
                                   1075 ;	ds18b20.c: 429: for (i = 0; i < 8; i++)
      000475 0F 01            [ 1] 1076 	clr	(0x01, sp)
      000477                       1077 00104$:
                                   1078 ;	ds18b20.c: 431: DS18B20_DQ_LOW;
      000477 AE 50 00         [ 2] 1079 	ldw	x, #0x5000
      00047A F6               [ 1] 1080 	ld	a, (x)
      00047B A4 F7            [ 1] 1081 	and	a, #0xf7
      00047D F7               [ 1] 1082 	ld	(x), a
                                   1083 ;	ds18b20.c: 432: _delay_us(2);
      00047E 4B 02            [ 1] 1084 	push	#0x02
      000480 4B 00            [ 1] 1085 	push	#0x00
      000482 CDr03rEA         [ 4] 1086 	call	__delay_us
      000485 5B 02            [ 2] 1087 	addw	sp, #2
                                   1088 ;	ds18b20.c: 433: if (_data & 0x01)
      000487 7B 04            [ 1] 1089 	ld	a, (0x04, sp)
      000489 44               [ 1] 1090 	srl	a
      00048A 24 07            [ 1] 1091 	jrnc	00102$
                                   1092 ;	ds18b20.c: 435: DS18B20_DQ_HIGH;
      00048C AE 50 00         [ 2] 1093 	ldw	x, #0x5000
      00048F F6               [ 1] 1094 	ld	a, (x)
      000490 AA 08            [ 1] 1095 	or	a, #0x08
      000492 F7               [ 1] 1096 	ld	(x), a
      000493                       1097 00102$:
                                   1098 ;	ds18b20.c: 437: _data >>= 1;
      000493 7B 04            [ 1] 1099 	ld	a, (0x04, sp)
      000495 44               [ 1] 1100 	srl	a
      000496 6B 04            [ 1] 1101 	ld	(0x04, sp), a
                                   1102 ;	ds18b20.c: 438: _delay_us(60);
      000498 4B 3C            [ 1] 1103 	push	#0x3c
      00049A 4B 00            [ 1] 1104 	push	#0x00
      00049C CDr03rEA         [ 4] 1105 	call	__delay_us
      00049F 5B 02            [ 2] 1106 	addw	sp, #2
                                   1107 ;	ds18b20.c: 439: DS18B20_DQ_HIGH;
      0004A1 AE 50 00         [ 2] 1108 	ldw	x, #0x5000
      0004A4 F6               [ 1] 1109 	ld	a, (x)
      0004A5 AA 08            [ 1] 1110 	or	a, #0x08
      0004A7 F7               [ 1] 1111 	ld	(x), a
                                   1112 ;	ds18b20.c: 429: for (i = 0; i < 8; i++)
      0004A8 0C 01            [ 1] 1113 	inc	(0x01, sp)
      0004AA 7B 01            [ 1] 1114 	ld	a, (0x01, sp)
      0004AC A1 08            [ 1] 1115 	cp	a, #0x08
      0004AE 25 C7            [ 1] 1116 	jrc	00104$
      0004B0 84               [ 1] 1117 	pop	a
      0004B1 81               [ 4] 1118 	ret
                                   1119 ;	ds18b20.c: 443: unsigned char DS18B20_ReadByte(void)
                                   1120 ;	-----------------------------------------
                                   1121 ;	 function DS18B20_ReadByte
                                   1122 ;	-----------------------------------------
      0004B2                       1123 _DS18B20_ReadByte:
      0004B2 52 02            [ 2] 1124 	sub	sp, #2
                                   1125 ;	ds18b20.c: 445: unsigned char i = 0, _data = 0;
      0004B4 0F 01            [ 1] 1126 	clr	(0x01, sp)
                                   1127 ;	ds18b20.c: 447: for (i = 0; i < 8; i++)
      0004B6 0F 02            [ 1] 1128 	clr	(0x02, sp)
      0004B8                       1129 00104$:
                                   1130 ;	ds18b20.c: 449: DS18B20_DQ_OUT;
      0004B8 AE 50 02         [ 2] 1131 	ldw	x, #0x5002
      0004BB F6               [ 1] 1132 	ld	a, (x)
      0004BC AA 08            [ 1] 1133 	or	a, #0x08
      0004BE F7               [ 1] 1134 	ld	(x), a
                                   1135 ;	ds18b20.c: 450: DS18B20_DQ_LOW;
      0004BF AE 50 00         [ 2] 1136 	ldw	x, #0x5000
      0004C2 F6               [ 1] 1137 	ld	a, (x)
      0004C3 A4 F7            [ 1] 1138 	and	a, #0xf7
      0004C5 F7               [ 1] 1139 	ld	(x), a
                                   1140 ;	ds18b20.c: 451: _delay_us(5);
      0004C6 4B 05            [ 1] 1141 	push	#0x05
      0004C8 4B 00            [ 1] 1142 	push	#0x00
      0004CA CDr03rEA         [ 4] 1143 	call	__delay_us
      0004CD 5B 02            [ 2] 1144 	addw	sp, #2
                                   1145 ;	ds18b20.c: 452: _data >>= 1;
      0004CF 04 01            [ 1] 1146 	srl	(0x01, sp)
                                   1147 ;	ds18b20.c: 453: DS18B20_DQ_HIGH;
      0004D1 AE 50 00         [ 2] 1148 	ldw	x, #0x5000
      0004D4 F6               [ 1] 1149 	ld	a, (x)
      0004D5 AA 08            [ 1] 1150 	or	a, #0x08
      0004D7 F7               [ 1] 1151 	ld	(x), a
                                   1152 ;	ds18b20.c: 454: DS18B20_DQ_IN;
      0004D8 AE 50 02         [ 2] 1153 	ldw	x, #0x5002
      0004DB F6               [ 1] 1154 	ld	a, (x)
      0004DC A4 F7            [ 1] 1155 	and	a, #0xf7
      0004DE F7               [ 1] 1156 	ld	(x), a
                                   1157 ;	ds18b20.c: 455: if (DS18B20_DQ_VALUE)
      0004DF AE 50 01         [ 2] 1158 	ldw	x, #0x5001
      0004E2 F6               [ 1] 1159 	ld	a, (x)
      0004E3 4D               [ 1] 1160 	tnz	a
      0004E4 27 06            [ 1] 1161 	jreq	00102$
                                   1162 ;	ds18b20.c: 457: _data |= 0x80;
      0004E6 7B 01            [ 1] 1163 	ld	a, (0x01, sp)
      0004E8 AA 80            [ 1] 1164 	or	a, #0x80
      0004EA 6B 01            [ 1] 1165 	ld	(0x01, sp), a
      0004EC                       1166 00102$:
                                   1167 ;	ds18b20.c: 459: DS18B20_DQ_OUT; 
      0004EC AE 50 02         [ 2] 1168 	ldw	x, #0x5002
      0004EF F6               [ 1] 1169 	ld	a, (x)
      0004F0 AA 08            [ 1] 1170 	or	a, #0x08
      0004F2 F7               [ 1] 1171 	ld	(x), a
                                   1172 ;	ds18b20.c: 460: DS18B20_DQ_HIGH;
      0004F3 AE 50 00         [ 2] 1173 	ldw	x, #0x5000
      0004F6 F6               [ 1] 1174 	ld	a, (x)
      0004F7 AA 08            [ 1] 1175 	or	a, #0x08
      0004F9 F7               [ 1] 1176 	ld	(x), a
                                   1177 ;	ds18b20.c: 461: _delay_us(60);
      0004FA 4B 3C            [ 1] 1178 	push	#0x3c
      0004FC 4B 00            [ 1] 1179 	push	#0x00
      0004FE CDr03rEA         [ 4] 1180 	call	__delay_us
      000501 5B 02            [ 2] 1181 	addw	sp, #2
                                   1182 ;	ds18b20.c: 447: for (i = 0; i < 8; i++)
      000503 0C 02            [ 1] 1183 	inc	(0x02, sp)
      000505 7B 02            [ 1] 1184 	ld	a, (0x02, sp)
      000507 A1 08            [ 1] 1185 	cp	a, #0x08
      000509 25 AD            [ 1] 1186 	jrc	00104$
                                   1187 ;	ds18b20.c: 464: return _data;
      00050B 7B 01            [ 1] 1188 	ld	a, (0x01, sp)
      00050D 5B 02            [ 2] 1189 	addw	sp, #2
      00050F 81               [ 4] 1190 	ret
                                   1191 ;	ds18b20.c: 467: float DS18B20_ReadTemperature(void)
                                   1192 ;	-----------------------------------------
                                   1193 ;	 function DS18B20_ReadTemperature
                                   1194 ;	-----------------------------------------
      000510                       1195 _DS18B20_ReadTemperature:
      000510 52 0E            [ 2] 1196 	sub	sp, #14
                                   1197 ;	ds18b20.c: 472: DS18B20_Init();
      000512 CDr04r16         [ 4] 1198 	call	_DS18B20_Init
                                   1199 ;	ds18b20.c: 473: DS18B20_WriteByte(0xcc);
      000515 4B CC            [ 1] 1200 	push	#0xcc
      000517 CDr04r6D         [ 4] 1201 	call	_DS18B20_WriteByte
      00051A 84               [ 1] 1202 	pop	a
                                   1203 ;	ds18b20.c: 474: DS18B20_WriteByte(0x44);
      00051B 4B 44            [ 1] 1204 	push	#0x44
      00051D CDr04r6D         [ 4] 1205 	call	_DS18B20_WriteByte
      000520 84               [ 1] 1206 	pop	a
                                   1207 ;	ds18b20.c: 476: DS18B20_Init();
      000521 CDr04r16         [ 4] 1208 	call	_DS18B20_Init
                                   1209 ;	ds18b20.c: 477: DS18B20_WriteByte(0xcc);
      000524 4B CC            [ 1] 1210 	push	#0xcc
      000526 CDr04r6D         [ 4] 1211 	call	_DS18B20_WriteByte
      000529 84               [ 1] 1212 	pop	a
                                   1213 ;	ds18b20.c: 478: DS18B20_WriteByte(0xbe);
      00052A 4B BE            [ 1] 1214 	push	#0xbe
      00052C CDr04r6D         [ 4] 1215 	call	_DS18B20_WriteByte
      00052F 84               [ 1] 1216 	pop	a
                                   1217 ;	ds18b20.c: 480: temp = DS18B20_ReadByte();
      000530 CDr04rB2         [ 4] 1218 	call	_DS18B20_ReadByte
                                   1219 ;	ds18b20.c: 481: t = (((temp & 0xf0) >> 4) + (temp & 0x07) * 0.125); 
      000533 95               [ 1] 1220 	ld	xh, a
      000534 A4 F0            [ 1] 1221 	and	a, #0xf0
      000536 4E               [ 1] 1222 	swap	a
      000537 A4 0F            [ 1] 1223 	and	a, #0x0f
      000539 6B 0E            [ 1] 1224 	ld	(0x0e, sp), a
      00053B 0F 0D            [ 1] 1225 	clr	(0x0d, sp)
      00053D 9E               [ 1] 1226 	ld	a, xh
      00053E A4 07            [ 1] 1227 	and	a, #0x07
      000540 88               [ 1] 1228 	push	a
      000541 CDr00r00         [ 4] 1229 	call	___uchar2fs
      000544 84               [ 1] 1230 	pop	a
      000545 89               [ 2] 1231 	pushw	x
      000546 90 89            [ 2] 1232 	pushw	y
      000548 5F               [ 1] 1233 	clrw	x
      000549 89               [ 2] 1234 	pushw	x
      00054A 4B 00            [ 1] 1235 	push	#0x00
      00054C 4B 3E            [ 1] 1236 	push	#0x3e
      00054E CDr00r00         [ 4] 1237 	call	___fsmul
      000551 5B 08            [ 2] 1238 	addw	sp, #8
      000553 17 05            [ 2] 1239 	ldw	(0x05, sp), y
      000555 89               [ 2] 1240 	pushw	x
      000556 16 0F            [ 2] 1241 	ldw	y, (0x0f, sp)
      000558 90 89            [ 2] 1242 	pushw	y
      00055A CDr00r00         [ 4] 1243 	call	___sint2fs
      00055D 5B 02            [ 2] 1244 	addw	sp, #2
      00055F 1F 05            [ 2] 1245 	ldw	(0x05, sp), x
      000561 1E 07            [ 2] 1246 	ldw	x, (0x07, sp)
      000563 89               [ 2] 1247 	pushw	x
      000564 1E 07            [ 2] 1248 	ldw	x, (0x07, sp)
      000566 89               [ 2] 1249 	pushw	x
      000567 90 89            [ 2] 1250 	pushw	y
      000569 CDr00r00         [ 4] 1251 	call	___fsadd
      00056C 5B 08            [ 2] 1252 	addw	sp, #8
      00056E 1F 0B            [ 2] 1253 	ldw	(0x0b, sp), x
      000570 17 09            [ 2] 1254 	ldw	(0x09, sp), y
                                   1255 ;	ds18b20.c: 482: temp = DS18B20_ReadByte();
      000572 CDr04rB2         [ 4] 1256 	call	_DS18B20_ReadByte
                                   1257 ;	ds18b20.c: 483: t += ((temp & 0x0f) << 4);
      000575 A4 0F            [ 1] 1258 	and	a, #0x0f
      000577 5F               [ 1] 1259 	clrw	x
      000578 97               [ 1] 1260 	ld	xl, a
      000579 58               [ 2] 1261 	sllw	x
      00057A 58               [ 2] 1262 	sllw	x
      00057B 58               [ 2] 1263 	sllw	x
      00057C 58               [ 2] 1264 	sllw	x
      00057D 89               [ 2] 1265 	pushw	x
      00057E CDr00r00         [ 4] 1266 	call	___sint2fs
      000581 5B 02            [ 2] 1267 	addw	sp, #2
      000583 89               [ 2] 1268 	pushw	x
      000584 90 89            [ 2] 1269 	pushw	y
      000586 1E 0F            [ 2] 1270 	ldw	x, (0x0f, sp)
      000588 89               [ 2] 1271 	pushw	x
      000589 1E 0F            [ 2] 1272 	ldw	x, (0x0f, sp)
      00058B 89               [ 2] 1273 	pushw	x
      00058C CDr00r00         [ 4] 1274 	call	___fsadd
      00058F 5B 08            [ 2] 1275 	addw	sp, #8
                                   1276 ;	ds18b20.c: 485: return t;
      000591 5B 0E            [ 2] 1277 	addw	sp, #14
      000593 81               [ 4] 1278 	ret
                                   1279 ;	ds18b20.c: 491: int main () {
                                   1280 ;	-----------------------------------------
                                   1281 ;	 function main
                                   1282 ;	-----------------------------------------
      000594                       1283 _main:
      000594 52 16            [ 2] 1284 	sub	sp, #22
                                   1285 ;	ds18b20.c: 495: InitializeSystemClock();
      000596 CDr00r08         [ 4] 1286 	call	_InitializeSystemClock
                                   1287 ;	ds18b20.c: 498: PD_DDR = (1 << 3) | (1 << 2); // output mode
      000599 AE 50 11         [ 2] 1288 	ldw	x, #0x5011
      00059C A6 0C            [ 1] 1289 	ld	a, #0x0c
      00059E F7               [ 1] 1290 	ld	(x), a
                                   1291 ;	ds18b20.c: 499: PD_CR1 = (1 << 3) | (1 << 2); // push-pull
      00059F AE 50 12         [ 2] 1292 	ldw	x, #0x5012
      0005A2 A6 0C            [ 1] 1293 	ld	a, #0x0c
      0005A4 F7               [ 1] 1294 	ld	(x), a
                                   1295 ;	ds18b20.c: 500: PD_CR2 = (1 << 3) | (1 << 2); // up to 10MHz speed
      0005A5 AE 50 13         [ 2] 1296 	ldw	x, #0x5013
      0005A8 A6 0C            [ 1] 1297 	ld	a, #0x0c
      0005AA F7               [ 1] 1298 	ld	(x), a
                                   1299 ;	ds18b20.c: 501: tm1637Init();
      0005AB CDr02r81         [ 4] 1300 	call	_tm1637Init
                                   1301 ;	ds18b20.c: 503: InitializeUART();
      0005AE CDr02r08         [ 4] 1302 	call	_InitializeUART
                                   1303 ;	ds18b20.c: 507: while (1) {
      0005B1                       1304 00114$:
                                   1305 ;	ds18b20.c: 510: objTemp = DS18B20_ReadTemperature(); 
      0005B1 CDr05r10         [ 4] 1306 	call	_DS18B20_ReadTemperature
      0005B4 1F 07            [ 2] 1307 	ldw	(0x07, sp), x
      0005B6 17 05            [ 2] 1308 	ldw	(0x05, sp), y
                                   1309 ;	ds18b20.c: 513: while (objTemp > 1000) {
      0005B8 5F               [ 1] 1310 	clrw	x
      0005B9 1F 01            [ 2] 1311 	ldw	(0x01, sp), x
      0005BB                       1312 00101$:
      0005BB 5F               [ 1] 1313 	clrw	x
      0005BC 89               [ 2] 1314 	pushw	x
      0005BD 4B 7A            [ 1] 1315 	push	#0x7a
      0005BF 4B 44            [ 1] 1316 	push	#0x44
      0005C1 1E 0B            [ 2] 1317 	ldw	x, (0x0b, sp)
      0005C3 89               [ 2] 1318 	pushw	x
      0005C4 1E 0B            [ 2] 1319 	ldw	x, (0x0b, sp)
      0005C6 89               [ 2] 1320 	pushw	x
      0005C7 CDr00r00         [ 4] 1321 	call	___fsgt
      0005CA 5B 08            [ 2] 1322 	addw	sp, #8
      0005CC 4D               [ 1] 1323 	tnz	a
      0005CD 27 1C            [ 1] 1324 	jreq	00127$
                                   1325 ;	ds18b20.c: 514: vierde+=1;
      0005CF 1E 01            [ 2] 1326 	ldw	x, (0x01, sp)
      0005D1 5C               [ 2] 1327 	incw	x
      0005D2 1F 01            [ 2] 1328 	ldw	(0x01, sp), x
                                   1329 ;	ds18b20.c: 515: objTemp-=1000;
      0005D4 5F               [ 1] 1330 	clrw	x
      0005D5 89               [ 2] 1331 	pushw	x
      0005D6 4B 7A            [ 1] 1332 	push	#0x7a
      0005D8 4B 44            [ 1] 1333 	push	#0x44
      0005DA 1E 0B            [ 2] 1334 	ldw	x, (0x0b, sp)
      0005DC 89               [ 2] 1335 	pushw	x
      0005DD 1E 0B            [ 2] 1336 	ldw	x, (0x0b, sp)
      0005DF 89               [ 2] 1337 	pushw	x
      0005E0 CDr00r00         [ 4] 1338 	call	___fssub
      0005E3 5B 08            [ 2] 1339 	addw	sp, #8
      0005E5 1F 07            [ 2] 1340 	ldw	(0x07, sp), x
      0005E7 17 05            [ 2] 1341 	ldw	(0x05, sp), y
      0005E9 20 D0            [ 2] 1342 	jra	00101$
                                   1343 ;	ds18b20.c: 517: while (objTemp > 100) {
      0005EB                       1344 00127$:
      0005EB 16 01            [ 2] 1345 	ldw	y, (0x01, sp)
      0005ED 17 15            [ 2] 1346 	ldw	(0x15, sp), y
      0005EF 5F               [ 1] 1347 	clrw	x
      0005F0 1F 03            [ 2] 1348 	ldw	(0x03, sp), x
      0005F2                       1349 00104$:
      0005F2 5F               [ 1] 1350 	clrw	x
      0005F3 89               [ 2] 1351 	pushw	x
      0005F4 4B C8            [ 1] 1352 	push	#0xc8
      0005F6 4B 42            [ 1] 1353 	push	#0x42
      0005F8 1E 0B            [ 2] 1354 	ldw	x, (0x0b, sp)
      0005FA 89               [ 2] 1355 	pushw	x
      0005FB 1E 0B            [ 2] 1356 	ldw	x, (0x0b, sp)
      0005FD 89               [ 2] 1357 	pushw	x
      0005FE CDr00r00         [ 4] 1358 	call	___fsgt
      000601 5B 08            [ 2] 1359 	addw	sp, #8
      000603 4D               [ 1] 1360 	tnz	a
      000604 27 1C            [ 1] 1361 	jreq	00128$
                                   1362 ;	ds18b20.c: 518: derde+=1;
      000606 1E 03            [ 2] 1363 	ldw	x, (0x03, sp)
      000608 5C               [ 2] 1364 	incw	x
      000609 1F 03            [ 2] 1365 	ldw	(0x03, sp), x
                                   1366 ;	ds18b20.c: 519: objTemp-=100;
      00060B 5F               [ 1] 1367 	clrw	x
      00060C 89               [ 2] 1368 	pushw	x
      00060D 4B C8            [ 1] 1369 	push	#0xc8
      00060F 4B 42            [ 1] 1370 	push	#0x42
      000611 1E 0B            [ 2] 1371 	ldw	x, (0x0b, sp)
      000613 89               [ 2] 1372 	pushw	x
      000614 1E 0B            [ 2] 1373 	ldw	x, (0x0b, sp)
      000616 89               [ 2] 1374 	pushw	x
      000617 CDr00r00         [ 4] 1375 	call	___fssub
      00061A 5B 08            [ 2] 1376 	addw	sp, #8
      00061C 1F 07            [ 2] 1377 	ldw	(0x07, sp), x
      00061E 17 05            [ 2] 1378 	ldw	(0x05, sp), y
      000620 20 D0            [ 2] 1379 	jra	00104$
                                   1380 ;	ds18b20.c: 521: while (objTemp > 10) {
      000622                       1381 00128$:
      000622 16 03            [ 2] 1382 	ldw	y, (0x03, sp)
      000624 17 13            [ 2] 1383 	ldw	(0x13, sp), y
      000626 5F               [ 1] 1384 	clrw	x
      000627 1F 0B            [ 2] 1385 	ldw	(0x0b, sp), x
      000629                       1386 00107$:
      000629 5F               [ 1] 1387 	clrw	x
      00062A 89               [ 2] 1388 	pushw	x
      00062B 4B 20            [ 1] 1389 	push	#0x20
      00062D 4B 41            [ 1] 1390 	push	#0x41
      00062F 1E 0B            [ 2] 1391 	ldw	x, (0x0b, sp)
      000631 89               [ 2] 1392 	pushw	x
      000632 1E 0B            [ 2] 1393 	ldw	x, (0x0b, sp)
      000634 89               [ 2] 1394 	pushw	x
      000635 CDr00r00         [ 4] 1395 	call	___fsgt
      000638 5B 08            [ 2] 1396 	addw	sp, #8
      00063A 4D               [ 1] 1397 	tnz	a
      00063B 27 1C            [ 1] 1398 	jreq	00129$
                                   1399 ;	ds18b20.c: 522: tweede+=1;
      00063D 1E 0B            [ 2] 1400 	ldw	x, (0x0b, sp)
      00063F 5C               [ 2] 1401 	incw	x
      000640 1F 0B            [ 2] 1402 	ldw	(0x0b, sp), x
                                   1403 ;	ds18b20.c: 523: objTemp-=10;
      000642 5F               [ 1] 1404 	clrw	x
      000643 89               [ 2] 1405 	pushw	x
      000644 4B 20            [ 1] 1406 	push	#0x20
      000646 4B 41            [ 1] 1407 	push	#0x41
      000648 1E 0B            [ 2] 1408 	ldw	x, (0x0b, sp)
      00064A 89               [ 2] 1409 	pushw	x
      00064B 1E 0B            [ 2] 1410 	ldw	x, (0x0b, sp)
      00064D 89               [ 2] 1411 	pushw	x
      00064E CDr00r00         [ 4] 1412 	call	___fssub
      000651 5B 08            [ 2] 1413 	addw	sp, #8
      000653 1F 07            [ 2] 1414 	ldw	(0x07, sp), x
      000655 17 05            [ 2] 1415 	ldw	(0x05, sp), y
      000657 20 D0            [ 2] 1416 	jra	00107$
                                   1417 ;	ds18b20.c: 525: while (objTemp > 0)
      000659                       1418 00129$:
      000659 16 0B            [ 2] 1419 	ldw	y, (0x0b, sp)
      00065B 17 11            [ 2] 1420 	ldw	(0x11, sp), y
      00065D 5F               [ 1] 1421 	clrw	x
      00065E 1F 09            [ 2] 1422 	ldw	(0x09, sp), x
      000660                       1423 00110$:
      000660 5F               [ 1] 1424 	clrw	x
      000661 89               [ 2] 1425 	pushw	x
      000662 5F               [ 1] 1426 	clrw	x
      000663 89               [ 2] 1427 	pushw	x
      000664 1E 0B            [ 2] 1428 	ldw	x, (0x0b, sp)
      000666 89               [ 2] 1429 	pushw	x
      000667 1E 0B            [ 2] 1430 	ldw	x, (0x0b, sp)
      000669 89               [ 2] 1431 	pushw	x
      00066A CDr00r00         [ 4] 1432 	call	___fsgt
      00066D 5B 08            [ 2] 1433 	addw	sp, #8
      00066F 4D               [ 1] 1434 	tnz	a
      000670 27 1C            [ 1] 1435 	jreq	00112$
                                   1436 ;	ds18b20.c: 527: eerste+=1;
      000672 1E 09            [ 2] 1437 	ldw	x, (0x09, sp)
      000674 5C               [ 2] 1438 	incw	x
      000675 1F 09            [ 2] 1439 	ldw	(0x09, sp), x
                                   1440 ;	ds18b20.c: 528: objTemp-=1;
      000677 5F               [ 1] 1441 	clrw	x
      000678 89               [ 2] 1442 	pushw	x
      000679 4B 80            [ 1] 1443 	push	#0x80
      00067B 4B 3F            [ 1] 1444 	push	#0x3f
      00067D 1E 0B            [ 2] 1445 	ldw	x, (0x0b, sp)
      00067F 89               [ 2] 1446 	pushw	x
      000680 1E 0B            [ 2] 1447 	ldw	x, (0x0b, sp)
      000682 89               [ 2] 1448 	pushw	x
      000683 CDr00r00         [ 4] 1449 	call	___fssub
      000686 5B 08            [ 2] 1450 	addw	sp, #8
      000688 1F 07            [ 2] 1451 	ldw	(0x07, sp), x
      00068A 17 05            [ 2] 1452 	ldw	(0x05, sp), y
      00068C 20 D2            [ 2] 1453 	jra	00110$
      00068E                       1454 00112$:
                                   1455 ;	ds18b20.c: 531: utemp=vierde*1000+derde*100+tweede*10+eerste;
      00068E 1E 15            [ 2] 1456 	ldw	x, (0x15, sp)
      000690 89               [ 2] 1457 	pushw	x
      000691 4B E8            [ 1] 1458 	push	#0xe8
      000693 4B 03            [ 1] 1459 	push	#0x03
      000695 CDr00r00         [ 4] 1460 	call	__mulint
      000698 5B 04            [ 2] 1461 	addw	sp, #4
      00069A 1F 0F            [ 2] 1462 	ldw	(0x0f, sp), x
      00069C 1E 13            [ 2] 1463 	ldw	x, (0x13, sp)
      00069E 89               [ 2] 1464 	pushw	x
      00069F 4B 64            [ 1] 1465 	push	#0x64
      0006A1 4B 00            [ 1] 1466 	push	#0x00
      0006A3 CDr00r00         [ 4] 1467 	call	__mulint
      0006A6 5B 04            [ 2] 1468 	addw	sp, #4
      0006A8 72 FB 0F         [ 2] 1469 	addw	x, (0x0f, sp)
      0006AB 1F 0D            [ 2] 1470 	ldw	(0x0d, sp), x
      0006AD 1E 11            [ 2] 1471 	ldw	x, (0x11, sp)
      0006AF 89               [ 2] 1472 	pushw	x
      0006B0 4B 0A            [ 1] 1473 	push	#0x0a
      0006B2 4B 00            [ 1] 1474 	push	#0x00
      0006B4 CDr00r00         [ 4] 1475 	call	__mulint
      0006B7 5B 04            [ 2] 1476 	addw	sp, #4
      0006B9 72 FB 0D         [ 2] 1477 	addw	x, (0x0d, sp)
      0006BC 72 FB 09         [ 2] 1478 	addw	x, (0x09, sp)
      0006BF 90 5F            [ 1] 1479 	clrw	y
      0006C1 5D               [ 2] 1480 	tnzw	x
      0006C2 2A 02            [ 1] 1481 	jrpl	00162$
      0006C4 90 5A            [ 2] 1482 	decw	y
      0006C6                       1483 00162$:
                                   1484 ;	ds18b20.c: 534: tm1637DisplayDecimal(utemp, 1); // eg 37:12
      0006C6 4B 01            [ 1] 1485 	push	#0x01
      0006C8 4B 00            [ 1] 1486 	push	#0x00
      0006CA 89               [ 2] 1487 	pushw	x
      0006CB 90 89            [ 2] 1488 	pushw	y
      0006CD CDr02r88         [ 4] 1489 	call	_tm1637DisplayDecimal
      0006D0 5B 06            [ 2] 1490 	addw	sp, #6
                                   1491 ;	ds18b20.c: 537: delayTenMicro();
      0006D2 CDr00r00         [ 4] 1492 	call	_delayTenMicro
      0006D5 CCr05rB1         [ 2] 1493 	jp	00114$
      0006D8 5B 16            [ 2] 1494 	addw	sp, #22
      0006DA 81               [ 4] 1495 	ret
                                   1496 	.area CODE
      0006DB                       1497 _segmentMap:
      0006DB 3F                    1498 	.db #0x3F	;  63
      0006DC 06                    1499 	.db #0x06	;  6
      0006DD 5B                    1500 	.db #0x5B	;  91
      0006DE 4F                    1501 	.db #0x4F	;  79	'O'
      0006DF 66                    1502 	.db #0x66	;  102	'f'
      0006E0 6D                    1503 	.db #0x6D	;  109	'm'
      0006E1 7D                    1504 	.db #0x7D	;  125
      0006E2 07                    1505 	.db #0x07	;  7
      0006E3 7F                    1506 	.db #0x7F	;  127
      0006E4 6F                    1507 	.db #0x6F	;  111	'o'
      0006E5 77                    1508 	.db #0x77	;  119	'w'
      0006E6 7C                    1509 	.db #0x7C	;  124
      0006E7 39                    1510 	.db #0x39	;  57	'9'
      0006E8 5E                    1511 	.db #0x5E	;  94
      0006E9 79                    1512 	.db #0x79	;  121	'y'
      0006EA 71                    1513 	.db #0x71	;  113	'q'
      0006EB 00                    1514 	.db #0x00	;  0
                                   1515 	.area INITIALIZER
                                   1516 	.area CABS (ABS)
